/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: dota_gcmessages_client_tournament.proto */

#ifndef PROTOBUF_C_dota_5fgcmessages_5fclient_5ftournament_2eproto__INCLUDED
#define PROTOBUF_C_dota_5fgcmessages_5fclient_5ftournament_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "dota_client_enums.pb-c.h"

typedef struct _CMsgDOTATournamentInfo CMsgDOTATournamentInfo;
typedef struct _CMsgDOTATournamentInfo__PhaseGroup CMsgDOTATournamentInfo__PhaseGroup;
typedef struct _CMsgDOTATournamentInfo__Phase CMsgDOTATournamentInfo__Phase;
typedef struct _CMsgDOTATournamentInfo__Team CMsgDOTATournamentInfo__Team;
typedef struct _CMsgDOTATournamentInfo__UpcomingMatch CMsgDOTATournamentInfo__UpcomingMatch;
typedef struct _CMsgDOTATournamentInfo__News CMsgDOTATournamentInfo__News;
typedef struct _CMsgRequestWeekendTourneySchedule CMsgRequestWeekendTourneySchedule;
typedef struct _CMsgWeekendTourneySchedule CMsgWeekendTourneySchedule;
typedef struct _CMsgWeekendTourneySchedule__Division CMsgWeekendTourneySchedule__Division;
typedef struct _CMsgWeekendTourneyOpts CMsgWeekendTourneyOpts;
typedef struct _CMsgWeekendTourneyLeave CMsgWeekendTourneyLeave;
typedef struct _CMsgDOTATournament CMsgDOTATournament;
typedef struct _CMsgDOTATournament__Team CMsgDOTATournament__Team;
typedef struct _CMsgDOTATournament__Game CMsgDOTATournament__Game;
typedef struct _CMsgDOTATournament__Node CMsgDOTATournament__Node;
typedef struct _CMsgDOTATournamentStateChange CMsgDOTATournamentStateChange;
typedef struct _CMsgDOTATournamentStateChange__GameChange CMsgDOTATournamentStateChange__GameChange;
typedef struct _CMsgDOTATournamentStateChange__TeamChange CMsgDOTATournamentStateChange__TeamChange;
typedef struct _CMsgDOTATournamentRequest CMsgDOTATournamentRequest;
typedef struct _CMsgDOTATournamentResponse CMsgDOTATournamentResponse;
typedef struct _CMsgDOTAClearTournamentGame CMsgDOTAClearTournamentGame;
typedef struct _CMsgDOTAWeekendTourneyPlayerStats CMsgDOTAWeekendTourneyPlayerStats;
typedef struct _CMsgDOTAWeekendTourneyPlayerStatsRequest CMsgDOTAWeekendTourneyPlayerStatsRequest;


/* --- enums --- */

typedef enum _ETournamentEvent {
  ETOURNAMENT_EVENT__k_ETournamentEvent_None = 0,
  ETOURNAMENT_EVENT__k_ETournamentEvent_TournamentCreated = 1,
  ETOURNAMENT_EVENT__k_ETournamentEvent_TournamentsMerged = 2,
  ETOURNAMENT_EVENT__k_ETournamentEvent_GameOutcome = 3,
  ETOURNAMENT_EVENT__k_ETournamentEvent_TeamGivenBye = 4,
  ETOURNAMENT_EVENT__k_ETournamentEvent_TournamentCanceledByAdmin = 5,
  ETOURNAMENT_EVENT__k_ETournamentEvent_TeamAbandoned = 6,
  ETOURNAMENT_EVENT__k_ETournamentEvent_ScheduledGameStarted = 7,
  ETOURNAMENT_EVENT__k_ETournamentEvent_Canceled = 8,
  ETOURNAMENT_EVENT__k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeRefund = 9,
  ETOURNAMENT_EVENT__k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeForfeit = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ETOURNAMENT_EVENT)
} ETournamentEvent;

/* --- messages --- */

struct  _CMsgDOTATournamentInfo__PhaseGroup
{
  ProtobufCMessage base;
  protobuf_c_boolean has_group_id;
  uint32_t group_id;
  char *group_name;
};
#define CMSG_DOTATOURNAMENT_INFO__PHASE_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotatournament_info__phase_group__descriptor) \
    , 0,0, NULL }


struct  _CMsgDOTATournamentInfo__Phase
{
  ProtobufCMessage base;
  protobuf_c_boolean has_phase_id;
  uint32_t phase_id;
  char *phase_name;
  protobuf_c_boolean has_type_id;
  uint32_t type_id;
  protobuf_c_boolean has_iterations;
  uint32_t iterations;
  protobuf_c_boolean has_min_start_time;
  uint32_t min_start_time;
  protobuf_c_boolean has_max_start_time;
  uint32_t max_start_time;
  size_t n_group_list;
  CMsgDOTATournamentInfo__PhaseGroup **group_list;
};
#define CMSG_DOTATOURNAMENT_INFO__PHASE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotatournament_info__phase__descriptor) \
    , 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,NULL }


struct  _CMsgDOTATournamentInfo__Team
{
  ProtobufCMessage base;
  protobuf_c_boolean has_team_id;
  uint32_t team_id;
  char *name;
  char *tag;
  protobuf_c_boolean has_team_logo;
  uint64_t team_logo;
  protobuf_c_boolean has_eliminated;
  protobuf_c_boolean eliminated;
};
#define CMSG_DOTATOURNAMENT_INFO__TEAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotatournament_info__team__descriptor) \
    , 0,0, NULL, NULL, 0,0, 0,0 }


struct  _CMsgDOTATournamentInfo__UpcomingMatch
{
  ProtobufCMessage base;
  protobuf_c_boolean has_series_id;
  uint32_t series_id;
  protobuf_c_boolean has_team1_id;
  uint32_t team1_id;
  protobuf_c_boolean has_team2_id;
  uint32_t team2_id;
  protobuf_c_boolean has_bo;
  uint32_t bo;
  char *stage_name;
  protobuf_c_boolean has_start_time;
  uint32_t start_time;
  char *winner_stage;
  char *loser_stage;
  char *team1_tag;
  char *team2_tag;
  char *team1_prev_opponent_tag;
  char *team2_prev_opponent_tag;
  protobuf_c_boolean has_team1_logo;
  uint64_t team1_logo;
  protobuf_c_boolean has_team2_logo;
  uint64_t team2_logo;
  protobuf_c_boolean has_team1_prev_opponent_logo;
  uint64_t team1_prev_opponent_logo;
  protobuf_c_boolean has_team2_prev_opponent_logo;
  uint64_t team2_prev_opponent_logo;
  protobuf_c_boolean has_team1_prev_opponent_id;
  uint32_t team1_prev_opponent_id;
  protobuf_c_boolean has_team2_prev_opponent_id;
  uint32_t team2_prev_opponent_id;
  protobuf_c_boolean has_team1_prev_match_score;
  uint32_t team1_prev_match_score;
  protobuf_c_boolean has_team1_prev_match_opponent_score;
  uint32_t team1_prev_match_opponent_score;
  protobuf_c_boolean has_team2_prev_match_score;
  uint32_t team2_prev_match_score;
  protobuf_c_boolean has_team2_prev_match_opponent_score;
  uint32_t team2_prev_match_opponent_score;
  protobuf_c_boolean has_phase_type;
  uint32_t phase_type;
  protobuf_c_boolean has_team1_score;
  uint32_t team1_score;
  protobuf_c_boolean has_team2_score;
  uint32_t team2_score;
};
#define CMSG_DOTATOURNAMENT_INFO__UPCOMING_MATCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotatournament_info__upcoming_match__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, NULL, 0,0, NULL, NULL, NULL, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgDOTATournamentInfo__News
{
  ProtobufCMessage base;
  char *link;
  char *title;
  char *image;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
};
#define CMSG_DOTATOURNAMENT_INFO__NEWS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotatournament_info__news__descriptor) \
    , NULL, NULL, NULL, 0,0 }


struct  _CMsgDOTATournamentInfo
{
  ProtobufCMessage base;
  protobuf_c_boolean has_league_id;
  uint32_t league_id;
  size_t n_phase_list;
  CMsgDOTATournamentInfo__Phase **phase_list;
  size_t n_teams_list;
  CMsgDOTATournamentInfo__Team **teams_list;
  size_t n_upcoming_matches_list;
  CMsgDOTATournamentInfo__UpcomingMatch **upcoming_matches_list;
  size_t n_news_list;
  CMsgDOTATournamentInfo__News **news_list;
};
#define CMSG_DOTATOURNAMENT_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotatournament_info__descriptor) \
    , 0,0, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _CMsgRequestWeekendTourneySchedule
{
  ProtobufCMessage base;
};
#define CMSG_REQUEST_WEEKEND_TOURNEY_SCHEDULE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_request_weekend_tourney_schedule__descriptor) \
     }


struct  _CMsgWeekendTourneySchedule__Division
{
  ProtobufCMessage base;
  protobuf_c_boolean has_division_code;
  uint32_t division_code;
  protobuf_c_boolean has_time_window_open;
  uint32_t time_window_open;
  protobuf_c_boolean has_time_window_close;
  uint32_t time_window_close;
  protobuf_c_boolean has_time_window_open_next;
  uint32_t time_window_open_next;
};
#define CMSG_WEEKEND_TOURNEY_SCHEDULE__DIVISION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_weekend_tourney_schedule__division__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgWeekendTourneySchedule
{
  ProtobufCMessage base;
  size_t n_divisions;
  CMsgWeekendTourneySchedule__Division **divisions;
};
#define CMSG_WEEKEND_TOURNEY_SCHEDULE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_weekend_tourney_schedule__descriptor) \
    , 0,NULL }


struct  _CMsgWeekendTourneyOpts
{
  ProtobufCMessage base;
  protobuf_c_boolean has_participating;
  protobuf_c_boolean participating;
  protobuf_c_boolean has_division_id;
  uint32_t division_id;
  protobuf_c_boolean has_buyin;
  uint32_t buyin;
  protobuf_c_boolean has_skill_level;
  uint32_t skill_level;
  protobuf_c_boolean has_match_groups;
  uint32_t match_groups;
  protobuf_c_boolean has_team_id;
  uint32_t team_id;
  char *pickup_team_name;
  protobuf_c_boolean has_pickup_team_logo;
  uint64_t pickup_team_logo;
};
#define CMSG_WEEKEND_TOURNEY_OPTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_weekend_tourney_opts__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0 }


struct  _CMsgWeekendTourneyLeave
{
  ProtobufCMessage base;
};
#define CMSG_WEEKEND_TOURNEY_LEAVE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_weekend_tourney_leave__descriptor) \
     }


struct  _CMsgDOTATournament__Team
{
  ProtobufCMessage base;
  protobuf_c_boolean has_team_gid;
  uint64_t team_gid;
  protobuf_c_boolean has_node_or_state;
  uint32_t node_or_state;
  size_t n_players;
  uint32_t *players;
  size_t n_player_buyin;
  uint32_t *player_buyin;
  size_t n_player_skill_level;
  uint32_t *player_skill_level;
  protobuf_c_boolean has_team_id;
  uint32_t team_id;
  char *team_name;
  protobuf_c_boolean has_team_base_logo;
  uint64_t team_base_logo;
  protobuf_c_boolean has_team_ui_logo;
  uint64_t team_ui_logo;
  protobuf_c_boolean has_team_date;
  uint32_t team_date;
};
#define CMSG_DOTATOURNAMENT__TEAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotatournament__team__descriptor) \
    , 0,0, 0,0, 0,NULL, 0,NULL, 0,NULL, 0,0, NULL, 0,0, 0,0, 0,0 }


struct  _CMsgDOTATournament__Game
{
  ProtobufCMessage base;
  protobuf_c_boolean has_node_idx;
  uint32_t node_idx;
  protobuf_c_boolean has_lobby_id;
  uint64_t lobby_id;
  protobuf_c_boolean has_match_id;
  uint64_t match_id;
  protobuf_c_boolean has_team_a_good;
  protobuf_c_boolean team_a_good;
  protobuf_c_boolean has_state;
  ETournamentGameState state;
  protobuf_c_boolean has_start_time;
  uint32_t start_time;
};
#define CMSG_DOTATOURNAMENT__GAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotatournament__game__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,ETOURNAMENT_GAME_STATE__k_ETournamentGameState_Unknown, 0,0 }


struct  _CMsgDOTATournament__Node
{
  ProtobufCMessage base;
  protobuf_c_boolean has_node_id;
  uint32_t node_id;
  protobuf_c_boolean has_team_idx_a;
  uint32_t team_idx_a;
  protobuf_c_boolean has_team_idx_b;
  uint32_t team_idx_b;
  protobuf_c_boolean has_node_state;
  ETournamentNodeState node_state;
};
#define CMSG_DOTATOURNAMENT__NODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotatournament__node__descriptor) \
    , 0,0, 0,0, 0,0, 0,ETOURNAMENT_NODE_STATE__k_ETournamentNodeState_Unknown }


struct  _CMsgDOTATournament
{
  ProtobufCMessage base;
  protobuf_c_boolean has_tournament_id;
  uint32_t tournament_id;
  protobuf_c_boolean has_division_id;
  uint32_t division_id;
  protobuf_c_boolean has_schedule_time;
  uint32_t schedule_time;
  protobuf_c_boolean has_skill_level;
  uint32_t skill_level;
  protobuf_c_boolean has_tournament_template;
  ETournamentTemplate tournament_template;
  protobuf_c_boolean has_state;
  ETournamentState state;
  protobuf_c_boolean has_state_seq_num;
  uint32_t state_seq_num;
  protobuf_c_boolean has_season_trophy_id;
  uint32_t season_trophy_id;
  size_t n_teams;
  CMsgDOTATournament__Team **teams;
  size_t n_games;
  CMsgDOTATournament__Game **games;
  size_t n_nodes;
  CMsgDOTATournament__Node **nodes;
};
#define CMSG_DOTATOURNAMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotatournament__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,ETOURNAMENT_TEMPLATE__k_ETournamentTemplate_None, 0,ETOURNAMENT_STATE__k_ETournamentState_Unknown, 0,0, 0,0, 0,NULL, 0,NULL, 0,NULL }


struct  _CMsgDOTATournamentStateChange__GameChange
{
  ProtobufCMessage base;
  protobuf_c_boolean has_match_id;
  uint64_t match_id;
  protobuf_c_boolean has_new_state;
  ETournamentGameState new_state;
};
#define CMSG_DOTATOURNAMENT_STATE_CHANGE__GAME_CHANGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotatournament_state_change__game_change__descriptor) \
    , 0,0, 0,ETOURNAMENT_GAME_STATE__k_ETournamentGameState_Unknown }


struct  _CMsgDOTATournamentStateChange__TeamChange
{
  ProtobufCMessage base;
  protobuf_c_boolean has_team_gid;
  uint64_t team_gid;
  protobuf_c_boolean has_new_node_or_state;
  uint32_t new_node_or_state;
  protobuf_c_boolean has_old_node_or_state;
  uint32_t old_node_or_state;
};
#define CMSG_DOTATOURNAMENT_STATE_CHANGE__TEAM_CHANGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotatournament_state_change__team_change__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _CMsgDOTATournamentStateChange
{
  ProtobufCMessage base;
  protobuf_c_boolean has_new_tournament_id;
  uint32_t new_tournament_id;
  protobuf_c_boolean has_event;
  ETournamentEvent event;
  protobuf_c_boolean has_new_tournament_state;
  ETournamentState new_tournament_state;
  size_t n_game_changes;
  CMsgDOTATournamentStateChange__GameChange **game_changes;
  size_t n_team_changes;
  CMsgDOTATournamentStateChange__TeamChange **team_changes;
  size_t n_merged_tournament_ids;
  uint32_t *merged_tournament_ids;
  protobuf_c_boolean has_state_seq_num;
  uint32_t state_seq_num;
};
#define CMSG_DOTATOURNAMENT_STATE_CHANGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotatournament_state_change__descriptor) \
    , 0,0, 0,ETOURNAMENT_EVENT__k_ETournamentEvent_None, 0,ETOURNAMENT_STATE__k_ETournamentState_Unknown, 0,NULL, 0,NULL, 0,NULL, 0,0 }


struct  _CMsgDOTATournamentRequest
{
  ProtobufCMessage base;
  protobuf_c_boolean has_tournament_id;
  uint32_t tournament_id;
  protobuf_c_boolean has_client_tournament_gid;
  uint64_t client_tournament_gid;
};
#define CMSG_DOTATOURNAMENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotatournament_request__descriptor) \
    , 0,0, 0,0 }


struct  _CMsgDOTATournamentResponse
{
  ProtobufCMessage base;
  protobuf_c_boolean has_result;
  uint32_t result;
  CMsgDOTATournament *tournament;
};
#define CMSG_DOTATOURNAMENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotatournament_response__descriptor) \
    , 0,2u, NULL }


struct  _CMsgDOTAClearTournamentGame
{
  ProtobufCMessage base;
  protobuf_c_boolean has_tournament_id;
  uint32_t tournament_id;
  protobuf_c_boolean has_game_id;
  uint32_t game_id;
};
#define CMSG_DOTACLEAR_TOURNAMENT_GAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotaclear_tournament_game__descriptor) \
    , 0,0, 0,0 }


struct  _CMsgDOTAWeekendTourneyPlayerStats
{
  ProtobufCMessage base;
  protobuf_c_boolean has_account_id;
  uint32_t account_id;
  protobuf_c_boolean has_season_trophy_id;
  uint32_t season_trophy_id;
  protobuf_c_boolean has_times_won_0;
  uint32_t times_won_0;
  protobuf_c_boolean has_times_won_1;
  uint32_t times_won_1;
  protobuf_c_boolean has_times_won_2;
  uint32_t times_won_2;
  protobuf_c_boolean has_times_won_3;
  uint32_t times_won_3;
  protobuf_c_boolean has_times_bye_and_lost;
  uint32_t times_bye_and_lost;
  protobuf_c_boolean has_times_bye_and_won;
  uint32_t times_bye_and_won;
  protobuf_c_boolean has_total_games_won;
  uint32_t total_games_won;
  protobuf_c_boolean has_max_tier_played;
  uint32_t max_tier_played;
  protobuf_c_boolean has_max_tier_won_game;
  uint32_t max_tier_won_game;
  protobuf_c_boolean has_max_tier_champion;
  uint32_t max_tier_champion;
  protobuf_c_boolean has_score;
  uint32_t score;
};
#define CMSG_DOTAWEEKEND_TOURNEY_PLAYER_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotaweekend_tourney_player_stats__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgDOTAWeekendTourneyPlayerStatsRequest
{
  ProtobufCMessage base;
  protobuf_c_boolean has_account_id;
  uint32_t account_id;
  protobuf_c_boolean has_season_trophy_id;
  uint32_t season_trophy_id;
};
#define CMSG_DOTAWEEKEND_TOURNEY_PLAYER_STATS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotaweekend_tourney_player_stats_request__descriptor) \
    , 0,0, 0,0 }


/* CMsgDOTATournamentInfo__PhaseGroup methods */
void   cmsg_dotatournament_info__phase_group__init
                     (CMsgDOTATournamentInfo__PhaseGroup         *message);
/* CMsgDOTATournamentInfo__Phase methods */
void   cmsg_dotatournament_info__phase__init
                     (CMsgDOTATournamentInfo__Phase         *message);
/* CMsgDOTATournamentInfo__Team methods */
void   cmsg_dotatournament_info__team__init
                     (CMsgDOTATournamentInfo__Team         *message);
/* CMsgDOTATournamentInfo__UpcomingMatch methods */
void   cmsg_dotatournament_info__upcoming_match__init
                     (CMsgDOTATournamentInfo__UpcomingMatch         *message);
/* CMsgDOTATournamentInfo__News methods */
void   cmsg_dotatournament_info__news__init
                     (CMsgDOTATournamentInfo__News         *message);
/* CMsgDOTATournamentInfo methods */
void   cmsg_dotatournament_info__init
                     (CMsgDOTATournamentInfo         *message);
size_t cmsg_dotatournament_info__get_packed_size
                     (const CMsgDOTATournamentInfo   *message);
size_t cmsg_dotatournament_info__pack
                     (const CMsgDOTATournamentInfo   *message,
                      uint8_t             *out);
size_t cmsg_dotatournament_info__pack_to_buffer
                     (const CMsgDOTATournamentInfo   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTATournamentInfo *
       cmsg_dotatournament_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotatournament_info__free_unpacked
                     (CMsgDOTATournamentInfo *message,
                      ProtobufCAllocator *allocator);
/* CMsgRequestWeekendTourneySchedule methods */
void   cmsg_request_weekend_tourney_schedule__init
                     (CMsgRequestWeekendTourneySchedule         *message);
size_t cmsg_request_weekend_tourney_schedule__get_packed_size
                     (const CMsgRequestWeekendTourneySchedule   *message);
size_t cmsg_request_weekend_tourney_schedule__pack
                     (const CMsgRequestWeekendTourneySchedule   *message,
                      uint8_t             *out);
size_t cmsg_request_weekend_tourney_schedule__pack_to_buffer
                     (const CMsgRequestWeekendTourneySchedule   *message,
                      ProtobufCBuffer     *buffer);
CMsgRequestWeekendTourneySchedule *
       cmsg_request_weekend_tourney_schedule__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_request_weekend_tourney_schedule__free_unpacked
                     (CMsgRequestWeekendTourneySchedule *message,
                      ProtobufCAllocator *allocator);
/* CMsgWeekendTourneySchedule__Division methods */
void   cmsg_weekend_tourney_schedule__division__init
                     (CMsgWeekendTourneySchedule__Division         *message);
/* CMsgWeekendTourneySchedule methods */
void   cmsg_weekend_tourney_schedule__init
                     (CMsgWeekendTourneySchedule         *message);
size_t cmsg_weekend_tourney_schedule__get_packed_size
                     (const CMsgWeekendTourneySchedule   *message);
size_t cmsg_weekend_tourney_schedule__pack
                     (const CMsgWeekendTourneySchedule   *message,
                      uint8_t             *out);
size_t cmsg_weekend_tourney_schedule__pack_to_buffer
                     (const CMsgWeekendTourneySchedule   *message,
                      ProtobufCBuffer     *buffer);
CMsgWeekendTourneySchedule *
       cmsg_weekend_tourney_schedule__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_weekend_tourney_schedule__free_unpacked
                     (CMsgWeekendTourneySchedule *message,
                      ProtobufCAllocator *allocator);
/* CMsgWeekendTourneyOpts methods */
void   cmsg_weekend_tourney_opts__init
                     (CMsgWeekendTourneyOpts         *message);
size_t cmsg_weekend_tourney_opts__get_packed_size
                     (const CMsgWeekendTourneyOpts   *message);
size_t cmsg_weekend_tourney_opts__pack
                     (const CMsgWeekendTourneyOpts   *message,
                      uint8_t             *out);
size_t cmsg_weekend_tourney_opts__pack_to_buffer
                     (const CMsgWeekendTourneyOpts   *message,
                      ProtobufCBuffer     *buffer);
CMsgWeekendTourneyOpts *
       cmsg_weekend_tourney_opts__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_weekend_tourney_opts__free_unpacked
                     (CMsgWeekendTourneyOpts *message,
                      ProtobufCAllocator *allocator);
/* CMsgWeekendTourneyLeave methods */
void   cmsg_weekend_tourney_leave__init
                     (CMsgWeekendTourneyLeave         *message);
size_t cmsg_weekend_tourney_leave__get_packed_size
                     (const CMsgWeekendTourneyLeave   *message);
size_t cmsg_weekend_tourney_leave__pack
                     (const CMsgWeekendTourneyLeave   *message,
                      uint8_t             *out);
size_t cmsg_weekend_tourney_leave__pack_to_buffer
                     (const CMsgWeekendTourneyLeave   *message,
                      ProtobufCBuffer     *buffer);
CMsgWeekendTourneyLeave *
       cmsg_weekend_tourney_leave__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_weekend_tourney_leave__free_unpacked
                     (CMsgWeekendTourneyLeave *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTATournament__Team methods */
void   cmsg_dotatournament__team__init
                     (CMsgDOTATournament__Team         *message);
/* CMsgDOTATournament__Game methods */
void   cmsg_dotatournament__game__init
                     (CMsgDOTATournament__Game         *message);
/* CMsgDOTATournament__Node methods */
void   cmsg_dotatournament__node__init
                     (CMsgDOTATournament__Node         *message);
/* CMsgDOTATournament methods */
void   cmsg_dotatournament__init
                     (CMsgDOTATournament         *message);
size_t cmsg_dotatournament__get_packed_size
                     (const CMsgDOTATournament   *message);
size_t cmsg_dotatournament__pack
                     (const CMsgDOTATournament   *message,
                      uint8_t             *out);
size_t cmsg_dotatournament__pack_to_buffer
                     (const CMsgDOTATournament   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTATournament *
       cmsg_dotatournament__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotatournament__free_unpacked
                     (CMsgDOTATournament *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTATournamentStateChange__GameChange methods */
void   cmsg_dotatournament_state_change__game_change__init
                     (CMsgDOTATournamentStateChange__GameChange         *message);
/* CMsgDOTATournamentStateChange__TeamChange methods */
void   cmsg_dotatournament_state_change__team_change__init
                     (CMsgDOTATournamentStateChange__TeamChange         *message);
/* CMsgDOTATournamentStateChange methods */
void   cmsg_dotatournament_state_change__init
                     (CMsgDOTATournamentStateChange         *message);
size_t cmsg_dotatournament_state_change__get_packed_size
                     (const CMsgDOTATournamentStateChange   *message);
size_t cmsg_dotatournament_state_change__pack
                     (const CMsgDOTATournamentStateChange   *message,
                      uint8_t             *out);
size_t cmsg_dotatournament_state_change__pack_to_buffer
                     (const CMsgDOTATournamentStateChange   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTATournamentStateChange *
       cmsg_dotatournament_state_change__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotatournament_state_change__free_unpacked
                     (CMsgDOTATournamentStateChange *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTATournamentRequest methods */
void   cmsg_dotatournament_request__init
                     (CMsgDOTATournamentRequest         *message);
size_t cmsg_dotatournament_request__get_packed_size
                     (const CMsgDOTATournamentRequest   *message);
size_t cmsg_dotatournament_request__pack
                     (const CMsgDOTATournamentRequest   *message,
                      uint8_t             *out);
size_t cmsg_dotatournament_request__pack_to_buffer
                     (const CMsgDOTATournamentRequest   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTATournamentRequest *
       cmsg_dotatournament_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotatournament_request__free_unpacked
                     (CMsgDOTATournamentRequest *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTATournamentResponse methods */
void   cmsg_dotatournament_response__init
                     (CMsgDOTATournamentResponse         *message);
size_t cmsg_dotatournament_response__get_packed_size
                     (const CMsgDOTATournamentResponse   *message);
size_t cmsg_dotatournament_response__pack
                     (const CMsgDOTATournamentResponse   *message,
                      uint8_t             *out);
size_t cmsg_dotatournament_response__pack_to_buffer
                     (const CMsgDOTATournamentResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTATournamentResponse *
       cmsg_dotatournament_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotatournament_response__free_unpacked
                     (CMsgDOTATournamentResponse *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTAClearTournamentGame methods */
void   cmsg_dotaclear_tournament_game__init
                     (CMsgDOTAClearTournamentGame         *message);
size_t cmsg_dotaclear_tournament_game__get_packed_size
                     (const CMsgDOTAClearTournamentGame   *message);
size_t cmsg_dotaclear_tournament_game__pack
                     (const CMsgDOTAClearTournamentGame   *message,
                      uint8_t             *out);
size_t cmsg_dotaclear_tournament_game__pack_to_buffer
                     (const CMsgDOTAClearTournamentGame   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTAClearTournamentGame *
       cmsg_dotaclear_tournament_game__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotaclear_tournament_game__free_unpacked
                     (CMsgDOTAClearTournamentGame *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTAWeekendTourneyPlayerStats methods */
void   cmsg_dotaweekend_tourney_player_stats__init
                     (CMsgDOTAWeekendTourneyPlayerStats         *message);
size_t cmsg_dotaweekend_tourney_player_stats__get_packed_size
                     (const CMsgDOTAWeekendTourneyPlayerStats   *message);
size_t cmsg_dotaweekend_tourney_player_stats__pack
                     (const CMsgDOTAWeekendTourneyPlayerStats   *message,
                      uint8_t             *out);
size_t cmsg_dotaweekend_tourney_player_stats__pack_to_buffer
                     (const CMsgDOTAWeekendTourneyPlayerStats   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTAWeekendTourneyPlayerStats *
       cmsg_dotaweekend_tourney_player_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotaweekend_tourney_player_stats__free_unpacked
                     (CMsgDOTAWeekendTourneyPlayerStats *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTAWeekendTourneyPlayerStatsRequest methods */
void   cmsg_dotaweekend_tourney_player_stats_request__init
                     (CMsgDOTAWeekendTourneyPlayerStatsRequest         *message);
size_t cmsg_dotaweekend_tourney_player_stats_request__get_packed_size
                     (const CMsgDOTAWeekendTourneyPlayerStatsRequest   *message);
size_t cmsg_dotaweekend_tourney_player_stats_request__pack
                     (const CMsgDOTAWeekendTourneyPlayerStatsRequest   *message,
                      uint8_t             *out);
size_t cmsg_dotaweekend_tourney_player_stats_request__pack_to_buffer
                     (const CMsgDOTAWeekendTourneyPlayerStatsRequest   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTAWeekendTourneyPlayerStatsRequest *
       cmsg_dotaweekend_tourney_player_stats_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotaweekend_tourney_player_stats_request__free_unpacked
                     (CMsgDOTAWeekendTourneyPlayerStatsRequest *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CMsgDOTATournamentInfo__PhaseGroup_Closure)
                 (const CMsgDOTATournamentInfo__PhaseGroup *message,
                  void *closure_data);
typedef void (*CMsgDOTATournamentInfo__Phase_Closure)
                 (const CMsgDOTATournamentInfo__Phase *message,
                  void *closure_data);
typedef void (*CMsgDOTATournamentInfo__Team_Closure)
                 (const CMsgDOTATournamentInfo__Team *message,
                  void *closure_data);
typedef void (*CMsgDOTATournamentInfo__UpcomingMatch_Closure)
                 (const CMsgDOTATournamentInfo__UpcomingMatch *message,
                  void *closure_data);
typedef void (*CMsgDOTATournamentInfo__News_Closure)
                 (const CMsgDOTATournamentInfo__News *message,
                  void *closure_data);
typedef void (*CMsgDOTATournamentInfo_Closure)
                 (const CMsgDOTATournamentInfo *message,
                  void *closure_data);
typedef void (*CMsgRequestWeekendTourneySchedule_Closure)
                 (const CMsgRequestWeekendTourneySchedule *message,
                  void *closure_data);
typedef void (*CMsgWeekendTourneySchedule__Division_Closure)
                 (const CMsgWeekendTourneySchedule__Division *message,
                  void *closure_data);
typedef void (*CMsgWeekendTourneySchedule_Closure)
                 (const CMsgWeekendTourneySchedule *message,
                  void *closure_data);
typedef void (*CMsgWeekendTourneyOpts_Closure)
                 (const CMsgWeekendTourneyOpts *message,
                  void *closure_data);
typedef void (*CMsgWeekendTourneyLeave_Closure)
                 (const CMsgWeekendTourneyLeave *message,
                  void *closure_data);
typedef void (*CMsgDOTATournament__Team_Closure)
                 (const CMsgDOTATournament__Team *message,
                  void *closure_data);
typedef void (*CMsgDOTATournament__Game_Closure)
                 (const CMsgDOTATournament__Game *message,
                  void *closure_data);
typedef void (*CMsgDOTATournament__Node_Closure)
                 (const CMsgDOTATournament__Node *message,
                  void *closure_data);
typedef void (*CMsgDOTATournament_Closure)
                 (const CMsgDOTATournament *message,
                  void *closure_data);
typedef void (*CMsgDOTATournamentStateChange__GameChange_Closure)
                 (const CMsgDOTATournamentStateChange__GameChange *message,
                  void *closure_data);
typedef void (*CMsgDOTATournamentStateChange__TeamChange_Closure)
                 (const CMsgDOTATournamentStateChange__TeamChange *message,
                  void *closure_data);
typedef void (*CMsgDOTATournamentStateChange_Closure)
                 (const CMsgDOTATournamentStateChange *message,
                  void *closure_data);
typedef void (*CMsgDOTATournamentRequest_Closure)
                 (const CMsgDOTATournamentRequest *message,
                  void *closure_data);
typedef void (*CMsgDOTATournamentResponse_Closure)
                 (const CMsgDOTATournamentResponse *message,
                  void *closure_data);
typedef void (*CMsgDOTAClearTournamentGame_Closure)
                 (const CMsgDOTAClearTournamentGame *message,
                  void *closure_data);
typedef void (*CMsgDOTAWeekendTourneyPlayerStats_Closure)
                 (const CMsgDOTAWeekendTourneyPlayerStats *message,
                  void *closure_data);
typedef void (*CMsgDOTAWeekendTourneyPlayerStatsRequest_Closure)
                 (const CMsgDOTAWeekendTourneyPlayerStatsRequest *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    etournament_event__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotatournament_info__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotatournament_info__phase_group__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotatournament_info__phase__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotatournament_info__team__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotatournament_info__upcoming_match__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotatournament_info__news__descriptor;
extern const ProtobufCMessageDescriptor cmsg_request_weekend_tourney_schedule__descriptor;
extern const ProtobufCMessageDescriptor cmsg_weekend_tourney_schedule__descriptor;
extern const ProtobufCMessageDescriptor cmsg_weekend_tourney_schedule__division__descriptor;
extern const ProtobufCMessageDescriptor cmsg_weekend_tourney_opts__descriptor;
extern const ProtobufCMessageDescriptor cmsg_weekend_tourney_leave__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotatournament__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotatournament__team__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotatournament__game__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotatournament__node__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotatournament_state_change__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotatournament_state_change__game_change__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotatournament_state_change__team_change__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotatournament_request__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotatournament_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotaclear_tournament_game__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotaweekend_tourney_player_stats__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotaweekend_tourney_player_stats_request__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_dota_5fgcmessages_5fclient_5ftournament_2eproto__INCLUDED */
