/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: usermessages.proto */

#ifndef PROTOBUF_C_usermessages_2eproto__INCLUDED
#define PROTOBUF_C_usermessages_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "networkbasetypes.pb-c.h"

typedef struct _CUserMessageAchievementEvent CUserMessageAchievementEvent;
typedef struct _CUserMessageCloseCaption CUserMessageCloseCaption;
typedef struct _CUserMessageCloseCaptionDirect CUserMessageCloseCaptionDirect;
typedef struct _CUserMessageCloseCaptionPlaceholder CUserMessageCloseCaptionPlaceholder;
typedef struct _CUserMessageCurrentTimescale CUserMessageCurrentTimescale;
typedef struct _CUserMessageDesiredTimescale CUserMessageDesiredTimescale;
typedef struct _CUserMessageFade CUserMessageFade;
typedef struct _CUserMessageShake CUserMessageShake;
typedef struct _CUserMessageShakeDir CUserMessageShakeDir;
typedef struct _CUserMessageScreenTilt CUserMessageScreenTilt;
typedef struct _CUserMessageSayText CUserMessageSayText;
typedef struct _CUserMessageSayText2 CUserMessageSayText2;
typedef struct _CUserMessageHudMsg CUserMessageHudMsg;
typedef struct _CUserMessageHudText CUserMessageHudText;
typedef struct _CUserMessageTextMsg CUserMessageTextMsg;
typedef struct _CUserMessageGameTitle CUserMessageGameTitle;
typedef struct _CUserMessageResetHUD CUserMessageResetHUD;
typedef struct _CUserMessageSendAudio CUserMessageSendAudio;
typedef struct _CUserMessageAudioParameter CUserMessageAudioParameter;
typedef struct _CUserMessageVoiceMask CUserMessageVoiceMask;
typedef struct _CUserMessageRequestState CUserMessageRequestState;
typedef struct _CUserMessageHintText CUserMessageHintText;
typedef struct _CUserMessageKeyHintText CUserMessageKeyHintText;
typedef struct _CUserMessageVoiceSubtitle CUserMessageVoiceSubtitle;
typedef struct _CUserMessageVGUIMenu CUserMessageVGUIMenu;
typedef struct _CUserMessageVGUIMenu__Keys CUserMessageVGUIMenu__Keys;
typedef struct _CUserMessageRumble CUserMessageRumble;
typedef struct _CUserMessageTrain CUserMessageTrain;
typedef struct _CUserMessageSayTextChannel CUserMessageSayTextChannel;
typedef struct _CUserMessageColoredText CUserMessageColoredText;
typedef struct _CUserMessageItemPickup CUserMessageItemPickup;
typedef struct _CUserMessageAmmoDenied CUserMessageAmmoDenied;
typedef struct _CUserMessageCrosshairAngle CUserMessageCrosshairAngle;
typedef struct _CUserMessageShowMenu CUserMessageShowMenu;
typedef struct _CUserMessageCreditsMsg CUserMessageCreditsMsg;
typedef struct _CEntityMessagePlayJingle CEntityMessagePlayJingle;
typedef struct _CEntityMessageScreenOverlay CEntityMessageScreenOverlay;
typedef struct _CEntityMessageRemoveAllDecals CEntityMessageRemoveAllDecals;
typedef struct _CEntityMessagePropagateForce CEntityMessagePropagateForce;
typedef struct _CEntityMessageDoSpark CEntityMessageDoSpark;
typedef struct _CEntityMessageFixAngle CEntityMessageFixAngle;
typedef struct _CUserMessageCameraTransition CUserMessageCameraTransition;
typedef struct _CUserMessageCameraTransition__TransitionDataDriven CUserMessageCameraTransition__TransitionDataDriven;
typedef struct _CUserMsgParticleManager CUserMsgParticleManager;
typedef struct _CUserMsgParticleManager__ReleaseParticleIndex CUserMsgParticleManager__ReleaseParticleIndex;
typedef struct _CUserMsgParticleManager__CreateParticle CUserMsgParticleManager__CreateParticle;
typedef struct _CUserMsgParticleManager__DestroyParticle CUserMsgParticleManager__DestroyParticle;
typedef struct _CUserMsgParticleManager__DestroyParticleInvolving CUserMsgParticleManager__DestroyParticleInvolving;
typedef struct _CUserMsgParticleManager__UpdateParticle CUserMsgParticleManager__UpdateParticle;
typedef struct _CUserMsgParticleManager__UpdateParticleFwd CUserMsgParticleManager__UpdateParticleFwd;
typedef struct _CUserMsgParticleManager__UpdateParticleOrient CUserMsgParticleManager__UpdateParticleOrient;
typedef struct _CUserMsgParticleManager__UpdateParticleFallback CUserMsgParticleManager__UpdateParticleFallback;
typedef struct _CUserMsgParticleManager__UpdateParticleOffset CUserMsgParticleManager__UpdateParticleOffset;
typedef struct _CUserMsgParticleManager__UpdateParticleEnt CUserMsgParticleManager__UpdateParticleEnt;
typedef struct _CUserMsgParticleManager__UpdateParticleSetFrozen CUserMsgParticleManager__UpdateParticleSetFrozen;
typedef struct _CUserMsgParticleManager__UpdateParticleShouldDraw CUserMsgParticleManager__UpdateParticleShouldDraw;
typedef struct _CUserMsgParticleManager__ChangeControlPointAttachment CUserMsgParticleManager__ChangeControlPointAttachment;
typedef struct _CUserMsgHudError CUserMsgHudError;
typedef struct _CUserMsgCustomGameEvent CUserMsgCustomGameEvent;
typedef struct _CUserMessageHapticPulse CUserMessageHapticPulse;


/* --- enums --- */

typedef enum _EBaseUserMessages {
  EBASE_USER_MESSAGES__UM_AchievementEvent = 101,
  EBASE_USER_MESSAGES__UM_CloseCaption = 102,
  EBASE_USER_MESSAGES__UM_CloseCaptionDirect = 103,
  EBASE_USER_MESSAGES__UM_CurrentTimescale = 104,
  EBASE_USER_MESSAGES__UM_DesiredTimescale = 105,
  EBASE_USER_MESSAGES__UM_Fade = 106,
  EBASE_USER_MESSAGES__UM_GameTitle = 107,
  EBASE_USER_MESSAGES__UM_HintText = 109,
  EBASE_USER_MESSAGES__UM_HudMsg = 110,
  EBASE_USER_MESSAGES__UM_HudText = 111,
  EBASE_USER_MESSAGES__UM_KeyHintText = 112,
  EBASE_USER_MESSAGES__UM_ColoredText = 113,
  EBASE_USER_MESSAGES__UM_RequestState = 114,
  EBASE_USER_MESSAGES__UM_ResetHUD = 115,
  EBASE_USER_MESSAGES__UM_Rumble = 116,
  EBASE_USER_MESSAGES__UM_SayText = 117,
  EBASE_USER_MESSAGES__UM_SayText2 = 118,
  EBASE_USER_MESSAGES__UM_SayTextChannel = 119,
  EBASE_USER_MESSAGES__UM_Shake = 120,
  EBASE_USER_MESSAGES__UM_ShakeDir = 121,
  EBASE_USER_MESSAGES__UM_TextMsg = 124,
  EBASE_USER_MESSAGES__UM_ScreenTilt = 125,
  EBASE_USER_MESSAGES__UM_Train = 126,
  EBASE_USER_MESSAGES__UM_VGUIMenu = 127,
  EBASE_USER_MESSAGES__UM_VoiceMask = 128,
  EBASE_USER_MESSAGES__UM_VoiceSubtitle = 129,
  EBASE_USER_MESSAGES__UM_SendAudio = 130,
  EBASE_USER_MESSAGES__UM_ItemPickup = 131,
  EBASE_USER_MESSAGES__UM_AmmoDenied = 132,
  EBASE_USER_MESSAGES__UM_CrosshairAngle = 133,
  EBASE_USER_MESSAGES__UM_ShowMenu = 134,
  EBASE_USER_MESSAGES__UM_CreditsMsg = 135,
  EBASE_USER_MESSAGES__UM_CloseCaptionPlaceholder = 142,
  EBASE_USER_MESSAGES__UM_CameraTransition = 143,
  EBASE_USER_MESSAGES__UM_AudioParameter = 144,
  EBASE_USER_MESSAGES__UM_ParticleManager = 145,
  EBASE_USER_MESSAGES__UM_HudError = 146,
  EBASE_USER_MESSAGES__UM_CustomGameEvent = 148,
  EBASE_USER_MESSAGES__UM_HandHapticPulse = 149,
  EBASE_USER_MESSAGES__UM_MAX_BASE = 200
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EBASE_USER_MESSAGES)
} EBaseUserMessages;
typedef enum _EBaseEntityMessages {
  EBASE_ENTITY_MESSAGES__EM_PlayJingle = 136,
  EBASE_ENTITY_MESSAGES__EM_ScreenOverlay = 137,
  EBASE_ENTITY_MESSAGES__EM_RemoveAllDecals = 138,
  EBASE_ENTITY_MESSAGES__EM_PropagateForce = 139,
  EBASE_ENTITY_MESSAGES__EM_DoSpark = 140,
  EBASE_ENTITY_MESSAGES__EM_FixAngle = 141
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EBASE_ENTITY_MESSAGES)
} EBaseEntityMessages;
typedef enum _ERollType {
  E_ROLL_TYPE__ROLL_NONE = -1,
  E_ROLL_TYPE__ROLL_STATS = 0,
  E_ROLL_TYPE__ROLL_CREDITS = 1,
  E_ROLL_TYPE__ROLL_LATE_JOIN_LOGO = 2,
  E_ROLL_TYPE__ROLL_OUTTRO = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(E_ROLL_TYPE)
} ERollType;
typedef enum _PARTICLEMESSAGE {
  PARTICLE__MESSAGE__GAME_PARTICLE_MANAGER_EVENT_CREATE = 0,
  PARTICLE__MESSAGE__GAME_PARTICLE_MANAGER_EVENT_UPDATE = 1,
  PARTICLE__MESSAGE__GAME_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD = 2,
  PARTICLE__MESSAGE__GAME_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION = 3,
  PARTICLE__MESSAGE__GAME_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK = 4,
  PARTICLE__MESSAGE__GAME_PARTICLE_MANAGER_EVENT_UPDATE_ENT = 5,
  PARTICLE__MESSAGE__GAME_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET = 6,
  PARTICLE__MESSAGE__GAME_PARTICLE_MANAGER_EVENT_DESTROY = 7,
  PARTICLE__MESSAGE__GAME_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING = 8,
  PARTICLE__MESSAGE__GAME_PARTICLE_MANAGER_EVENT_RELEASE = 9,
  PARTICLE__MESSAGE__GAME_PARTICLE_MANAGER_EVENT_LATENCY = 10,
  PARTICLE__MESSAGE__GAME_PARTICLE_MANAGER_EVENT_SHOULD_DRAW = 11,
  PARTICLE__MESSAGE__GAME_PARTICLE_MANAGER_EVENT_FROZEN = 12,
  PARTICLE__MESSAGE__GAME_PARTICLE_MANAGER_EVENT_CHANGE_CONTROL_POINT_ATTACHMENT = 13
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PARTICLE__MESSAGE)
} PARTICLEMESSAGE;
typedef enum _EHapticPulseType {
  EHAPTIC_PULSE_TYPE__VR_HAND_HAPTIC_PULSE_LIGHT = 0,
  EHAPTIC_PULSE_TYPE__VR_HAND_HAPTIC_PULSE_MEDIUM = 1,
  EHAPTIC_PULSE_TYPE__VR_HAND_HAPTIC_PULSE_STRONG = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EHAPTIC_PULSE_TYPE)
} EHapticPulseType;

/* --- messages --- */

struct  _CUserMessageAchievementEvent
{
  ProtobufCMessage base;
  protobuf_c_boolean has_achievement;
  uint32_t achievement;
};
#define CUSER_MESSAGE_ACHIEVEMENT_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_achievement_event__descriptor) \
    , 0,0 }


struct  _CUserMessageCloseCaption
{
  ProtobufCMessage base;
  protobuf_c_boolean has_hash;
  uint32_t hash;
  protobuf_c_boolean has_duration;
  float duration;
  protobuf_c_boolean has_from_player;
  protobuf_c_boolean from_player;
  protobuf_c_boolean has_ent_index;
  int32_t ent_index;
};
#define CUSER_MESSAGE_CLOSE_CAPTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_close_caption__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


struct  _CUserMessageCloseCaptionDirect
{
  ProtobufCMessage base;
  protobuf_c_boolean has_hash;
  uint32_t hash;
  protobuf_c_boolean has_duration;
  float duration;
  protobuf_c_boolean has_from_player;
  protobuf_c_boolean from_player;
  protobuf_c_boolean has_ent_index;
  int32_t ent_index;
};
#define CUSER_MESSAGE_CLOSE_CAPTION_DIRECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_close_caption_direct__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


struct  _CUserMessageCloseCaptionPlaceholder
{
  ProtobufCMessage base;
  char *string;
  protobuf_c_boolean has_duration;
  float duration;
  protobuf_c_boolean has_from_player;
  protobuf_c_boolean from_player;
  protobuf_c_boolean has_ent_index;
  int32_t ent_index;
};
#define CUSER_MESSAGE_CLOSE_CAPTION_PLACEHOLDER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_close_caption_placeholder__descriptor) \
    , NULL, 0,0, 0,0, 0,0 }


struct  _CUserMessageCurrentTimescale
{
  ProtobufCMessage base;
  protobuf_c_boolean has_current;
  float current;
};
#define CUSER_MESSAGE_CURRENT_TIMESCALE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_current_timescale__descriptor) \
    , 0,0 }


struct  _CUserMessageDesiredTimescale
{
  ProtobufCMessage base;
  protobuf_c_boolean has_desired;
  float desired;
  protobuf_c_boolean has_acceleration;
  float acceleration;
  protobuf_c_boolean has_minblendrate;
  float minblendrate;
  protobuf_c_boolean has_blenddeltamultiplier;
  float blenddeltamultiplier;
};
#define CUSER_MESSAGE_DESIRED_TIMESCALE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_desired_timescale__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


struct  _CUserMessageFade
{
  ProtobufCMessage base;
  protobuf_c_boolean has_duration;
  uint32_t duration;
  protobuf_c_boolean has_hold_time;
  uint32_t hold_time;
  protobuf_c_boolean has_flags;
  uint32_t flags;
  protobuf_c_boolean has_color;
  uint32_t color;
};
#define CUSER_MESSAGE_FADE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_fade__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


struct  _CUserMessageShake
{
  ProtobufCMessage base;
  protobuf_c_boolean has_command;
  uint32_t command;
  protobuf_c_boolean has_amplitude;
  float amplitude;
  protobuf_c_boolean has_frequency;
  float frequency;
  protobuf_c_boolean has_duration;
  float duration;
};
#define CUSER_MESSAGE_SHAKE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_shake__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


struct  _CUserMessageShakeDir
{
  ProtobufCMessage base;
  CUserMessageShake *shake;
  CMsgVector *direction;
};
#define CUSER_MESSAGE_SHAKE_DIR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_shake_dir__descriptor) \
    , NULL, NULL }


struct  _CUserMessageScreenTilt
{
  ProtobufCMessage base;
  protobuf_c_boolean has_command;
  uint32_t command;
  protobuf_c_boolean has_ease_in_out;
  protobuf_c_boolean ease_in_out;
  CMsgVector *angle;
  protobuf_c_boolean has_duration;
  float duration;
  protobuf_c_boolean has_time;
  float time;
};
#define CUSER_MESSAGE_SCREEN_TILT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_screen_tilt__descriptor) \
    , 0,0, 0,0, NULL, 0,0, 0,0 }


struct  _CUserMessageSayText
{
  ProtobufCMessage base;
  protobuf_c_boolean has_playerindex;
  uint32_t playerindex;
  char *text;
  protobuf_c_boolean has_chat;
  protobuf_c_boolean chat;
};
#define CUSER_MESSAGE_SAY_TEXT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_say_text__descriptor) \
    , 0,0, NULL, 0,0 }


struct  _CUserMessageSayText2
{
  ProtobufCMessage base;
  protobuf_c_boolean has_entityindex;
  uint32_t entityindex;
  protobuf_c_boolean has_chat;
  protobuf_c_boolean chat;
  char *messagename;
  char *param1;
  char *param2;
  char *param3;
  char *param4;
};
#define CUSER_MESSAGE_SAY_TEXT2__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_say_text2__descriptor) \
    , 0,0, 0,0, NULL, NULL, NULL, NULL, NULL }


struct  _CUserMessageHudMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_channel;
  uint32_t channel;
  protobuf_c_boolean has_x;
  float x;
  protobuf_c_boolean has_y;
  float y;
  protobuf_c_boolean has_color1;
  uint32_t color1;
  protobuf_c_boolean has_color2;
  uint32_t color2;
  protobuf_c_boolean has_effect;
  uint32_t effect;
  protobuf_c_boolean has_fade_in_time;
  float fade_in_time;
  protobuf_c_boolean has_fade_out_time;
  float fade_out_time;
  protobuf_c_boolean has_hold_time;
  float hold_time;
  protobuf_c_boolean has_fx_time;
  float fx_time;
  char *message;
};
#define CUSER_MESSAGE_HUD_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_hud_msg__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL }


struct  _CUserMessageHudText
{
  ProtobufCMessage base;
  char *message;
};
#define CUSER_MESSAGE_HUD_TEXT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_hud_text__descriptor) \
    , NULL }


struct  _CUserMessageTextMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_dest;
  uint32_t dest;
  size_t n_param;
  char **param;
};
#define CUSER_MESSAGE_TEXT_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_text_msg__descriptor) \
    , 0,0, 0,NULL }


struct  _CUserMessageGameTitle
{
  ProtobufCMessage base;
};
#define CUSER_MESSAGE_GAME_TITLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_game_title__descriptor) \
     }


struct  _CUserMessageResetHUD
{
  ProtobufCMessage base;
};
#define CUSER_MESSAGE_RESET_HUD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_reset_hud__descriptor) \
     }


struct  _CUserMessageSendAudio
{
  ProtobufCMessage base;
  char *soundname;
  protobuf_c_boolean has_stop;
  protobuf_c_boolean stop;
};
#define CUSER_MESSAGE_SEND_AUDIO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_send_audio__descriptor) \
    , NULL, 0,0 }


struct  _CUserMessageAudioParameter
{
  ProtobufCMessage base;
  protobuf_c_boolean has_parameter_type;
  uint32_t parameter_type;
  protobuf_c_boolean has_name_hash_code;
  uint32_t name_hash_code;
  protobuf_c_boolean has_value;
  float value;
  protobuf_c_boolean has_int_value;
  uint32_t int_value;
};
#define CUSER_MESSAGE_AUDIO_PARAMETER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_audio_parameter__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


struct  _CUserMessageVoiceMask
{
  ProtobufCMessage base;
  size_t n_gamerules_masks;
  uint32_t *gamerules_masks;
  size_t n_ban_masks;
  uint32_t *ban_masks;
  protobuf_c_boolean has_mod_enable;
  protobuf_c_boolean mod_enable;
};
#define CUSER_MESSAGE_VOICE_MASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_voice_mask__descriptor) \
    , 0,NULL, 0,NULL, 0,0 }


struct  _CUserMessageRequestState
{
  ProtobufCMessage base;
};
#define CUSER_MESSAGE_REQUEST_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_request_state__descriptor) \
     }


struct  _CUserMessageHintText
{
  ProtobufCMessage base;
  char *message;
};
#define CUSER_MESSAGE_HINT_TEXT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_hint_text__descriptor) \
    , NULL }


struct  _CUserMessageKeyHintText
{
  ProtobufCMessage base;
  size_t n_messages;
  char **messages;
};
#define CUSER_MESSAGE_KEY_HINT_TEXT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_key_hint_text__descriptor) \
    , 0,NULL }


struct  _CUserMessageVoiceSubtitle
{
  ProtobufCMessage base;
  protobuf_c_boolean has_player;
  int32_t player;
  protobuf_c_boolean has_menu;
  int32_t menu;
  protobuf_c_boolean has_item;
  int32_t item;
};
#define CUSER_MESSAGE_VOICE_SUBTITLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_voice_subtitle__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _CUserMessageVGUIMenu__Keys
{
  ProtobufCMessage base;
  char *name;
  char *value;
};
#define CUSER_MESSAGE_VGUIMENU__KEYS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_vguimenu__keys__descriptor) \
    , NULL, NULL }


struct  _CUserMessageVGUIMenu
{
  ProtobufCMessage base;
  char *name;
  protobuf_c_boolean has_show;
  protobuf_c_boolean show;
  size_t n_keys;
  CUserMessageVGUIMenu__Keys **keys;
};
#define CUSER_MESSAGE_VGUIMENU__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_vguimenu__descriptor) \
    , NULL, 0,0, 0,NULL }


struct  _CUserMessageRumble
{
  ProtobufCMessage base;
  protobuf_c_boolean has_index;
  int32_t index;
  protobuf_c_boolean has_data;
  int32_t data;
  protobuf_c_boolean has_flags;
  int32_t flags;
};
#define CUSER_MESSAGE_RUMBLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_rumble__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _CUserMessageTrain
{
  ProtobufCMessage base;
  protobuf_c_boolean has_position;
  uint32_t position;
};
#define CUSER_MESSAGE_TRAIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_train__descriptor) \
    , 0,0 }


struct  _CUserMessageSayTextChannel
{
  ProtobufCMessage base;
  protobuf_c_boolean has_player;
  int32_t player;
  protobuf_c_boolean has_channel;
  int32_t channel;
  char *text;
};
#define CUSER_MESSAGE_SAY_TEXT_CHANNEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_say_text_channel__descriptor) \
    , 0,0, 0,0, NULL }


struct  _CUserMessageColoredText
{
  ProtobufCMessage base;
  protobuf_c_boolean has_color;
  uint32_t color;
  char *text;
  protobuf_c_boolean has_reset;
  protobuf_c_boolean reset;
  protobuf_c_boolean has_context_player_id;
  int32_t context_player_id;
  protobuf_c_boolean has_context_value;
  int32_t context_value;
  protobuf_c_boolean has_context_team_id;
  int32_t context_team_id;
};
#define CUSER_MESSAGE_COLORED_TEXT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_colored_text__descriptor) \
    , 0,0, NULL, 0,0, 0,0, 0,0, 0,0 }


struct  _CUserMessageItemPickup
{
  ProtobufCMessage base;
  char *itemname;
};
#define CUSER_MESSAGE_ITEM_PICKUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_item_pickup__descriptor) \
    , NULL }


struct  _CUserMessageAmmoDenied
{
  ProtobufCMessage base;
  protobuf_c_boolean has_ammo_id;
  uint32_t ammo_id;
};
#define CUSER_MESSAGE_AMMO_DENIED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_ammo_denied__descriptor) \
    , 0,0 }


struct  _CUserMessageCrosshairAngle
{
  ProtobufCMessage base;
  CMsgQAngle *angcrosshair;
};
#define CUSER_MESSAGE_CROSSHAIR_ANGLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_crosshair_angle__descriptor) \
    , NULL }


struct  _CUserMessageShowMenu
{
  ProtobufCMessage base;
  protobuf_c_boolean has_validslots;
  uint32_t validslots;
  protobuf_c_boolean has_displaytime;
  uint32_t displaytime;
  protobuf_c_boolean has_needmore;
  protobuf_c_boolean needmore;
  char *menustring;
};
#define CUSER_MESSAGE_SHOW_MENU__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_show_menu__descriptor) \
    , 0,0, 0,0, 0,0, NULL }


struct  _CUserMessageCreditsMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_rolltype;
  ERollType rolltype;
  protobuf_c_boolean has_logo_length;
  float logo_length;
};
#define CUSER_MESSAGE_CREDITS_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_credits_msg__descriptor) \
    , 0,E_ROLL_TYPE__ROLL_NONE, 0,0 }


struct  _CEntityMessagePlayJingle
{
  ProtobufCMessage base;
};
#define CENTITY_MESSAGE_PLAY_JINGLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&centity_message_play_jingle__descriptor) \
     }


struct  _CEntityMessageScreenOverlay
{
  ProtobufCMessage base;
  protobuf_c_boolean has_start_effect;
  protobuf_c_boolean start_effect;
};
#define CENTITY_MESSAGE_SCREEN_OVERLAY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&centity_message_screen_overlay__descriptor) \
    , 0,0 }


struct  _CEntityMessageRemoveAllDecals
{
  ProtobufCMessage base;
  protobuf_c_boolean has_remove_decals;
  protobuf_c_boolean remove_decals;
};
#define CENTITY_MESSAGE_REMOVE_ALL_DECALS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&centity_message_remove_all_decals__descriptor) \
    , 0,0 }


struct  _CEntityMessagePropagateForce
{
  ProtobufCMessage base;
  CMsgVector *impulse;
};
#define CENTITY_MESSAGE_PROPAGATE_FORCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&centity_message_propagate_force__descriptor) \
    , NULL }


struct  _CEntityMessageDoSpark
{
  ProtobufCMessage base;
  CMsgVector *origin;
  protobuf_c_boolean has_entityindex;
  uint32_t entityindex;
  protobuf_c_boolean has_radius;
  float radius;
  protobuf_c_boolean has_color;
  uint32_t color;
  protobuf_c_boolean has_beams;
  uint32_t beams;
  protobuf_c_boolean has_thick;
  float thick;
  protobuf_c_boolean has_duration;
  float duration;
};
#define CENTITY_MESSAGE_DO_SPARK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&centity_message_do_spark__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CEntityMessageFixAngle
{
  ProtobufCMessage base;
  protobuf_c_boolean has_relative;
  protobuf_c_boolean relative;
  CMsgQAngle *angle;
};
#define CENTITY_MESSAGE_FIX_ANGLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&centity_message_fix_angle__descriptor) \
    , 0,0, NULL }


struct  _CUserMessageCameraTransition__TransitionDataDriven
{
  ProtobufCMessage base;
  char *filename;
  protobuf_c_boolean has_attach_ent_index;
  int32_t attach_ent_index;
};
#define CUSER_MESSAGE_CAMERA_TRANSITION__TRANSITION__DATA_DRIVEN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_camera_transition__transition__data_driven__descriptor) \
    , NULL, 0,0 }


struct  _CUserMessageCameraTransition
{
  ProtobufCMessage base;
  protobuf_c_boolean has_camera_type;
  uint32_t camera_type;
  protobuf_c_boolean has_duration;
  float duration;
  CUserMessageCameraTransition__TransitionDataDriven *params_data_driven;
};
#define CUSER_MESSAGE_CAMERA_TRANSITION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_camera_transition__descriptor) \
    , 0,0, 0,0, NULL }


struct  _CUserMsgParticleManager__ReleaseParticleIndex
{
  ProtobufCMessage base;
};
#define CUSER_MSG__PARTICLE_MANAGER__RELEASE_PARTICLE_INDEX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_msg__particle_manager__release_particle_index__descriptor) \
     }


struct  _CUserMsgParticleManager__CreateParticle
{
  ProtobufCMessage base;
  protobuf_c_boolean has_particle_name_index;
  uint64_t particle_name_index;
  protobuf_c_boolean has_attach_type;
  int32_t attach_type;
  protobuf_c_boolean has_entity_handle;
  int32_t entity_handle;
};
#define CUSER_MSG__PARTICLE_MANAGER__CREATE_PARTICLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_msg__particle_manager__create_particle__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _CUserMsgParticleManager__DestroyParticle
{
  ProtobufCMessage base;
  protobuf_c_boolean has_destroy_immediately;
  protobuf_c_boolean destroy_immediately;
};
#define CUSER_MSG__PARTICLE_MANAGER__DESTROY_PARTICLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_msg__particle_manager__destroy_particle__descriptor) \
    , 0,0 }


struct  _CUserMsgParticleManager__DestroyParticleInvolving
{
  ProtobufCMessage base;
  protobuf_c_boolean has_destroy_immediately;
  protobuf_c_boolean destroy_immediately;
  protobuf_c_boolean has_entity_handle;
  int32_t entity_handle;
};
#define CUSER_MSG__PARTICLE_MANAGER__DESTROY_PARTICLE_INVOLVING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_msg__particle_manager__destroy_particle_involving__descriptor) \
    , 0,0, 0,0 }


struct  _CUserMsgParticleManager__UpdateParticle
{
  ProtobufCMessage base;
  protobuf_c_boolean has_control_point;
  int32_t control_point;
  CMsgVector *position;
};
#define CUSER_MSG__PARTICLE_MANAGER__UPDATE_PARTICLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_msg__particle_manager__update_particle__descriptor) \
    , 0,0, NULL }


struct  _CUserMsgParticleManager__UpdateParticleFwd
{
  ProtobufCMessage base;
  protobuf_c_boolean has_control_point;
  int32_t control_point;
  CMsgVector *forward;
};
#define CUSER_MSG__PARTICLE_MANAGER__UPDATE_PARTICLE_FWD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_msg__particle_manager__update_particle_fwd__descriptor) \
    , 0,0, NULL }


struct  _CUserMsgParticleManager__UpdateParticleOrient
{
  ProtobufCMessage base;
  protobuf_c_boolean has_control_point;
  int32_t control_point;
  CMsgVector *forward;
  CMsgVector *right;
  CMsgVector *up;
};
#define CUSER_MSG__PARTICLE_MANAGER__UPDATE_PARTICLE_ORIENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_msg__particle_manager__update_particle_orient__descriptor) \
    , 0,0, NULL, NULL, NULL }


struct  _CUserMsgParticleManager__UpdateParticleFallback
{
  ProtobufCMessage base;
  protobuf_c_boolean has_control_point;
  int32_t control_point;
  CMsgVector *position;
};
#define CUSER_MSG__PARTICLE_MANAGER__UPDATE_PARTICLE_FALLBACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_msg__particle_manager__update_particle_fallback__descriptor) \
    , 0,0, NULL }


struct  _CUserMsgParticleManager__UpdateParticleOffset
{
  ProtobufCMessage base;
  protobuf_c_boolean has_control_point;
  int32_t control_point;
  CMsgVector *origin_offset;
};
#define CUSER_MSG__PARTICLE_MANAGER__UPDATE_PARTICLE_OFFSET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_msg__particle_manager__update_particle_offset__descriptor) \
    , 0,0, NULL }


struct  _CUserMsgParticleManager__UpdateParticleEnt
{
  ProtobufCMessage base;
  protobuf_c_boolean has_control_point;
  int32_t control_point;
  protobuf_c_boolean has_entity_handle;
  int32_t entity_handle;
  protobuf_c_boolean has_attach_type;
  int32_t attach_type;
  protobuf_c_boolean has_attachment;
  int32_t attachment;
  CMsgVector *fallback_position;
  protobuf_c_boolean has_include_wearables;
  protobuf_c_boolean include_wearables;
};
#define CUSER_MSG__PARTICLE_MANAGER__UPDATE_PARTICLE_ENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_msg__particle_manager__update_particle_ent__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, NULL, 0,0 }


struct  _CUserMsgParticleManager__UpdateParticleSetFrozen
{
  ProtobufCMessage base;
  protobuf_c_boolean has_set_frozen;
  protobuf_c_boolean set_frozen;
};
#define CUSER_MSG__PARTICLE_MANAGER__UPDATE_PARTICLE_SET_FROZEN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_msg__particle_manager__update_particle_set_frozen__descriptor) \
    , 0,0 }


struct  _CUserMsgParticleManager__UpdateParticleShouldDraw
{
  ProtobufCMessage base;
  protobuf_c_boolean has_should_draw;
  protobuf_c_boolean should_draw;
};
#define CUSER_MSG__PARTICLE_MANAGER__UPDATE_PARTICLE_SHOULD_DRAW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_msg__particle_manager__update_particle_should_draw__descriptor) \
    , 0,0 }


struct  _CUserMsgParticleManager__ChangeControlPointAttachment
{
  ProtobufCMessage base;
  protobuf_c_boolean has_attachment_old;
  int32_t attachment_old;
  protobuf_c_boolean has_attachment_new;
  int32_t attachment_new;
  protobuf_c_boolean has_entity_handle;
  int32_t entity_handle;
};
#define CUSER_MSG__PARTICLE_MANAGER__CHANGE_CONTROL_POINT_ATTACHMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_msg__particle_manager__change_control_point_attachment__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _CUserMsgParticleManager
{
  ProtobufCMessage base;
  PARTICLEMESSAGE type;
  uint32_t index;
  CUserMsgParticleManager__ReleaseParticleIndex *release_particle_index;
  CUserMsgParticleManager__CreateParticle *create_particle;
  CUserMsgParticleManager__DestroyParticle *destroy_particle;
  CUserMsgParticleManager__DestroyParticleInvolving *destroy_particle_involving;
  CUserMsgParticleManager__UpdateParticle *update_particle;
  CUserMsgParticleManager__UpdateParticleFwd *update_particle_fwd;
  CUserMsgParticleManager__UpdateParticleOrient *update_particle_orient;
  CUserMsgParticleManager__UpdateParticleFallback *update_particle_fallback;
  CUserMsgParticleManager__UpdateParticleOffset *update_particle_offset;
  CUserMsgParticleManager__UpdateParticleEnt *update_particle_ent;
  CUserMsgParticleManager__UpdateParticleShouldDraw *update_particle_should_draw;
  CUserMsgParticleManager__UpdateParticleSetFrozen *update_particle_set_frozen;
  CUserMsgParticleManager__ChangeControlPointAttachment *change_control_point_attachment;
};
#define CUSER_MSG__PARTICLE_MANAGER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_msg__particle_manager__descriptor) \
    , PARTICLE__MESSAGE__GAME_PARTICLE_MANAGER_EVENT_CREATE, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


struct  _CUserMsgHudError
{
  ProtobufCMessage base;
  protobuf_c_boolean has_order_id;
  int32_t order_id;
};
#define CUSER_MSG__HUD_ERROR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_msg__hud_error__descriptor) \
    , 0,0 }


struct  _CUserMsgCustomGameEvent
{
  ProtobufCMessage base;
  char *event_name;
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
};
#define CUSER_MSG__CUSTOM_GAME_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_msg__custom_game_event__descriptor) \
    , NULL, 0,{0,NULL} }


struct  _CUserMessageHapticPulse
{
  ProtobufCMessage base;
  protobuf_c_boolean has_hand_id;
  int32_t hand_id;
  protobuf_c_boolean has_pulse_type;
  EHapticPulseType pulse_type;
};
#define CUSER_MESSAGE_HAPTIC_PULSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuser_message_haptic_pulse__descriptor) \
    , 0,0, 0,EHAPTIC_PULSE_TYPE__VR_HAND_HAPTIC_PULSE_LIGHT }


/* CUserMessageAchievementEvent methods */
void   cuser_message_achievement_event__init
                     (CUserMessageAchievementEvent         *message);
size_t cuser_message_achievement_event__get_packed_size
                     (const CUserMessageAchievementEvent   *message);
size_t cuser_message_achievement_event__pack
                     (const CUserMessageAchievementEvent   *message,
                      uint8_t             *out);
size_t cuser_message_achievement_event__pack_to_buffer
                     (const CUserMessageAchievementEvent   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageAchievementEvent *
       cuser_message_achievement_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_achievement_event__free_unpacked
                     (CUserMessageAchievementEvent *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageCloseCaption methods */
void   cuser_message_close_caption__init
                     (CUserMessageCloseCaption         *message);
size_t cuser_message_close_caption__get_packed_size
                     (const CUserMessageCloseCaption   *message);
size_t cuser_message_close_caption__pack
                     (const CUserMessageCloseCaption   *message,
                      uint8_t             *out);
size_t cuser_message_close_caption__pack_to_buffer
                     (const CUserMessageCloseCaption   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageCloseCaption *
       cuser_message_close_caption__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_close_caption__free_unpacked
                     (CUserMessageCloseCaption *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageCloseCaptionDirect methods */
void   cuser_message_close_caption_direct__init
                     (CUserMessageCloseCaptionDirect         *message);
size_t cuser_message_close_caption_direct__get_packed_size
                     (const CUserMessageCloseCaptionDirect   *message);
size_t cuser_message_close_caption_direct__pack
                     (const CUserMessageCloseCaptionDirect   *message,
                      uint8_t             *out);
size_t cuser_message_close_caption_direct__pack_to_buffer
                     (const CUserMessageCloseCaptionDirect   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageCloseCaptionDirect *
       cuser_message_close_caption_direct__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_close_caption_direct__free_unpacked
                     (CUserMessageCloseCaptionDirect *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageCloseCaptionPlaceholder methods */
void   cuser_message_close_caption_placeholder__init
                     (CUserMessageCloseCaptionPlaceholder         *message);
size_t cuser_message_close_caption_placeholder__get_packed_size
                     (const CUserMessageCloseCaptionPlaceholder   *message);
size_t cuser_message_close_caption_placeholder__pack
                     (const CUserMessageCloseCaptionPlaceholder   *message,
                      uint8_t             *out);
size_t cuser_message_close_caption_placeholder__pack_to_buffer
                     (const CUserMessageCloseCaptionPlaceholder   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageCloseCaptionPlaceholder *
       cuser_message_close_caption_placeholder__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_close_caption_placeholder__free_unpacked
                     (CUserMessageCloseCaptionPlaceholder *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageCurrentTimescale methods */
void   cuser_message_current_timescale__init
                     (CUserMessageCurrentTimescale         *message);
size_t cuser_message_current_timescale__get_packed_size
                     (const CUserMessageCurrentTimescale   *message);
size_t cuser_message_current_timescale__pack
                     (const CUserMessageCurrentTimescale   *message,
                      uint8_t             *out);
size_t cuser_message_current_timescale__pack_to_buffer
                     (const CUserMessageCurrentTimescale   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageCurrentTimescale *
       cuser_message_current_timescale__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_current_timescale__free_unpacked
                     (CUserMessageCurrentTimescale *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageDesiredTimescale methods */
void   cuser_message_desired_timescale__init
                     (CUserMessageDesiredTimescale         *message);
size_t cuser_message_desired_timescale__get_packed_size
                     (const CUserMessageDesiredTimescale   *message);
size_t cuser_message_desired_timescale__pack
                     (const CUserMessageDesiredTimescale   *message,
                      uint8_t             *out);
size_t cuser_message_desired_timescale__pack_to_buffer
                     (const CUserMessageDesiredTimescale   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageDesiredTimescale *
       cuser_message_desired_timescale__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_desired_timescale__free_unpacked
                     (CUserMessageDesiredTimescale *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageFade methods */
void   cuser_message_fade__init
                     (CUserMessageFade         *message);
size_t cuser_message_fade__get_packed_size
                     (const CUserMessageFade   *message);
size_t cuser_message_fade__pack
                     (const CUserMessageFade   *message,
                      uint8_t             *out);
size_t cuser_message_fade__pack_to_buffer
                     (const CUserMessageFade   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageFade *
       cuser_message_fade__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_fade__free_unpacked
                     (CUserMessageFade *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageShake methods */
void   cuser_message_shake__init
                     (CUserMessageShake         *message);
size_t cuser_message_shake__get_packed_size
                     (const CUserMessageShake   *message);
size_t cuser_message_shake__pack
                     (const CUserMessageShake   *message,
                      uint8_t             *out);
size_t cuser_message_shake__pack_to_buffer
                     (const CUserMessageShake   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageShake *
       cuser_message_shake__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_shake__free_unpacked
                     (CUserMessageShake *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageShakeDir methods */
void   cuser_message_shake_dir__init
                     (CUserMessageShakeDir         *message);
size_t cuser_message_shake_dir__get_packed_size
                     (const CUserMessageShakeDir   *message);
size_t cuser_message_shake_dir__pack
                     (const CUserMessageShakeDir   *message,
                      uint8_t             *out);
size_t cuser_message_shake_dir__pack_to_buffer
                     (const CUserMessageShakeDir   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageShakeDir *
       cuser_message_shake_dir__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_shake_dir__free_unpacked
                     (CUserMessageShakeDir *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageScreenTilt methods */
void   cuser_message_screen_tilt__init
                     (CUserMessageScreenTilt         *message);
size_t cuser_message_screen_tilt__get_packed_size
                     (const CUserMessageScreenTilt   *message);
size_t cuser_message_screen_tilt__pack
                     (const CUserMessageScreenTilt   *message,
                      uint8_t             *out);
size_t cuser_message_screen_tilt__pack_to_buffer
                     (const CUserMessageScreenTilt   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageScreenTilt *
       cuser_message_screen_tilt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_screen_tilt__free_unpacked
                     (CUserMessageScreenTilt *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageSayText methods */
void   cuser_message_say_text__init
                     (CUserMessageSayText         *message);
size_t cuser_message_say_text__get_packed_size
                     (const CUserMessageSayText   *message);
size_t cuser_message_say_text__pack
                     (const CUserMessageSayText   *message,
                      uint8_t             *out);
size_t cuser_message_say_text__pack_to_buffer
                     (const CUserMessageSayText   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageSayText *
       cuser_message_say_text__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_say_text__free_unpacked
                     (CUserMessageSayText *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageSayText2 methods */
void   cuser_message_say_text2__init
                     (CUserMessageSayText2         *message);
size_t cuser_message_say_text2__get_packed_size
                     (const CUserMessageSayText2   *message);
size_t cuser_message_say_text2__pack
                     (const CUserMessageSayText2   *message,
                      uint8_t             *out);
size_t cuser_message_say_text2__pack_to_buffer
                     (const CUserMessageSayText2   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageSayText2 *
       cuser_message_say_text2__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_say_text2__free_unpacked
                     (CUserMessageSayText2 *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageHudMsg methods */
void   cuser_message_hud_msg__init
                     (CUserMessageHudMsg         *message);
size_t cuser_message_hud_msg__get_packed_size
                     (const CUserMessageHudMsg   *message);
size_t cuser_message_hud_msg__pack
                     (const CUserMessageHudMsg   *message,
                      uint8_t             *out);
size_t cuser_message_hud_msg__pack_to_buffer
                     (const CUserMessageHudMsg   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageHudMsg *
       cuser_message_hud_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_hud_msg__free_unpacked
                     (CUserMessageHudMsg *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageHudText methods */
void   cuser_message_hud_text__init
                     (CUserMessageHudText         *message);
size_t cuser_message_hud_text__get_packed_size
                     (const CUserMessageHudText   *message);
size_t cuser_message_hud_text__pack
                     (const CUserMessageHudText   *message,
                      uint8_t             *out);
size_t cuser_message_hud_text__pack_to_buffer
                     (const CUserMessageHudText   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageHudText *
       cuser_message_hud_text__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_hud_text__free_unpacked
                     (CUserMessageHudText *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageTextMsg methods */
void   cuser_message_text_msg__init
                     (CUserMessageTextMsg         *message);
size_t cuser_message_text_msg__get_packed_size
                     (const CUserMessageTextMsg   *message);
size_t cuser_message_text_msg__pack
                     (const CUserMessageTextMsg   *message,
                      uint8_t             *out);
size_t cuser_message_text_msg__pack_to_buffer
                     (const CUserMessageTextMsg   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageTextMsg *
       cuser_message_text_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_text_msg__free_unpacked
                     (CUserMessageTextMsg *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageGameTitle methods */
void   cuser_message_game_title__init
                     (CUserMessageGameTitle         *message);
size_t cuser_message_game_title__get_packed_size
                     (const CUserMessageGameTitle   *message);
size_t cuser_message_game_title__pack
                     (const CUserMessageGameTitle   *message,
                      uint8_t             *out);
size_t cuser_message_game_title__pack_to_buffer
                     (const CUserMessageGameTitle   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageGameTitle *
       cuser_message_game_title__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_game_title__free_unpacked
                     (CUserMessageGameTitle *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageResetHUD methods */
void   cuser_message_reset_hud__init
                     (CUserMessageResetHUD         *message);
size_t cuser_message_reset_hud__get_packed_size
                     (const CUserMessageResetHUD   *message);
size_t cuser_message_reset_hud__pack
                     (const CUserMessageResetHUD   *message,
                      uint8_t             *out);
size_t cuser_message_reset_hud__pack_to_buffer
                     (const CUserMessageResetHUD   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageResetHUD *
       cuser_message_reset_hud__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_reset_hud__free_unpacked
                     (CUserMessageResetHUD *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageSendAudio methods */
void   cuser_message_send_audio__init
                     (CUserMessageSendAudio         *message);
size_t cuser_message_send_audio__get_packed_size
                     (const CUserMessageSendAudio   *message);
size_t cuser_message_send_audio__pack
                     (const CUserMessageSendAudio   *message,
                      uint8_t             *out);
size_t cuser_message_send_audio__pack_to_buffer
                     (const CUserMessageSendAudio   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageSendAudio *
       cuser_message_send_audio__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_send_audio__free_unpacked
                     (CUserMessageSendAudio *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageAudioParameter methods */
void   cuser_message_audio_parameter__init
                     (CUserMessageAudioParameter         *message);
size_t cuser_message_audio_parameter__get_packed_size
                     (const CUserMessageAudioParameter   *message);
size_t cuser_message_audio_parameter__pack
                     (const CUserMessageAudioParameter   *message,
                      uint8_t             *out);
size_t cuser_message_audio_parameter__pack_to_buffer
                     (const CUserMessageAudioParameter   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageAudioParameter *
       cuser_message_audio_parameter__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_audio_parameter__free_unpacked
                     (CUserMessageAudioParameter *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageVoiceMask methods */
void   cuser_message_voice_mask__init
                     (CUserMessageVoiceMask         *message);
size_t cuser_message_voice_mask__get_packed_size
                     (const CUserMessageVoiceMask   *message);
size_t cuser_message_voice_mask__pack
                     (const CUserMessageVoiceMask   *message,
                      uint8_t             *out);
size_t cuser_message_voice_mask__pack_to_buffer
                     (const CUserMessageVoiceMask   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageVoiceMask *
       cuser_message_voice_mask__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_voice_mask__free_unpacked
                     (CUserMessageVoiceMask *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageRequestState methods */
void   cuser_message_request_state__init
                     (CUserMessageRequestState         *message);
size_t cuser_message_request_state__get_packed_size
                     (const CUserMessageRequestState   *message);
size_t cuser_message_request_state__pack
                     (const CUserMessageRequestState   *message,
                      uint8_t             *out);
size_t cuser_message_request_state__pack_to_buffer
                     (const CUserMessageRequestState   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageRequestState *
       cuser_message_request_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_request_state__free_unpacked
                     (CUserMessageRequestState *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageHintText methods */
void   cuser_message_hint_text__init
                     (CUserMessageHintText         *message);
size_t cuser_message_hint_text__get_packed_size
                     (const CUserMessageHintText   *message);
size_t cuser_message_hint_text__pack
                     (const CUserMessageHintText   *message,
                      uint8_t             *out);
size_t cuser_message_hint_text__pack_to_buffer
                     (const CUserMessageHintText   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageHintText *
       cuser_message_hint_text__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_hint_text__free_unpacked
                     (CUserMessageHintText *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageKeyHintText methods */
void   cuser_message_key_hint_text__init
                     (CUserMessageKeyHintText         *message);
size_t cuser_message_key_hint_text__get_packed_size
                     (const CUserMessageKeyHintText   *message);
size_t cuser_message_key_hint_text__pack
                     (const CUserMessageKeyHintText   *message,
                      uint8_t             *out);
size_t cuser_message_key_hint_text__pack_to_buffer
                     (const CUserMessageKeyHintText   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageKeyHintText *
       cuser_message_key_hint_text__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_key_hint_text__free_unpacked
                     (CUserMessageKeyHintText *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageVoiceSubtitle methods */
void   cuser_message_voice_subtitle__init
                     (CUserMessageVoiceSubtitle         *message);
size_t cuser_message_voice_subtitle__get_packed_size
                     (const CUserMessageVoiceSubtitle   *message);
size_t cuser_message_voice_subtitle__pack
                     (const CUserMessageVoiceSubtitle   *message,
                      uint8_t             *out);
size_t cuser_message_voice_subtitle__pack_to_buffer
                     (const CUserMessageVoiceSubtitle   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageVoiceSubtitle *
       cuser_message_voice_subtitle__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_voice_subtitle__free_unpacked
                     (CUserMessageVoiceSubtitle *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageVGUIMenu__Keys methods */
void   cuser_message_vguimenu__keys__init
                     (CUserMessageVGUIMenu__Keys         *message);
/* CUserMessageVGUIMenu methods */
void   cuser_message_vguimenu__init
                     (CUserMessageVGUIMenu         *message);
size_t cuser_message_vguimenu__get_packed_size
                     (const CUserMessageVGUIMenu   *message);
size_t cuser_message_vguimenu__pack
                     (const CUserMessageVGUIMenu   *message,
                      uint8_t             *out);
size_t cuser_message_vguimenu__pack_to_buffer
                     (const CUserMessageVGUIMenu   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageVGUIMenu *
       cuser_message_vguimenu__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_vguimenu__free_unpacked
                     (CUserMessageVGUIMenu *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageRumble methods */
void   cuser_message_rumble__init
                     (CUserMessageRumble         *message);
size_t cuser_message_rumble__get_packed_size
                     (const CUserMessageRumble   *message);
size_t cuser_message_rumble__pack
                     (const CUserMessageRumble   *message,
                      uint8_t             *out);
size_t cuser_message_rumble__pack_to_buffer
                     (const CUserMessageRumble   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageRumble *
       cuser_message_rumble__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_rumble__free_unpacked
                     (CUserMessageRumble *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageTrain methods */
void   cuser_message_train__init
                     (CUserMessageTrain         *message);
size_t cuser_message_train__get_packed_size
                     (const CUserMessageTrain   *message);
size_t cuser_message_train__pack
                     (const CUserMessageTrain   *message,
                      uint8_t             *out);
size_t cuser_message_train__pack_to_buffer
                     (const CUserMessageTrain   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageTrain *
       cuser_message_train__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_train__free_unpacked
                     (CUserMessageTrain *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageSayTextChannel methods */
void   cuser_message_say_text_channel__init
                     (CUserMessageSayTextChannel         *message);
size_t cuser_message_say_text_channel__get_packed_size
                     (const CUserMessageSayTextChannel   *message);
size_t cuser_message_say_text_channel__pack
                     (const CUserMessageSayTextChannel   *message,
                      uint8_t             *out);
size_t cuser_message_say_text_channel__pack_to_buffer
                     (const CUserMessageSayTextChannel   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageSayTextChannel *
       cuser_message_say_text_channel__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_say_text_channel__free_unpacked
                     (CUserMessageSayTextChannel *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageColoredText methods */
void   cuser_message_colored_text__init
                     (CUserMessageColoredText         *message);
size_t cuser_message_colored_text__get_packed_size
                     (const CUserMessageColoredText   *message);
size_t cuser_message_colored_text__pack
                     (const CUserMessageColoredText   *message,
                      uint8_t             *out);
size_t cuser_message_colored_text__pack_to_buffer
                     (const CUserMessageColoredText   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageColoredText *
       cuser_message_colored_text__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_colored_text__free_unpacked
                     (CUserMessageColoredText *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageItemPickup methods */
void   cuser_message_item_pickup__init
                     (CUserMessageItemPickup         *message);
size_t cuser_message_item_pickup__get_packed_size
                     (const CUserMessageItemPickup   *message);
size_t cuser_message_item_pickup__pack
                     (const CUserMessageItemPickup   *message,
                      uint8_t             *out);
size_t cuser_message_item_pickup__pack_to_buffer
                     (const CUserMessageItemPickup   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageItemPickup *
       cuser_message_item_pickup__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_item_pickup__free_unpacked
                     (CUserMessageItemPickup *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageAmmoDenied methods */
void   cuser_message_ammo_denied__init
                     (CUserMessageAmmoDenied         *message);
size_t cuser_message_ammo_denied__get_packed_size
                     (const CUserMessageAmmoDenied   *message);
size_t cuser_message_ammo_denied__pack
                     (const CUserMessageAmmoDenied   *message,
                      uint8_t             *out);
size_t cuser_message_ammo_denied__pack_to_buffer
                     (const CUserMessageAmmoDenied   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageAmmoDenied *
       cuser_message_ammo_denied__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_ammo_denied__free_unpacked
                     (CUserMessageAmmoDenied *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageCrosshairAngle methods */
void   cuser_message_crosshair_angle__init
                     (CUserMessageCrosshairAngle         *message);
size_t cuser_message_crosshair_angle__get_packed_size
                     (const CUserMessageCrosshairAngle   *message);
size_t cuser_message_crosshair_angle__pack
                     (const CUserMessageCrosshairAngle   *message,
                      uint8_t             *out);
size_t cuser_message_crosshair_angle__pack_to_buffer
                     (const CUserMessageCrosshairAngle   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageCrosshairAngle *
       cuser_message_crosshair_angle__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_crosshair_angle__free_unpacked
                     (CUserMessageCrosshairAngle *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageShowMenu methods */
void   cuser_message_show_menu__init
                     (CUserMessageShowMenu         *message);
size_t cuser_message_show_menu__get_packed_size
                     (const CUserMessageShowMenu   *message);
size_t cuser_message_show_menu__pack
                     (const CUserMessageShowMenu   *message,
                      uint8_t             *out);
size_t cuser_message_show_menu__pack_to_buffer
                     (const CUserMessageShowMenu   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageShowMenu *
       cuser_message_show_menu__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_show_menu__free_unpacked
                     (CUserMessageShowMenu *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageCreditsMsg methods */
void   cuser_message_credits_msg__init
                     (CUserMessageCreditsMsg         *message);
size_t cuser_message_credits_msg__get_packed_size
                     (const CUserMessageCreditsMsg   *message);
size_t cuser_message_credits_msg__pack
                     (const CUserMessageCreditsMsg   *message,
                      uint8_t             *out);
size_t cuser_message_credits_msg__pack_to_buffer
                     (const CUserMessageCreditsMsg   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageCreditsMsg *
       cuser_message_credits_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_credits_msg__free_unpacked
                     (CUserMessageCreditsMsg *message,
                      ProtobufCAllocator *allocator);
/* CEntityMessagePlayJingle methods */
void   centity_message_play_jingle__init
                     (CEntityMessagePlayJingle         *message);
size_t centity_message_play_jingle__get_packed_size
                     (const CEntityMessagePlayJingle   *message);
size_t centity_message_play_jingle__pack
                     (const CEntityMessagePlayJingle   *message,
                      uint8_t             *out);
size_t centity_message_play_jingle__pack_to_buffer
                     (const CEntityMessagePlayJingle   *message,
                      ProtobufCBuffer     *buffer);
CEntityMessagePlayJingle *
       centity_message_play_jingle__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   centity_message_play_jingle__free_unpacked
                     (CEntityMessagePlayJingle *message,
                      ProtobufCAllocator *allocator);
/* CEntityMessageScreenOverlay methods */
void   centity_message_screen_overlay__init
                     (CEntityMessageScreenOverlay         *message);
size_t centity_message_screen_overlay__get_packed_size
                     (const CEntityMessageScreenOverlay   *message);
size_t centity_message_screen_overlay__pack
                     (const CEntityMessageScreenOverlay   *message,
                      uint8_t             *out);
size_t centity_message_screen_overlay__pack_to_buffer
                     (const CEntityMessageScreenOverlay   *message,
                      ProtobufCBuffer     *buffer);
CEntityMessageScreenOverlay *
       centity_message_screen_overlay__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   centity_message_screen_overlay__free_unpacked
                     (CEntityMessageScreenOverlay *message,
                      ProtobufCAllocator *allocator);
/* CEntityMessageRemoveAllDecals methods */
void   centity_message_remove_all_decals__init
                     (CEntityMessageRemoveAllDecals         *message);
size_t centity_message_remove_all_decals__get_packed_size
                     (const CEntityMessageRemoveAllDecals   *message);
size_t centity_message_remove_all_decals__pack
                     (const CEntityMessageRemoveAllDecals   *message,
                      uint8_t             *out);
size_t centity_message_remove_all_decals__pack_to_buffer
                     (const CEntityMessageRemoveAllDecals   *message,
                      ProtobufCBuffer     *buffer);
CEntityMessageRemoveAllDecals *
       centity_message_remove_all_decals__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   centity_message_remove_all_decals__free_unpacked
                     (CEntityMessageRemoveAllDecals *message,
                      ProtobufCAllocator *allocator);
/* CEntityMessagePropagateForce methods */
void   centity_message_propagate_force__init
                     (CEntityMessagePropagateForce         *message);
size_t centity_message_propagate_force__get_packed_size
                     (const CEntityMessagePropagateForce   *message);
size_t centity_message_propagate_force__pack
                     (const CEntityMessagePropagateForce   *message,
                      uint8_t             *out);
size_t centity_message_propagate_force__pack_to_buffer
                     (const CEntityMessagePropagateForce   *message,
                      ProtobufCBuffer     *buffer);
CEntityMessagePropagateForce *
       centity_message_propagate_force__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   centity_message_propagate_force__free_unpacked
                     (CEntityMessagePropagateForce *message,
                      ProtobufCAllocator *allocator);
/* CEntityMessageDoSpark methods */
void   centity_message_do_spark__init
                     (CEntityMessageDoSpark         *message);
size_t centity_message_do_spark__get_packed_size
                     (const CEntityMessageDoSpark   *message);
size_t centity_message_do_spark__pack
                     (const CEntityMessageDoSpark   *message,
                      uint8_t             *out);
size_t centity_message_do_spark__pack_to_buffer
                     (const CEntityMessageDoSpark   *message,
                      ProtobufCBuffer     *buffer);
CEntityMessageDoSpark *
       centity_message_do_spark__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   centity_message_do_spark__free_unpacked
                     (CEntityMessageDoSpark *message,
                      ProtobufCAllocator *allocator);
/* CEntityMessageFixAngle methods */
void   centity_message_fix_angle__init
                     (CEntityMessageFixAngle         *message);
size_t centity_message_fix_angle__get_packed_size
                     (const CEntityMessageFixAngle   *message);
size_t centity_message_fix_angle__pack
                     (const CEntityMessageFixAngle   *message,
                      uint8_t             *out);
size_t centity_message_fix_angle__pack_to_buffer
                     (const CEntityMessageFixAngle   *message,
                      ProtobufCBuffer     *buffer);
CEntityMessageFixAngle *
       centity_message_fix_angle__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   centity_message_fix_angle__free_unpacked
                     (CEntityMessageFixAngle *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageCameraTransition__TransitionDataDriven methods */
void   cuser_message_camera_transition__transition__data_driven__init
                     (CUserMessageCameraTransition__TransitionDataDriven         *message);
/* CUserMessageCameraTransition methods */
void   cuser_message_camera_transition__init
                     (CUserMessageCameraTransition         *message);
size_t cuser_message_camera_transition__get_packed_size
                     (const CUserMessageCameraTransition   *message);
size_t cuser_message_camera_transition__pack
                     (const CUserMessageCameraTransition   *message,
                      uint8_t             *out);
size_t cuser_message_camera_transition__pack_to_buffer
                     (const CUserMessageCameraTransition   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageCameraTransition *
       cuser_message_camera_transition__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_camera_transition__free_unpacked
                     (CUserMessageCameraTransition *message,
                      ProtobufCAllocator *allocator);
/* CUserMsgParticleManager__ReleaseParticleIndex methods */
void   cuser_msg__particle_manager__release_particle_index__init
                     (CUserMsgParticleManager__ReleaseParticleIndex         *message);
/* CUserMsgParticleManager__CreateParticle methods */
void   cuser_msg__particle_manager__create_particle__init
                     (CUserMsgParticleManager__CreateParticle         *message);
/* CUserMsgParticleManager__DestroyParticle methods */
void   cuser_msg__particle_manager__destroy_particle__init
                     (CUserMsgParticleManager__DestroyParticle         *message);
/* CUserMsgParticleManager__DestroyParticleInvolving methods */
void   cuser_msg__particle_manager__destroy_particle_involving__init
                     (CUserMsgParticleManager__DestroyParticleInvolving         *message);
/* CUserMsgParticleManager__UpdateParticle methods */
void   cuser_msg__particle_manager__update_particle__init
                     (CUserMsgParticleManager__UpdateParticle         *message);
/* CUserMsgParticleManager__UpdateParticleFwd methods */
void   cuser_msg__particle_manager__update_particle_fwd__init
                     (CUserMsgParticleManager__UpdateParticleFwd         *message);
/* CUserMsgParticleManager__UpdateParticleOrient methods */
void   cuser_msg__particle_manager__update_particle_orient__init
                     (CUserMsgParticleManager__UpdateParticleOrient         *message);
/* CUserMsgParticleManager__UpdateParticleFallback methods */
void   cuser_msg__particle_manager__update_particle_fallback__init
                     (CUserMsgParticleManager__UpdateParticleFallback         *message);
/* CUserMsgParticleManager__UpdateParticleOffset methods */
void   cuser_msg__particle_manager__update_particle_offset__init
                     (CUserMsgParticleManager__UpdateParticleOffset         *message);
/* CUserMsgParticleManager__UpdateParticleEnt methods */
void   cuser_msg__particle_manager__update_particle_ent__init
                     (CUserMsgParticleManager__UpdateParticleEnt         *message);
/* CUserMsgParticleManager__UpdateParticleSetFrozen methods */
void   cuser_msg__particle_manager__update_particle_set_frozen__init
                     (CUserMsgParticleManager__UpdateParticleSetFrozen         *message);
/* CUserMsgParticleManager__UpdateParticleShouldDraw methods */
void   cuser_msg__particle_manager__update_particle_should_draw__init
                     (CUserMsgParticleManager__UpdateParticleShouldDraw         *message);
/* CUserMsgParticleManager__ChangeControlPointAttachment methods */
void   cuser_msg__particle_manager__change_control_point_attachment__init
                     (CUserMsgParticleManager__ChangeControlPointAttachment         *message);
/* CUserMsgParticleManager methods */
void   cuser_msg__particle_manager__init
                     (CUserMsgParticleManager         *message);
size_t cuser_msg__particle_manager__get_packed_size
                     (const CUserMsgParticleManager   *message);
size_t cuser_msg__particle_manager__pack
                     (const CUserMsgParticleManager   *message,
                      uint8_t             *out);
size_t cuser_msg__particle_manager__pack_to_buffer
                     (const CUserMsgParticleManager   *message,
                      ProtobufCBuffer     *buffer);
CUserMsgParticleManager *
       cuser_msg__particle_manager__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_msg__particle_manager__free_unpacked
                     (CUserMsgParticleManager *message,
                      ProtobufCAllocator *allocator);
/* CUserMsgHudError methods */
void   cuser_msg__hud_error__init
                     (CUserMsgHudError         *message);
size_t cuser_msg__hud_error__get_packed_size
                     (const CUserMsgHudError   *message);
size_t cuser_msg__hud_error__pack
                     (const CUserMsgHudError   *message,
                      uint8_t             *out);
size_t cuser_msg__hud_error__pack_to_buffer
                     (const CUserMsgHudError   *message,
                      ProtobufCBuffer     *buffer);
CUserMsgHudError *
       cuser_msg__hud_error__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_msg__hud_error__free_unpacked
                     (CUserMsgHudError *message,
                      ProtobufCAllocator *allocator);
/* CUserMsgCustomGameEvent methods */
void   cuser_msg__custom_game_event__init
                     (CUserMsgCustomGameEvent         *message);
size_t cuser_msg__custom_game_event__get_packed_size
                     (const CUserMsgCustomGameEvent   *message);
size_t cuser_msg__custom_game_event__pack
                     (const CUserMsgCustomGameEvent   *message,
                      uint8_t             *out);
size_t cuser_msg__custom_game_event__pack_to_buffer
                     (const CUserMsgCustomGameEvent   *message,
                      ProtobufCBuffer     *buffer);
CUserMsgCustomGameEvent *
       cuser_msg__custom_game_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_msg__custom_game_event__free_unpacked
                     (CUserMsgCustomGameEvent *message,
                      ProtobufCAllocator *allocator);
/* CUserMessageHapticPulse methods */
void   cuser_message_haptic_pulse__init
                     (CUserMessageHapticPulse         *message);
size_t cuser_message_haptic_pulse__get_packed_size
                     (const CUserMessageHapticPulse   *message);
size_t cuser_message_haptic_pulse__pack
                     (const CUserMessageHapticPulse   *message,
                      uint8_t             *out);
size_t cuser_message_haptic_pulse__pack_to_buffer
                     (const CUserMessageHapticPulse   *message,
                      ProtobufCBuffer     *buffer);
CUserMessageHapticPulse *
       cuser_message_haptic_pulse__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuser_message_haptic_pulse__free_unpacked
                     (CUserMessageHapticPulse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CUserMessageAchievementEvent_Closure)
                 (const CUserMessageAchievementEvent *message,
                  void *closure_data);
typedef void (*CUserMessageCloseCaption_Closure)
                 (const CUserMessageCloseCaption *message,
                  void *closure_data);
typedef void (*CUserMessageCloseCaptionDirect_Closure)
                 (const CUserMessageCloseCaptionDirect *message,
                  void *closure_data);
typedef void (*CUserMessageCloseCaptionPlaceholder_Closure)
                 (const CUserMessageCloseCaptionPlaceholder *message,
                  void *closure_data);
typedef void (*CUserMessageCurrentTimescale_Closure)
                 (const CUserMessageCurrentTimescale *message,
                  void *closure_data);
typedef void (*CUserMessageDesiredTimescale_Closure)
                 (const CUserMessageDesiredTimescale *message,
                  void *closure_data);
typedef void (*CUserMessageFade_Closure)
                 (const CUserMessageFade *message,
                  void *closure_data);
typedef void (*CUserMessageShake_Closure)
                 (const CUserMessageShake *message,
                  void *closure_data);
typedef void (*CUserMessageShakeDir_Closure)
                 (const CUserMessageShakeDir *message,
                  void *closure_data);
typedef void (*CUserMessageScreenTilt_Closure)
                 (const CUserMessageScreenTilt *message,
                  void *closure_data);
typedef void (*CUserMessageSayText_Closure)
                 (const CUserMessageSayText *message,
                  void *closure_data);
typedef void (*CUserMessageSayText2_Closure)
                 (const CUserMessageSayText2 *message,
                  void *closure_data);
typedef void (*CUserMessageHudMsg_Closure)
                 (const CUserMessageHudMsg *message,
                  void *closure_data);
typedef void (*CUserMessageHudText_Closure)
                 (const CUserMessageHudText *message,
                  void *closure_data);
typedef void (*CUserMessageTextMsg_Closure)
                 (const CUserMessageTextMsg *message,
                  void *closure_data);
typedef void (*CUserMessageGameTitle_Closure)
                 (const CUserMessageGameTitle *message,
                  void *closure_data);
typedef void (*CUserMessageResetHUD_Closure)
                 (const CUserMessageResetHUD *message,
                  void *closure_data);
typedef void (*CUserMessageSendAudio_Closure)
                 (const CUserMessageSendAudio *message,
                  void *closure_data);
typedef void (*CUserMessageAudioParameter_Closure)
                 (const CUserMessageAudioParameter *message,
                  void *closure_data);
typedef void (*CUserMessageVoiceMask_Closure)
                 (const CUserMessageVoiceMask *message,
                  void *closure_data);
typedef void (*CUserMessageRequestState_Closure)
                 (const CUserMessageRequestState *message,
                  void *closure_data);
typedef void (*CUserMessageHintText_Closure)
                 (const CUserMessageHintText *message,
                  void *closure_data);
typedef void (*CUserMessageKeyHintText_Closure)
                 (const CUserMessageKeyHintText *message,
                  void *closure_data);
typedef void (*CUserMessageVoiceSubtitle_Closure)
                 (const CUserMessageVoiceSubtitle *message,
                  void *closure_data);
typedef void (*CUserMessageVGUIMenu__Keys_Closure)
                 (const CUserMessageVGUIMenu__Keys *message,
                  void *closure_data);
typedef void (*CUserMessageVGUIMenu_Closure)
                 (const CUserMessageVGUIMenu *message,
                  void *closure_data);
typedef void (*CUserMessageRumble_Closure)
                 (const CUserMessageRumble *message,
                  void *closure_data);
typedef void (*CUserMessageTrain_Closure)
                 (const CUserMessageTrain *message,
                  void *closure_data);
typedef void (*CUserMessageSayTextChannel_Closure)
                 (const CUserMessageSayTextChannel *message,
                  void *closure_data);
typedef void (*CUserMessageColoredText_Closure)
                 (const CUserMessageColoredText *message,
                  void *closure_data);
typedef void (*CUserMessageItemPickup_Closure)
                 (const CUserMessageItemPickup *message,
                  void *closure_data);
typedef void (*CUserMessageAmmoDenied_Closure)
                 (const CUserMessageAmmoDenied *message,
                  void *closure_data);
typedef void (*CUserMessageCrosshairAngle_Closure)
                 (const CUserMessageCrosshairAngle *message,
                  void *closure_data);
typedef void (*CUserMessageShowMenu_Closure)
                 (const CUserMessageShowMenu *message,
                  void *closure_data);
typedef void (*CUserMessageCreditsMsg_Closure)
                 (const CUserMessageCreditsMsg *message,
                  void *closure_data);
typedef void (*CEntityMessagePlayJingle_Closure)
                 (const CEntityMessagePlayJingle *message,
                  void *closure_data);
typedef void (*CEntityMessageScreenOverlay_Closure)
                 (const CEntityMessageScreenOverlay *message,
                  void *closure_data);
typedef void (*CEntityMessageRemoveAllDecals_Closure)
                 (const CEntityMessageRemoveAllDecals *message,
                  void *closure_data);
typedef void (*CEntityMessagePropagateForce_Closure)
                 (const CEntityMessagePropagateForce *message,
                  void *closure_data);
typedef void (*CEntityMessageDoSpark_Closure)
                 (const CEntityMessageDoSpark *message,
                  void *closure_data);
typedef void (*CEntityMessageFixAngle_Closure)
                 (const CEntityMessageFixAngle *message,
                  void *closure_data);
typedef void (*CUserMessageCameraTransition__TransitionDataDriven_Closure)
                 (const CUserMessageCameraTransition__TransitionDataDriven *message,
                  void *closure_data);
typedef void (*CUserMessageCameraTransition_Closure)
                 (const CUserMessageCameraTransition *message,
                  void *closure_data);
typedef void (*CUserMsgParticleManager__ReleaseParticleIndex_Closure)
                 (const CUserMsgParticleManager__ReleaseParticleIndex *message,
                  void *closure_data);
typedef void (*CUserMsgParticleManager__CreateParticle_Closure)
                 (const CUserMsgParticleManager__CreateParticle *message,
                  void *closure_data);
typedef void (*CUserMsgParticleManager__DestroyParticle_Closure)
                 (const CUserMsgParticleManager__DestroyParticle *message,
                  void *closure_data);
typedef void (*CUserMsgParticleManager__DestroyParticleInvolving_Closure)
                 (const CUserMsgParticleManager__DestroyParticleInvolving *message,
                  void *closure_data);
typedef void (*CUserMsgParticleManager__UpdateParticle_Closure)
                 (const CUserMsgParticleManager__UpdateParticle *message,
                  void *closure_data);
typedef void (*CUserMsgParticleManager__UpdateParticleFwd_Closure)
                 (const CUserMsgParticleManager__UpdateParticleFwd *message,
                  void *closure_data);
typedef void (*CUserMsgParticleManager__UpdateParticleOrient_Closure)
                 (const CUserMsgParticleManager__UpdateParticleOrient *message,
                  void *closure_data);
typedef void (*CUserMsgParticleManager__UpdateParticleFallback_Closure)
                 (const CUserMsgParticleManager__UpdateParticleFallback *message,
                  void *closure_data);
typedef void (*CUserMsgParticleManager__UpdateParticleOffset_Closure)
                 (const CUserMsgParticleManager__UpdateParticleOffset *message,
                  void *closure_data);
typedef void (*CUserMsgParticleManager__UpdateParticleEnt_Closure)
                 (const CUserMsgParticleManager__UpdateParticleEnt *message,
                  void *closure_data);
typedef void (*CUserMsgParticleManager__UpdateParticleSetFrozen_Closure)
                 (const CUserMsgParticleManager__UpdateParticleSetFrozen *message,
                  void *closure_data);
typedef void (*CUserMsgParticleManager__UpdateParticleShouldDraw_Closure)
                 (const CUserMsgParticleManager__UpdateParticleShouldDraw *message,
                  void *closure_data);
typedef void (*CUserMsgParticleManager__ChangeControlPointAttachment_Closure)
                 (const CUserMsgParticleManager__ChangeControlPointAttachment *message,
                  void *closure_data);
typedef void (*CUserMsgParticleManager_Closure)
                 (const CUserMsgParticleManager *message,
                  void *closure_data);
typedef void (*CUserMsgHudError_Closure)
                 (const CUserMsgHudError *message,
                  void *closure_data);
typedef void (*CUserMsgCustomGameEvent_Closure)
                 (const CUserMsgCustomGameEvent *message,
                  void *closure_data);
typedef void (*CUserMessageHapticPulse_Closure)
                 (const CUserMessageHapticPulse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    ebase_user_messages__descriptor;
extern const ProtobufCEnumDescriptor    ebase_entity_messages__descriptor;
extern const ProtobufCEnumDescriptor    e_roll_type__descriptor;
extern const ProtobufCEnumDescriptor    particle__message__descriptor;
extern const ProtobufCEnumDescriptor    ehaptic_pulse_type__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_achievement_event__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_close_caption__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_close_caption_direct__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_close_caption_placeholder__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_current_timescale__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_desired_timescale__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_fade__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_shake__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_shake_dir__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_screen_tilt__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_say_text__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_say_text2__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_hud_msg__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_hud_text__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_text_msg__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_game_title__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_reset_hud__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_send_audio__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_audio_parameter__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_voice_mask__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_request_state__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_hint_text__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_key_hint_text__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_voice_subtitle__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_vguimenu__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_vguimenu__keys__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_rumble__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_train__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_say_text_channel__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_colored_text__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_item_pickup__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_ammo_denied__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_crosshair_angle__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_show_menu__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_credits_msg__descriptor;
extern const ProtobufCMessageDescriptor centity_message_play_jingle__descriptor;
extern const ProtobufCMessageDescriptor centity_message_screen_overlay__descriptor;
extern const ProtobufCMessageDescriptor centity_message_remove_all_decals__descriptor;
extern const ProtobufCMessageDescriptor centity_message_propagate_force__descriptor;
extern const ProtobufCMessageDescriptor centity_message_do_spark__descriptor;
extern const ProtobufCMessageDescriptor centity_message_fix_angle__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_camera_transition__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_camera_transition__transition__data_driven__descriptor;
extern const ProtobufCMessageDescriptor cuser_msg__particle_manager__descriptor;
extern const ProtobufCMessageDescriptor cuser_msg__particle_manager__release_particle_index__descriptor;
extern const ProtobufCMessageDescriptor cuser_msg__particle_manager__create_particle__descriptor;
extern const ProtobufCMessageDescriptor cuser_msg__particle_manager__destroy_particle__descriptor;
extern const ProtobufCMessageDescriptor cuser_msg__particle_manager__destroy_particle_involving__descriptor;
extern const ProtobufCMessageDescriptor cuser_msg__particle_manager__update_particle__descriptor;
extern const ProtobufCMessageDescriptor cuser_msg__particle_manager__update_particle_fwd__descriptor;
extern const ProtobufCMessageDescriptor cuser_msg__particle_manager__update_particle_orient__descriptor;
extern const ProtobufCMessageDescriptor cuser_msg__particle_manager__update_particle_fallback__descriptor;
extern const ProtobufCMessageDescriptor cuser_msg__particle_manager__update_particle_offset__descriptor;
extern const ProtobufCMessageDescriptor cuser_msg__particle_manager__update_particle_ent__descriptor;
extern const ProtobufCMessageDescriptor cuser_msg__particle_manager__update_particle_set_frozen__descriptor;
extern const ProtobufCMessageDescriptor cuser_msg__particle_manager__update_particle_should_draw__descriptor;
extern const ProtobufCMessageDescriptor cuser_msg__particle_manager__change_control_point_attachment__descriptor;
extern const ProtobufCMessageDescriptor cuser_msg__hud_error__descriptor;
extern const ProtobufCMessageDescriptor cuser_msg__custom_game_event__descriptor;
extern const ProtobufCMessageDescriptor cuser_message_haptic_pulse__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_usermessages_2eproto__INCLUDED */
