/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: dota_gcmessages_common.proto */

#ifndef PROTOBUF_C_dota_5fgcmessages_5fcommon_2eproto__INCLUDED
#define PROTOBUF_C_dota_5fgcmessages_5fcommon_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "steammessages.pb-c.h"
#include "gcsdk_gcmessages.pb-c.h"
#include "dota_shared_enums.pb-c.h"

typedef struct _CSODOTAGameAccountClient CSODOTAGameAccountClient;
typedef struct _CMsgLobbyEventPoints CMsgLobbyEventPoints;
typedef struct _CMsgLobbyEventPoints__AccountPoints CMsgLobbyEventPoints__AccountPoints;
typedef struct _CMsgLobbyBattleCupVictory CMsgLobbyBattleCupVictory;
typedef struct _CMsgLobbyBattleCupVictory__BattleCupVictory CMsgLobbyBattleCupVictory__BattleCupVictory;
typedef struct _CMsgDOTABroadcastNotification CMsgDOTABroadcastNotification;
typedef struct _CProtoItemHeroStatue CProtoItemHeroStatue;
typedef struct _CProtoItemTeamShowcase CProtoItemTeamShowcase;
typedef struct _CMatchPlayerAbilityUpgrade CMatchPlayerAbilityUpgrade;
typedef struct _CMatchAdditionalUnitInventory CMatchAdditionalUnitInventory;
typedef struct _CMatchHeroSelectEvent CMatchHeroSelectEvent;
typedef struct _CMsgDOTAProcessFantasyScheduledEvent CMsgDOTAProcessFantasyScheduledEvent;
typedef struct _CMsgDOTAHasItemQuery CMsgDOTAHasItemQuery;
typedef struct _CMsgDOTAHasItemResponse CMsgDOTAHasItemResponse;
typedef struct _CMsgDOTAHasItemDefsQuery CMsgDOTAHasItemDefsQuery;
typedef struct _CMsgDOTAHasItemDefsResponse CMsgDOTAHasItemDefsResponse;
typedef struct _CMsgGCToGCFantasySetMatchLeague CMsgGCToGCFantasySetMatchLeague;
typedef struct _CSODOTAMapLocationState CSODOTAMapLocationState;
typedef struct _CMsgLeagueAdminList CMsgLeagueAdminList;
typedef struct _CCompendiumTimestampedData CCompendiumTimestampedData;
typedef struct _CCompendiumGameTimeline CCompendiumGameTimeline;
typedef struct _CCompendiumGameList CCompendiumGameList;
typedef struct _CAdditionalEquipSlot CAdditionalEquipSlot;
typedef struct _CMsgDOTACombatLogEntry CMsgDOTACombatLogEntry;
typedef struct _CMsgDOTAProfileCard CMsgDOTAProfileCard;
typedef struct _CMsgDOTAProfileCard__Slot CMsgDOTAProfileCard__Slot;
typedef struct _CMsgDOTAProfileCard__Slot__Trophy CMsgDOTAProfileCard__Slot__Trophy;
typedef struct _CMsgDOTAProfileCard__Slot__Stat CMsgDOTAProfileCard__Slot__Stat;
typedef struct _CMsgDOTAProfileCard__Slot__Item CMsgDOTAProfileCard__Slot__Item;
typedef struct _CMsgDOTAProfileCard__Slot__Hero CMsgDOTAProfileCard__Slot__Hero;
typedef struct _CMsgDOTAProfileCard__Slot__Emoticon CMsgDOTAProfileCard__Slot__Emoticon;
typedef struct _CSODOTAPlayerChallenge CSODOTAPlayerChallenge;
typedef struct _CMsgClientToGCRerollPlayerChallenge CMsgClientToGCRerollPlayerChallenge;
typedef struct _CMsgGCRerollPlayerChallengeResponse CMsgGCRerollPlayerChallengeResponse;
typedef struct _CMsgGCTopCustomGamesList CMsgGCTopCustomGamesList;
typedef struct _CMsgDOTARealtimeGameStats CMsgDOTARealtimeGameStats;
typedef struct _CMsgDOTARealtimeGameStats__TeamDetails CMsgDOTARealtimeGameStats__TeamDetails;
typedef struct _CMsgDOTARealtimeGameStats__ItemDetails CMsgDOTARealtimeGameStats__ItemDetails;
typedef struct _CMsgDOTARealtimeGameStats__AbilityDetails CMsgDOTARealtimeGameStats__AbilityDetails;
typedef struct _CMsgDOTARealtimeGameStats__HeroToHeroStats CMsgDOTARealtimeGameStats__HeroToHeroStats;
typedef struct _CMsgDOTARealtimeGameStats__AbilityList CMsgDOTARealtimeGameStats__AbilityList;
typedef struct _CMsgDOTARealtimeGameStats__PlayerDetails CMsgDOTARealtimeGameStats__PlayerDetails;
typedef struct _CMsgDOTARealtimeGameStats__BuildingDetails CMsgDOTARealtimeGameStats__BuildingDetails;
typedef struct _CMsgDOTARealtimeGameStats__KillDetails CMsgDOTARealtimeGameStats__KillDetails;
typedef struct _CMsgDOTARealtimeGameStats__BroadcasterDetails CMsgDOTARealtimeGameStats__BroadcasterDetails;
typedef struct _CMsgDOTARealtimeGameStats__PickBanDetails CMsgDOTARealtimeGameStats__PickBanDetails;
typedef struct _CMsgDOTARealtimeGameStats__MatchDetails CMsgDOTARealtimeGameStats__MatchDetails;
typedef struct _CMsgDOTARealtimeGameStats__GraphData CMsgDOTARealtimeGameStats__GraphData;
typedef struct _CMsgDOTARealtimeGameStats__GraphData__LocationStats CMsgDOTARealtimeGameStats__GraphData__LocationStats;
typedef struct _CMsgDOTARealtimeGameStats__GraphData__TeamLocationStats CMsgDOTARealtimeGameStats__GraphData__TeamLocationStats;
typedef struct _CMsgDOTARealtimeGameStatsTerse CMsgDOTARealtimeGameStatsTerse;
typedef struct _CMsgDOTARealtimeGameStatsTerse__TeamDetails CMsgDOTARealtimeGameStatsTerse__TeamDetails;
typedef struct _CMsgDOTARealtimeGameStatsTerse__PlayerDetails CMsgDOTARealtimeGameStatsTerse__PlayerDetails;
typedef struct _CMsgDOTARealtimeGameStatsTerse__BuildingDetails CMsgDOTARealtimeGameStatsTerse__BuildingDetails;
typedef struct _CMsgDOTARealtimeGameStatsTerse__MatchDetails CMsgDOTARealtimeGameStatsTerse__MatchDetails;
typedef struct _CMsgDOTARealtimeGameStatsTerse__GraphData CMsgDOTARealtimeGameStatsTerse__GraphData;
typedef struct _CMsgGCToClientMatchGroupsVersion CMsgGCToClientMatchGroupsVersion;
typedef struct _CMsgDOTASDOHeroStatsHistory CMsgDOTASDOHeroStatsHistory;
typedef struct _CMsgDOTASeasonRewards CMsgDOTASeasonRewards;
typedef struct _CMsgDOTASeasonRewards__Reward CMsgDOTASeasonRewards__Reward;
typedef struct _CMsgDOTASeasonAchievements CMsgDOTASeasonAchievements;
typedef struct _CMsgDOTASeasonAchievements__Achievement CMsgDOTASeasonAchievements__Achievement;
typedef struct _CMsgDOTASeasonPredictions CMsgDOTASeasonPredictions;
typedef struct _CMsgDOTASeasonPredictions__Choice CMsgDOTASeasonPredictions__Choice;
typedef struct _CMsgDOTASeasonPredictions__Answers CMsgDOTASeasonPredictions__Answers;
typedef struct _CMsgDOTASeasonPredictions__QueryKeyValues CMsgDOTASeasonPredictions__QueryKeyValues;
typedef struct _CMsgDOTASeasonPredictions__Prediction CMsgDOTASeasonPredictions__Prediction;
typedef struct _CMsgDOTASeasonPredictions__InGamePrediction CMsgDOTASeasonPredictions__InGamePrediction;
typedef struct _CMsgDOTAMatch CMsgDOTAMatch;
typedef struct _CMsgDOTAMatch__Player CMsgDOTAMatch__Player;
typedef struct _CMsgDOTAMatch__Player__CustomGameData CMsgDOTAMatch__Player__CustomGameData;
typedef struct _CMsgDOTAMatch__BroadcasterInfo CMsgDOTAMatch__BroadcasterInfo;
typedef struct _CMsgDOTAMatch__BroadcasterChannel CMsgDOTAMatch__BroadcasterChannel;
typedef struct _CMsgDOTAMatch__CustomGameData CMsgDOTAMatch__CustomGameData;
typedef struct _CMsgPlayerCard CMsgPlayerCard;
typedef struct _CMsgPlayerCard__StatModifier CMsgPlayerCard__StatModifier;


/* --- enums --- */

typedef enum _CMsgDOTAProfileCard__EStatID {
  CMSG_DOTAPROFILE_CARD__ESTAT_ID__k_eStat_SoloRank = 1,
  CMSG_DOTAPROFILE_CARD__ESTAT_ID__k_eStat_PartyRank = 2,
  CMSG_DOTAPROFILE_CARD__ESTAT_ID__k_eStat_Wins = 3,
  CMSG_DOTAPROFILE_CARD__ESTAT_ID__k_eStat_Commends = 4,
  CMSG_DOTAPROFILE_CARD__ESTAT_ID__k_eStat_GamesPlayed = 5,
  CMSG_DOTAPROFILE_CARD__ESTAT_ID__k_eStat_FirstMatchDate = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CMSG_DOTAPROFILE_CARD__ESTAT_ID)
} CMsgDOTAProfileCard__EStatID;
typedef enum _CSODOTAPlayerChallenge__EFlags {
  CSODOTAPLAYER_CHALLENGE__EFLAGS__eFlag_InstantRerollUncompleted = 1,
  CSODOTAPLAYER_CHALLENGE__EFLAGS__eFlag_QuestChallenge = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CSODOTAPLAYER_CHALLENGE__EFLAGS)
} CSODOTAPlayerChallenge__EFlags;
typedef enum _CMsgGCRerollPlayerChallengeResponse__EResult {
  CMSG_GCREROLL_PLAYER_CHALLENGE_RESPONSE__ERESULT__eResult_Success = 0,
  CMSG_GCREROLL_PLAYER_CHALLENGE_RESPONSE__ERESULT__eResult_Dropped = 1,
  CMSG_GCREROLL_PLAYER_CHALLENGE_RESPONSE__ERESULT__eResult_NotFound = 2,
  CMSG_GCREROLL_PLAYER_CHALLENGE_RESPONSE__ERESULT__eResult_CantReroll = 3,
  CMSG_GCREROLL_PLAYER_CHALLENGE_RESPONSE__ERESULT__eResult_ServerError = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CMSG_GCREROLL_PLAYER_CHALLENGE_RESPONSE__ERESULT)
} CMsgGCRerollPlayerChallengeResponse__EResult;
typedef enum _CMsgDOTARealtimeGameStats__GraphData__EStat {
  CMSG_DOTAREALTIME_GAME_STATS__GRAPH_DATA__E_STAT__CreepGoldEarned = 0,
  CMSG_DOTAREALTIME_GAME_STATS__GRAPH_DATA__E_STAT__KillGoldEarned = 1,
  CMSG_DOTAREALTIME_GAME_STATS__GRAPH_DATA__E_STAT__DeathAndBuybackGoldLost = 2,
  CMSG_DOTAREALTIME_GAME_STATS__GRAPH_DATA__E_STAT__XPEarned = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CMSG_DOTAREALTIME_GAME_STATS__GRAPH_DATA__E_STAT)
} CMsgDOTARealtimeGameStats__GraphData__EStat;
typedef enum _CMsgDOTARealtimeGameStats__GraphData__ELocation {
  CMSG_DOTAREALTIME_GAME_STATS__GRAPH_DATA__E_LOCATION__BotLane = 0,
  CMSG_DOTAREALTIME_GAME_STATS__GRAPH_DATA__E_LOCATION__MidLane = 1,
  CMSG_DOTAREALTIME_GAME_STATS__GRAPH_DATA__E_LOCATION__TopLane = 2,
  CMSG_DOTAREALTIME_GAME_STATS__GRAPH_DATA__E_LOCATION__Jungle = 3,
  CMSG_DOTAREALTIME_GAME_STATS__GRAPH_DATA__E_LOCATION__Ancients = 4,
  CMSG_DOTAREALTIME_GAME_STATS__GRAPH_DATA__E_LOCATION__Other = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CMSG_DOTAREALTIME_GAME_STATS__GRAPH_DATA__E_LOCATION)
} CMsgDOTARealtimeGameStats__GraphData__ELocation;
typedef enum _CMsgDOTASeasonRewards__ERewardType {
  CMSG_DOTASEASON_REWARDS__EREWARD_TYPE__EconItem = 0,
  CMSG_DOTASEASON_REWARDS__EREWARD_TYPE__MysteryWheel = 1,
  CMSG_DOTASEASON_REWARDS__EREWARD_TYPE__AbilityEffect = 2,
  CMSG_DOTASEASON_REWARDS__EREWARD_TYPE__Other = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CMSG_DOTASEASON_REWARDS__EREWARD_TYPE)
} CMsgDOTASeasonRewards__ERewardType;
typedef enum _CMsgDOTASeasonPredictions__EPredictionType {
  CMSG_DOTASEASON_PREDICTIONS__E_PREDICTION_TYPE__Generic = 0,
  CMSG_DOTASEASON_PREDICTIONS__E_PREDICTION_TYPE__Hero = 1,
  CMSG_DOTASEASON_PREDICTIONS__E_PREDICTION_TYPE__Team = 2,
  CMSG_DOTASEASON_PREDICTIONS__E_PREDICTION_TYPE__Player = 3,
  CMSG_DOTASEASON_PREDICTIONS__E_PREDICTION_TYPE__Special = 4,
  CMSG_DOTASEASON_PREDICTIONS__E_PREDICTION_TYPE__YesNo = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CMSG_DOTASEASON_PREDICTIONS__E_PREDICTION_TYPE)
} CMsgDOTASeasonPredictions__EPredictionType;
typedef enum _CMsgDOTASeasonPredictions__EAnswerType {
  CMSG_DOTASEASON_PREDICTIONS__E_ANSWER_TYPE__SingleInt = 0,
  CMSG_DOTASEASON_PREDICTIONS__E_ANSWER_TYPE__SingleFloat = 1,
  CMSG_DOTASEASON_PREDICTIONS__E_ANSWER_TYPE__MultipleInt = 2,
  CMSG_DOTASEASON_PREDICTIONS__E_ANSWER_TYPE__MultipleFloat = 3,
  CMSG_DOTASEASON_PREDICTIONS__E_ANSWER_TYPE__AnswerTeam = 4,
  CMSG_DOTASEASON_PREDICTIONS__E_ANSWER_TYPE__SingleTime = 5,
  CMSG_DOTASEASON_PREDICTIONS__E_ANSWER_TYPE__MultipleTime = 6,
  CMSG_DOTASEASON_PREDICTIONS__E_ANSWER_TYPE__NoAnswer = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CMSG_DOTASEASON_PREDICTIONS__E_ANSWER_TYPE)
} CMsgDOTASeasonPredictions__EAnswerType;
typedef enum _CMsgDOTASeasonPredictions__EResolutionTypeT {
  CMSG_DOTASEASON_PREDICTIONS__E_RESOLUTION_TYPE_T__InvalidQuery = 0,
  CMSG_DOTASEASON_PREDICTIONS__E_RESOLUTION_TYPE_T__FirstToPassQuery = 1,
  CMSG_DOTASEASON_PREDICTIONS__E_RESOLUTION_TYPE_T__LastToPassQuery = 2,
  CMSG_DOTASEASON_PREDICTIONS__E_RESOLUTION_TYPE_T__LastRemainingQuery = 3,
  CMSG_DOTASEASON_PREDICTIONS__E_RESOLUTION_TYPE_T__MaxToPassQuery = 4,
  CMSG_DOTASEASON_PREDICTIONS__E_RESOLUTION_TYPE_T__MinToPassQuery = 5,
  CMSG_DOTASEASON_PREDICTIONS__E_RESOLUTION_TYPE_T__SumQuery = 6,
  CMSG_DOTASEASON_PREDICTIONS__E_RESOLUTION_TYPE_T__MaxTeamSumToPassQuery = 7,
  CMSG_DOTASEASON_PREDICTIONS__E_RESOLUTION_TYPE_T__MinTeamSumToPassQuery = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CMSG_DOTASEASON_PREDICTIONS__E_RESOLUTION_TYPE_T)
} CMsgDOTASeasonPredictions__EResolutionTypeT;
typedef enum _CMsgDOTASeasonPredictions__ERandomSelectionGroupT {
  CMSG_DOTASEASON_PREDICTIONS__E_RANDOM_SELECTION_GROUP_T__EarlyGame = 0,
  CMSG_DOTASEASON_PREDICTIONS__E_RANDOM_SELECTION_GROUP_T__MidGame = 1,
  CMSG_DOTASEASON_PREDICTIONS__E_RANDOM_SELECTION_GROUP_T__LateGame = 2,
  CMSG_DOTASEASON_PREDICTIONS__E_RANDOM_SELECTION_GROUP_T__Count = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CMSG_DOTASEASON_PREDICTIONS__E_RANDOM_SELECTION_GROUP_T)
} CMsgDOTASeasonPredictions__ERandomSelectionGroupT;
typedef enum _CMsgDOTASeasonPredictions__ERawValueTypeT {
  CMSG_DOTASEASON_PREDICTIONS__E_RAW_VALUE_TYPE_T__Number = 0,
  CMSG_DOTASEASON_PREDICTIONS__E_RAW_VALUE_TYPE_T__Time = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CMSG_DOTASEASON_PREDICTIONS__E_RAW_VALUE_TYPE_T)
} CMsgDOTASeasonPredictions__ERawValueTypeT;
typedef enum _CMsgDOTAMatch__ReplayState {
  CMSG_DOTAMATCH__REPLAY_STATE__REPLAY_AVAILABLE = 0,
  CMSG_DOTAMATCH__REPLAY_STATE__REPLAY_NOT_RECORDED = 1,
  CMSG_DOTAMATCH__REPLAY_STATE__REPLAY_EXPIRED = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CMSG_DOTAMATCH__REPLAY_STATE)
} CMsgDOTAMatch__ReplayState;
typedef enum _ESpecialPingValue {
  ESPECIAL_PING_VALUE__k_ESpecialPingValue_NoData = 16382,
  ESPECIAL_PING_VALUE__k_ESpecialPingValue_Failed = 16383
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESPECIAL_PING_VALUE)
} ESpecialPingValue;
typedef enum _EDOTAGCSessionNeed {
  EDOTAGCSESSION_NEED__k_EDOTAGCSessionNeed_Unknown = 0,
  EDOTAGCSESSION_NEED__k_EDOTAGCSessionNeed_UserNoSessionNeeded = 100,
  EDOTAGCSESSION_NEED__k_EDOTAGCSessionNeed_UserInOnlineGame = 101,
  EDOTAGCSESSION_NEED__k_EDOTAGCSessionNeed_UserInLocalGame = 102,
  EDOTAGCSESSION_NEED__k_EDOTAGCSessionNeed_UserInUIWasConnected = 103,
  EDOTAGCSESSION_NEED__k_EDOTAGCSessionNeed_UserInUINeverConnected = 104,
  EDOTAGCSESSION_NEED__k_EDOTAGCSessionNeed_UserTutorials = 105,
  EDOTAGCSESSION_NEED__k_EDOTAGCSessionNeed_UserInUIWasConnectedIdle = 106,
  EDOTAGCSESSION_NEED__k_EDOTAGCSessionNeed_UserInUINeverConnectedIdle = 107,
  EDOTAGCSESSION_NEED__k_EDOTAGCSessionNeed_GameServerOnline = 200,
  EDOTAGCSESSION_NEED__k_EDOTAGCSessionNeed_GameServerLocal = 201,
  EDOTAGCSESSION_NEED__k_EDOTAGCSessionNeed_GameServerIdle = 202,
  EDOTAGCSESSION_NEED__k_EDOTAGCSessionNeed_GameServerRelay = 203,
  EDOTAGCSESSION_NEED__k_EDOTAGCSessionNeed_GameServerLocalUpload = 204
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EDOTAGCSESSION_NEED)
} EDOTAGCSessionNeed;
typedef enum _DOTATournamentEvents {
  DOTA__TOURNAMENT_EVENTS__TE_FIRST_BLOOD = 0,
  DOTA__TOURNAMENT_EVENTS__TE_GAME_END = 1,
  DOTA__TOURNAMENT_EVENTS__TE_MULTI_KILL = 2,
  DOTA__TOURNAMENT_EVENTS__TE_HERO_DENY = 3,
  DOTA__TOURNAMENT_EVENTS__TE_AEGIS_DENY = 4,
  DOTA__TOURNAMENT_EVENTS__TE_AEGIS_STOLEN = 5,
  DOTA__TOURNAMENT_EVENTS__TE_GODLIKE = 6,
  DOTA__TOURNAMENT_EVENTS__TE_COURIER_KILL = 7,
  DOTA__TOURNAMENT_EVENTS__TE_ECHOSLAM = 8,
  DOTA__TOURNAMENT_EVENTS__TE_RAPIER = 9,
  DOTA__TOURNAMENT_EVENTS__TE_EARLY_ROSHAN = 10,
  DOTA__TOURNAMENT_EVENTS__TE_BLACK_HOLE = 11
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DOTA__TOURNAMENT_EVENTS)
} DOTATournamentEvents;
typedef enum _DOTACOMBATLOGTYPES {
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_INVALID = -1,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_DAMAGE = 0,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_HEAL = 1,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_MODIFIER_ADD = 2,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_MODIFIER_REMOVE = 3,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_DEATH = 4,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_ABILITY = 5,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_ITEM = 6,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_LOCATION = 7,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_GOLD = 8,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_GAME_STATE = 9,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_XP = 10,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_PURCHASE = 11,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_BUYBACK = 12,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_ABILITY_TRIGGER = 13,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_PLAYERSTATS = 14,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_MULTIKILL = 15,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_KILLSTREAK = 16,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_TEAM_BUILDING_KILL = 17,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_FIRST_BLOOD = 18,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_MODIFIER_REFRESH = 19,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_NEUTRAL_CAMP_STACK = 20,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_PICKUP_RUNE = 21,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_REVEALED_INVISIBLE = 22,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_HERO_SAVED = 23,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_MANA_RESTORED = 24,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_HERO_LEVELUP = 25,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_BOTTLE_HEAL_ALLY = 26,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_ENDGAME_STATS = 27,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_INTERRUPT_CHANNEL = 28,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_ALLIED_GOLD = 29,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_AEGIS_TAKEN = 30,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_MANA_DAMAGE = 31,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_PHYSICAL_DAMAGE_PREVENTED = 32,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_UNIT_SUMMONED = 33,
  DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_ATTACK_EVADE = 34
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DOTA__COMBATLOG__TYPES)
} DOTACOMBATLOGTYPES;

/* --- messages --- */

struct  _CSODOTAGameAccountClient
{
  ProtobufCMessage base;
  protobuf_c_boolean has_account_id;
  uint32_t account_id;
  protobuf_c_boolean has_wins;
  uint32_t wins;
  protobuf_c_boolean has_losses;
  uint32_t losses;
  protobuf_c_boolean has_xp;
  uint32_t xp;
  protobuf_c_boolean has_level;
  uint32_t level;
  protobuf_c_boolean has_initial_skill;
  uint32_t initial_skill;
  protobuf_c_boolean has_leaver_count;
  uint32_t leaver_count;
  protobuf_c_boolean has_secondary_leaver_count;
  uint32_t secondary_leaver_count;
  protobuf_c_boolean has_low_priority_until_date;
  uint32_t low_priority_until_date;
  protobuf_c_boolean has_prevent_text_chat_until_date;
  uint32_t prevent_text_chat_until_date;
  protobuf_c_boolean has_prevent_voice_until_date;
  uint32_t prevent_voice_until_date;
  protobuf_c_boolean has_last_abandoned_game_date;
  uint32_t last_abandoned_game_date;
  protobuf_c_boolean has_last_secondary_abandoned_game_date;
  uint32_t last_secondary_abandoned_game_date;
  protobuf_c_boolean has_leaver_penalty_count;
  uint32_t leaver_penalty_count;
  protobuf_c_boolean has_completed_game_streak;
  uint32_t completed_game_streak;
  protobuf_c_boolean has_teaching;
  uint32_t teaching;
  protobuf_c_boolean has_leadership;
  uint32_t leadership;
  protobuf_c_boolean has_friendly;
  uint32_t friendly;
  protobuf_c_boolean has_forgiving;
  uint32_t forgiving;
  protobuf_c_boolean has_account_disabled_until_date;
  uint32_t account_disabled_until_date;
  protobuf_c_boolean has_account_disabled_count;
  uint32_t account_disabled_count;
  protobuf_c_boolean has_showcase_hero_id;
  uint32_t showcase_hero_id;
  protobuf_c_boolean has_match_disabled_until_date;
  uint32_t match_disabled_until_date;
  protobuf_c_boolean has_match_disabled_count;
  uint32_t match_disabled_count;
  protobuf_c_boolean has_partner_account_type;
  PartnerAccountType partner_account_type;
  protobuf_c_boolean has_partner_account_state;
  uint32_t partner_account_state;
  protobuf_c_boolean has_shutdownlawterminatetimestamp;
  uint32_t shutdownlawterminatetimestamp;
  protobuf_c_boolean has_low_priority_games_remaining;
  uint32_t low_priority_games_remaining;
  protobuf_c_boolean has_competitive_rank;
  uint32_t competitive_rank;
  protobuf_c_boolean has_calibration_games_remaining;
  uint32_t calibration_games_remaining;
  protobuf_c_boolean has_solo_competitive_rank;
  uint32_t solo_competitive_rank;
  protobuf_c_boolean has_solo_calibration_games_remaining;
  uint32_t solo_calibration_games_remaining;
  protobuf_c_boolean has_competitive_1v1_rank;
  uint32_t competitive_1v1_rank;
  protobuf_c_boolean has_competitive_1v1_calibration_games_remaining;
  uint32_t competitive_1v1_calibration_games_remaining;
  protobuf_c_boolean has_general_seasonal_ranked_rank;
  uint32_t general_seasonal_ranked_rank;
  protobuf_c_boolean has_general_seasonal_ranked_calibration_games_remaining;
  uint32_t general_seasonal_ranked_calibration_games_remaining;
  protobuf_c_boolean has_general_seasonal_ranked_games_played;
  uint32_t general_seasonal_ranked_games_played;
  protobuf_c_boolean has_general_seasonal_ranked_rank_peak;
  uint32_t general_seasonal_ranked_rank_peak;
  protobuf_c_boolean has_solo_seasonal_ranked_rank;
  uint32_t solo_seasonal_ranked_rank;
  protobuf_c_boolean has_solo_seasonal_ranked_calibration_games_remaining;
  uint32_t solo_seasonal_ranked_calibration_games_remaining;
  protobuf_c_boolean has_solo_seasonal_ranked_games_played;
  uint32_t solo_seasonal_ranked_games_played;
  protobuf_c_boolean has_solo_seasonal_ranked_rank_peak;
  uint32_t solo_seasonal_ranked_rank_peak;
  protobuf_c_boolean has_recruitment_level;
  uint32_t recruitment_level;
  protobuf_c_boolean has_has_new_notifications;
  protobuf_c_boolean has_new_notifications;
  protobuf_c_boolean has_is_league_admin;
  protobuf_c_boolean is_league_admin;
  protobuf_c_boolean has_casual_games_played;
  uint32_t casual_games_played;
  protobuf_c_boolean has_solo_competitive_games_played;
  uint32_t solo_competitive_games_played;
  protobuf_c_boolean has_party_competitive_games_played;
  uint32_t party_competitive_games_played;
  protobuf_c_boolean has_casual_1v1_games_played;
  uint32_t casual_1v1_games_played;
  protobuf_c_boolean has_competitive_team_games_played;
  uint32_t competitive_team_games_played;
  protobuf_c_boolean has_curr_all_hero_challenge_id;
  uint32_t curr_all_hero_challenge_id;
  protobuf_c_boolean has_play_time_points;
  uint32_t play_time_points;
  protobuf_c_boolean has_account_flags;
  uint32_t account_flags;
  protobuf_c_boolean has_play_time_level;
  uint32_t play_time_level;
  protobuf_c_boolean has_player_behavior_seq_num_last_report;
  uint32_t player_behavior_seq_num_last_report;
  protobuf_c_boolean has_player_behavior_score_last_report;
  uint32_t player_behavior_score_last_report;
  protobuf_c_boolean has_player_behavior_report_old_data;
  protobuf_c_boolean player_behavior_report_old_data;
  protobuf_c_boolean has_tourney_skill_level;
  uint32_t tourney_skill_level;
};
#define CSODOTAGAME_ACCOUNT_CLIENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csodotagame_account_client__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,PARTNER_ACCOUNT_TYPE__PARTNER_NONE, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgLobbyEventPoints__AccountPoints
{
  ProtobufCMessage base;
  protobuf_c_boolean has_account_id;
  uint32_t account_id;
  protobuf_c_boolean has_normal_points;
  uint32_t normal_points;
  protobuf_c_boolean has_premium_points;
  uint32_t premium_points;
  protobuf_c_boolean has_owned;
  protobuf_c_boolean owned;
  protobuf_c_boolean has_favorite_team;
  uint32_t favorite_team;
  protobuf_c_boolean has_favorite_team_level;
  uint32_t favorite_team_level;
  protobuf_c_boolean has_points_held;
  uint32_t points_held;
  protobuf_c_boolean has_premium_points_held;
  uint32_t premium_points_held;
  protobuf_c_boolean has_favorite_team_foil_level;
  uint32_t favorite_team_foil_level;
  protobuf_c_boolean has_wager_tokens_remaining;
  uint32_t wager_tokens_remaining;
  protobuf_c_boolean has_wager_tokens_max;
  uint32_t wager_tokens_max;
  protobuf_c_boolean has_active_effects_mask;
  uint64_t active_effects_mask;
};
#define CMSG_LOBBY_EVENT_POINTS__ACCOUNT_POINTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_lobby_event_points__account_points__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgLobbyEventPoints
{
  ProtobufCMessage base;
  protobuf_c_boolean has_event_id;
  uint32_t event_id;
  size_t n_account_points;
  CMsgLobbyEventPoints__AccountPoints **account_points;
};
#define CMSG_LOBBY_EVENT_POINTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_lobby_event_points__descriptor) \
    , 0,0, 0,NULL }


struct  _CMsgLobbyBattleCupVictory__BattleCupVictory
{
  ProtobufCMessage base;
  protobuf_c_boolean has_account_id;
  uint32_t account_id;
  protobuf_c_boolean has_win_date;
  uint32_t win_date;
  protobuf_c_boolean has_skill_level;
  uint32_t skill_level;
  protobuf_c_boolean has_team_id;
  uint32_t team_id;
  protobuf_c_boolean has_tournament_id;
  uint32_t tournament_id;
};
#define CMSG_LOBBY_BATTLE_CUP_VICTORY__BATTLE_CUP_VICTORY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_lobby_battle_cup_victory__battle_cup_victory__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgLobbyBattleCupVictory
{
  ProtobufCMessage base;
  size_t n_winner_accounts;
  CMsgLobbyBattleCupVictory__BattleCupVictory **winner_accounts;
};
#define CMSG_LOBBY_BATTLE_CUP_VICTORY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_lobby_battle_cup_victory__descriptor) \
    , 0,NULL }


struct  _CMsgDOTABroadcastNotification
{
  ProtobufCMessage base;
  char *message;
};
#define CMSG_DOTABROADCAST_NOTIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotabroadcast_notification__descriptor) \
    , NULL }


struct  _CProtoItemHeroStatue
{
  ProtobufCMessage base;
  protobuf_c_boolean has_hero_id;
  uint32_t hero_id;
  protobuf_c_boolean has_status_effect_index;
  uint32_t status_effect_index;
  char *sequence_name;
  protobuf_c_boolean has_cycle;
  float cycle;
  size_t n_wearable;
  uint32_t *wearable;
  char *inscription;
  size_t n_style;
  uint32_t *style;
  protobuf_c_boolean has_tournament_drop;
  protobuf_c_boolean tournament_drop;
};
#define CPROTO_ITEM_HERO_STATUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cproto_item_hero_statue__descriptor) \
    , 0,0, 0,0, NULL, 0,0, 0,NULL, NULL, 0,NULL, 0,0 }


struct  _CProtoItemTeamShowcase
{
  ProtobufCMessage base;
  protobuf_c_boolean has_hero_id;
  uint32_t hero_id;
  protobuf_c_boolean has_status_effect_index;
  uint32_t status_effect_index;
  char *sequence_name;
  protobuf_c_boolean has_cycle;
  float cycle;
  size_t n_wearable;
  uint32_t *wearable;
  char *inscription;
  size_t n_style;
  uint32_t *style;
};
#define CPROTO_ITEM_TEAM_SHOWCASE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cproto_item_team_showcase__descriptor) \
    , 0,0, 0,0, NULL, 0,0, 0,NULL, NULL, 0,NULL }


struct  _CMatchPlayerAbilityUpgrade
{
  ProtobufCMessage base;
  protobuf_c_boolean has_ability;
  uint32_t ability;
  protobuf_c_boolean has_time;
  uint32_t time;
};
#define CMATCH_PLAYER_ABILITY_UPGRADE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmatch_player_ability_upgrade__descriptor) \
    , 0,0, 0,0 }


struct  _CMatchAdditionalUnitInventory
{
  ProtobufCMessage base;
  char *unit_name;
  size_t n_items;
  uint32_t *items;
};
#define CMATCH_ADDITIONAL_UNIT_INVENTORY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmatch_additional_unit_inventory__descriptor) \
    , NULL, 0,NULL }


struct  _CMatchHeroSelectEvent
{
  ProtobufCMessage base;
  protobuf_c_boolean has_is_pick;
  protobuf_c_boolean is_pick;
  protobuf_c_boolean has_team;
  uint32_t team;
  protobuf_c_boolean has_hero_id;
  uint32_t hero_id;
};
#define CMATCH_HERO_SELECT_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmatch_hero_select_event__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _CMsgDOTAProcessFantasyScheduledEvent
{
  ProtobufCMessage base;
  protobuf_c_boolean has_event;
  uint32_t event;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  protobuf_c_boolean has_fantasy_league_id;
  uint32_t fantasy_league_id;
  protobuf_c_boolean has_season;
  uint32_t season;
  protobuf_c_boolean has_reference_data;
  uint32_t reference_data;
};
#define CMSG_DOTAPROCESS_FANTASY_SCHEDULED_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotaprocess_fantasy_scheduled_event__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgDOTAHasItemQuery
{
  ProtobufCMessage base;
  protobuf_c_boolean has_account_id;
  uint32_t account_id;
  protobuf_c_boolean has_item_id;
  uint64_t item_id;
};
#define CMSG_DOTAHAS_ITEM_QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotahas_item_query__descriptor) \
    , 0,0, 0,0 }


struct  _CMsgDOTAHasItemResponse
{
  ProtobufCMessage base;
  protobuf_c_boolean has_has_item;
  protobuf_c_boolean has_item;
};
#define CMSG_DOTAHAS_ITEM_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotahas_item_response__descriptor) \
    , 0,0 }


struct  _CMsgDOTAHasItemDefsQuery
{
  ProtobufCMessage base;
  protobuf_c_boolean has_account_id;
  uint32_t account_id;
  size_t n_itemdef_ids;
  uint32_t *itemdef_ids;
};
#define CMSG_DOTAHAS_ITEM_DEFS_QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotahas_item_defs_query__descriptor) \
    , 0,0, 0,NULL }


struct  _CMsgDOTAHasItemDefsResponse
{
  ProtobufCMessage base;
  protobuf_c_boolean has_has_items;
  protobuf_c_boolean has_items;
};
#define CMSG_DOTAHAS_ITEM_DEFS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotahas_item_defs_response__descriptor) \
    , 0,0 }


struct  _CMsgGCToGCFantasySetMatchLeague
{
  ProtobufCMessage base;
  protobuf_c_boolean has_match_id;
  uint64_t match_id;
  protobuf_c_boolean has_league_id;
  uint32_t league_id;
};
#define CMSG_GCTO_GCFANTASY_SET_MATCH_LEAGUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_gcto_gcfantasy_set_match_league__descriptor) \
    , 0,0, 0,0 }


struct  _CSODOTAMapLocationState
{
  ProtobufCMessage base;
  protobuf_c_boolean has_account_id;
  uint32_t account_id;
  protobuf_c_boolean has_location_id;
  int32_t location_id;
  protobuf_c_boolean has_completed;
  protobuf_c_boolean completed;
};
#define CSODOTAMAP_LOCATION_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csodotamap_location_state__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _CMsgLeagueAdminList
{
  ProtobufCMessage base;
  size_t n_account_ids;
  uint32_t *account_ids;
};
#define CMSG_LEAGUE_ADMIN_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_league_admin_list__descriptor) \
    , 0,NULL }


struct  _CCompendiumTimestampedData
{
  ProtobufCMessage base;
  protobuf_c_boolean has_game_time;
  uint32_t game_time;
  protobuf_c_boolean has_gpm;
  uint32_t gpm;
  protobuf_c_boolean has_xpm;
  uint32_t xpm;
  protobuf_c_boolean has_kills;
  uint32_t kills;
  protobuf_c_boolean has_deaths;
  uint32_t deaths;
  size_t n_item_purchases;
  uint32_t *item_purchases;
};
#define CCOMPENDIUM_TIMESTAMPED_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ccompendium_timestamped_data__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL }


struct  _CCompendiumGameTimeline
{
  ProtobufCMessage base;
  size_t n_data;
  CCompendiumTimestampedData **data;
  size_t n_tags;
  char **tags;
};
#define CCOMPENDIUM_GAME_TIMELINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ccompendium_game_timeline__descriptor) \
    , 0,NULL, 0,NULL }


struct  _CCompendiumGameList
{
  ProtobufCMessage base;
  size_t n_games;
  CCompendiumGameTimeline **games;
};
#define CCOMPENDIUM_GAME_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ccompendium_game_list__descriptor) \
    , 0,NULL }


struct  _CAdditionalEquipSlot
{
  ProtobufCMessage base;
  protobuf_c_boolean has_class_id;
  uint32_t class_id;
  protobuf_c_boolean has_slot_id;
  uint32_t slot_id;
  protobuf_c_boolean has_def_index;
  uint32_t def_index;
};
#define CADDITIONAL_EQUIP_SLOT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cadditional_equip_slot__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _CMsgDOTACombatLogEntry
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  DOTACOMBATLOGTYPES type;
  protobuf_c_boolean has_target_name;
  uint32_t target_name;
  protobuf_c_boolean has_target_source_name;
  uint32_t target_source_name;
  protobuf_c_boolean has_attacker_name;
  uint32_t attacker_name;
  protobuf_c_boolean has_damage_source_name;
  uint32_t damage_source_name;
  protobuf_c_boolean has_inflictor_name;
  uint32_t inflictor_name;
  protobuf_c_boolean has_is_attacker_illusion;
  protobuf_c_boolean is_attacker_illusion;
  protobuf_c_boolean has_is_attacker_hero;
  protobuf_c_boolean is_attacker_hero;
  protobuf_c_boolean has_is_target_illusion;
  protobuf_c_boolean is_target_illusion;
  protobuf_c_boolean has_is_target_hero;
  protobuf_c_boolean is_target_hero;
  protobuf_c_boolean has_is_visible_radiant;
  protobuf_c_boolean is_visible_radiant;
  protobuf_c_boolean has_is_visible_dire;
  protobuf_c_boolean is_visible_dire;
  protobuf_c_boolean has_value;
  uint32_t value;
  protobuf_c_boolean has_health;
  int32_t health;
  protobuf_c_boolean has_timestamp;
  float timestamp;
  protobuf_c_boolean has_stun_duration;
  float stun_duration;
  protobuf_c_boolean has_slow_duration;
  float slow_duration;
  protobuf_c_boolean has_is_ability_toggle_on;
  protobuf_c_boolean is_ability_toggle_on;
  protobuf_c_boolean has_is_ability_toggle_off;
  protobuf_c_boolean is_ability_toggle_off;
  protobuf_c_boolean has_ability_level;
  uint32_t ability_level;
  protobuf_c_boolean has_location_x;
  float location_x;
  protobuf_c_boolean has_location_y;
  float location_y;
  protobuf_c_boolean has_gold_reason;
  uint32_t gold_reason;
  protobuf_c_boolean has_timestamp_raw;
  float timestamp_raw;
  protobuf_c_boolean has_modifier_duration;
  float modifier_duration;
  protobuf_c_boolean has_xp_reason;
  uint32_t xp_reason;
  protobuf_c_boolean has_last_hits;
  uint32_t last_hits;
  protobuf_c_boolean has_attacker_team;
  uint32_t attacker_team;
  protobuf_c_boolean has_target_team;
  uint32_t target_team;
  protobuf_c_boolean has_obs_wards_placed;
  uint32_t obs_wards_placed;
  protobuf_c_boolean has_assist_player0;
  uint32_t assist_player0;
  protobuf_c_boolean has_assist_player1;
  uint32_t assist_player1;
  protobuf_c_boolean has_assist_player2;
  uint32_t assist_player2;
  protobuf_c_boolean has_assist_player3;
  uint32_t assist_player3;
  protobuf_c_boolean has_stack_count;
  uint32_t stack_count;
  protobuf_c_boolean has_hidden_modifier;
  protobuf_c_boolean hidden_modifier;
  protobuf_c_boolean has_is_target_building;
  protobuf_c_boolean is_target_building;
  protobuf_c_boolean has_neutral_camp_type;
  uint32_t neutral_camp_type;
  protobuf_c_boolean has_rune_type;
  uint32_t rune_type;
  size_t n_assist_players;
  uint32_t *assist_players;
  protobuf_c_boolean has_is_heal_save;
  protobuf_c_boolean is_heal_save;
  protobuf_c_boolean has_is_ultimate_ability;
  protobuf_c_boolean is_ultimate_ability;
  protobuf_c_boolean has_attacker_hero_level;
  uint32_t attacker_hero_level;
  protobuf_c_boolean has_target_hero_level;
  uint32_t target_hero_level;
  protobuf_c_boolean has_xpm;
  uint32_t xpm;
  protobuf_c_boolean has_gpm;
  uint32_t gpm;
  protobuf_c_boolean has_event_location;
  uint32_t event_location;
  protobuf_c_boolean has_target_is_self;
  protobuf_c_boolean target_is_self;
  protobuf_c_boolean has_damage_type;
  uint32_t damage_type;
  protobuf_c_boolean has_invisibility_modifier;
  protobuf_c_boolean invisibility_modifier;
  protobuf_c_boolean has_damage_category;
  uint32_t damage_category;
  protobuf_c_boolean has_networth;
  uint32_t networth;
  protobuf_c_boolean has_building_type;
  uint32_t building_type;
  protobuf_c_boolean has_modifier_elapsed_duration;
  float modifier_elapsed_duration;
  protobuf_c_boolean has_silence_modifier;
  protobuf_c_boolean silence_modifier;
  protobuf_c_boolean has_heal_from_lifesteal;
  protobuf_c_boolean heal_from_lifesteal;
  protobuf_c_boolean has_modifier_purged;
  protobuf_c_boolean modifier_purged;
  protobuf_c_boolean has_spell_evaded;
  protobuf_c_boolean spell_evaded;
};
#define CMSG_DOTACOMBAT_LOG_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotacombat_log_entry__descriptor) \
    , 0,DOTA__COMBATLOG__TYPES__DOTA_COMBATLOG_INVALID, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgDOTAProfileCard__Slot__Trophy
{
  ProtobufCMessage base;
  protobuf_c_boolean has_trophy_id;
  uint32_t trophy_id;
  protobuf_c_boolean has_trophy_score;
  uint32_t trophy_score;
};
#define CMSG_DOTAPROFILE_CARD__SLOT__TROPHY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotaprofile_card__slot__trophy__descriptor) \
    , 0,0, 0,0 }


struct  _CMsgDOTAProfileCard__Slot__Stat
{
  ProtobufCMessage base;
  protobuf_c_boolean has_stat_id;
  CMsgDOTAProfileCard__EStatID stat_id;
  protobuf_c_boolean has_stat_score;
  uint32_t stat_score;
};
#define CMSG_DOTAPROFILE_CARD__SLOT__STAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotaprofile_card__slot__stat__descriptor) \
    , 0,CMSG_DOTAPROFILE_CARD__ESTAT_ID__k_eStat_SoloRank, 0,0 }


struct  _CMsgDOTAProfileCard__Slot__Item
{
  ProtobufCMessage base;
  protobuf_c_boolean has_serialized_item;
  ProtobufCBinaryData serialized_item;
  protobuf_c_boolean has_item_id;
  uint64_t item_id;
};
#define CMSG_DOTAPROFILE_CARD__SLOT__ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotaprofile_card__slot__item__descriptor) \
    , 0,{0,NULL}, 0,0 }


struct  _CMsgDOTAProfileCard__Slot__Hero
{
  ProtobufCMessage base;
  protobuf_c_boolean has_hero_id;
  uint32_t hero_id;
  protobuf_c_boolean has_hero_wins;
  uint32_t hero_wins;
  protobuf_c_boolean has_hero_losses;
  uint32_t hero_losses;
};
#define CMSG_DOTAPROFILE_CARD__SLOT__HERO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotaprofile_card__slot__hero__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _CMsgDOTAProfileCard__Slot__Emoticon
{
  ProtobufCMessage base;
  protobuf_c_boolean has_emoticon_id;
  uint32_t emoticon_id;
};
#define CMSG_DOTAPROFILE_CARD__SLOT__EMOTICON__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotaprofile_card__slot__emoticon__descriptor) \
    , 0,0 }


struct  _CMsgDOTAProfileCard__Slot
{
  ProtobufCMessage base;
  protobuf_c_boolean has_slot_id;
  uint32_t slot_id;
  CMsgDOTAProfileCard__Slot__Trophy *trophy;
  CMsgDOTAProfileCard__Slot__Stat *stat;
  CMsgDOTAProfileCard__Slot__Item *item;
  CMsgDOTAProfileCard__Slot__Hero *hero;
  CMsgDOTAProfileCard__Slot__Emoticon *emoticon;
};
#define CMSG_DOTAPROFILE_CARD__SLOT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotaprofile_card__slot__descriptor) \
    , 0,0, NULL, NULL, NULL, NULL, NULL }


struct  _CMsgDOTAProfileCard
{
  ProtobufCMessage base;
  protobuf_c_boolean has_account_id;
  uint32_t account_id;
  protobuf_c_boolean has_background_def_index;
  uint32_t background_def_index;
  size_t n_slots;
  CMsgDOTAProfileCard__Slot **slots;
  protobuf_c_boolean has_badge_points;
  uint32_t badge_points;
  protobuf_c_boolean has_event_points;
  uint32_t event_points;
  protobuf_c_boolean has_event_id;
  uint32_t event_id;
  protobuf_c_boolean has_battle_cup_win_date;
  uint32_t battle_cup_win_date;
  protobuf_c_boolean has_battle_cup_valid_until;
  uint32_t battle_cup_valid_until;
  protobuf_c_boolean has_battle_cup_skill_level;
  uint32_t battle_cup_skill_level;
  protobuf_c_boolean has_battle_cup_team_id;
  uint32_t battle_cup_team_id;
  protobuf_c_boolean has_battle_cup_tournament_id;
  uint32_t battle_cup_tournament_id;
};
#define CMSG_DOTAPROFILE_CARD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotaprofile_card__descriptor) \
    , 0,0, 0,0, 0,NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CSODOTAPlayerChallenge
{
  ProtobufCMessage base;
  protobuf_c_boolean has_account_id;
  uint32_t account_id;
  protobuf_c_boolean has_event_id;
  uint32_t event_id;
  protobuf_c_boolean has_slot_id;
  uint32_t slot_id;
  protobuf_c_boolean has_challenge_type;
  uint32_t challenge_type;
  protobuf_c_boolean has_int_param_0;
  uint32_t int_param_0;
  protobuf_c_boolean has_int_param_1;
  uint32_t int_param_1;
  protobuf_c_boolean has_created_time;
  uint32_t created_time;
  protobuf_c_boolean has_completed;
  uint32_t completed;
  protobuf_c_boolean has_sequence_id;
  uint32_t sequence_id;
  protobuf_c_boolean has_challenge_tier;
  uint32_t challenge_tier;
  protobuf_c_boolean has_flags;
  uint32_t flags;
  protobuf_c_boolean has_attempts;
  uint32_t attempts;
  protobuf_c_boolean has_complete_limit;
  uint32_t complete_limit;
  protobuf_c_boolean has_quest_rank;
  uint32_t quest_rank;
};
#define CSODOTAPLAYER_CHALLENGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csodotaplayer_challenge__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgClientToGCRerollPlayerChallenge
{
  ProtobufCMessage base;
  protobuf_c_boolean has_event_id;
  uint32_t event_id;
  protobuf_c_boolean has_sequence_id;
  uint32_t sequence_id;
};
#define CMSG_CLIENT_TO_GCREROLL_PLAYER_CHALLENGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_client_to_gcreroll_player_challenge__descriptor) \
    , 0,0, 0,0 }


struct  _CMsgGCRerollPlayerChallengeResponse
{
  ProtobufCMessage base;
  protobuf_c_boolean has_result;
  CMsgGCRerollPlayerChallengeResponse__EResult result;
};
#define CMSG_GCREROLL_PLAYER_CHALLENGE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_gcreroll_player_challenge_response__descriptor) \
    , 0,CMSG_GCREROLL_PLAYER_CHALLENGE_RESPONSE__ERESULT__eResult_Success }


struct  _CMsgGCTopCustomGamesList
{
  ProtobufCMessage base;
  size_t n_top_custom_games;
  uint64_t *top_custom_games;
  protobuf_c_boolean has_game_of_the_day;
  uint64_t game_of_the_day;
};
#define CMSG_GCTOP_CUSTOM_GAMES_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_gctop_custom_games_list__descriptor) \
    , 0,NULL, 0,0 }


struct  _CMsgDOTARealtimeGameStats__TeamDetails
{
  ProtobufCMessage base;
  protobuf_c_boolean has_team_number;
  uint32_t team_number;
  protobuf_c_boolean has_team_id;
  uint32_t team_id;
  char *team_name;
  protobuf_c_boolean has_team_logo;
  uint64_t team_logo;
  protobuf_c_boolean has_score;
  uint32_t score;
  size_t n_players;
  CMsgDOTARealtimeGameStats__PlayerDetails **players;
  protobuf_c_boolean has_only_team;
  protobuf_c_boolean only_team;
  protobuf_c_boolean has_cheers;
  uint32_t cheers;
};
#define CMSG_DOTAREALTIME_GAME_STATS__TEAM_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotarealtime_game_stats__team_details__descriptor) \
    , 0,0, 0,0, NULL, 0,0, 0,0, 0,NULL, 0,0, 0,0 }


struct  _CMsgDOTARealtimeGameStats__ItemDetails
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  char *name;
  protobuf_c_boolean has_time;
  int32_t time;
  protobuf_c_boolean has_sold;
  protobuf_c_boolean sold;
  protobuf_c_boolean has_stackcount;
  uint32_t stackcount;
};
#define CMSG_DOTAREALTIME_GAME_STATS__ITEM_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotarealtime_game_stats__item_details__descriptor) \
    , 0,0, NULL, 0,0, 0,0, 0,0 }


struct  _CMsgDOTARealtimeGameStats__AbilityDetails
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  char *name;
  protobuf_c_boolean has_level;
  uint32_t level;
  protobuf_c_boolean has_cooldown;
  float cooldown;
  protobuf_c_boolean has_cooldown_max;
  float cooldown_max;
};
#define CMSG_DOTAREALTIME_GAME_STATS__ABILITY_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotarealtime_game_stats__ability_details__descriptor) \
    , 0,0, NULL, 0,0, 0,0, 0,0 }


struct  _CMsgDOTARealtimeGameStats__HeroToHeroStats
{
  ProtobufCMessage base;
  protobuf_c_boolean has_victimid;
  uint32_t victimid;
  protobuf_c_boolean has_kills;
  uint32_t kills;
  protobuf_c_boolean has_assists;
  uint32_t assists;
};
#define CMSG_DOTAREALTIME_GAME_STATS__HERO_TO_HERO_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotarealtime_game_stats__hero_to_hero_stats__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _CMsgDOTARealtimeGameStats__AbilityList
{
  ProtobufCMessage base;
  size_t n_id;
  uint32_t *id;
};
#define CMSG_DOTAREALTIME_GAME_STATS__ABILITY_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotarealtime_game_stats__ability_list__descriptor) \
    , 0,NULL }


struct  _CMsgDOTARealtimeGameStats__PlayerDetails
{
  ProtobufCMessage base;
  protobuf_c_boolean has_accountid;
  uint32_t accountid;
  protobuf_c_boolean has_playerid;
  uint32_t playerid;
  char *name;
  protobuf_c_boolean has_team;
  uint32_t team;
  protobuf_c_boolean has_heroid;
  uint32_t heroid;
  protobuf_c_boolean has_healthpoints;
  uint32_t healthpoints;
  protobuf_c_boolean has_maxhealthpoints;
  uint32_t maxhealthpoints;
  protobuf_c_boolean has_healthregenrate;
  float healthregenrate;
  protobuf_c_boolean has_manapoints;
  uint32_t manapoints;
  protobuf_c_boolean has_maxmanapoints;
  uint32_t maxmanapoints;
  protobuf_c_boolean has_manaregenrate;
  float manaregenrate;
  protobuf_c_boolean has_base_strength;
  uint32_t base_strength;
  protobuf_c_boolean has_base_agility;
  uint32_t base_agility;
  protobuf_c_boolean has_base_intelligence;
  uint32_t base_intelligence;
  protobuf_c_boolean has_base_armor;
  int32_t base_armor;
  protobuf_c_boolean has_base_movespeed;
  uint32_t base_movespeed;
  protobuf_c_boolean has_base_damage;
  uint32_t base_damage;
  protobuf_c_boolean has_strength;
  uint32_t strength;
  protobuf_c_boolean has_agility;
  uint32_t agility;
  protobuf_c_boolean has_intelligence;
  uint32_t intelligence;
  protobuf_c_boolean has_armor;
  int32_t armor;
  protobuf_c_boolean has_movespeed;
  uint32_t movespeed;
  protobuf_c_boolean has_damage;
  uint32_t damage;
  protobuf_c_boolean has_hero_damage;
  uint32_t hero_damage;
  protobuf_c_boolean has_tower_damage;
  uint32_t tower_damage;
  size_t n_abilities;
  CMsgDOTARealtimeGameStats__AbilityDetails **abilities;
  protobuf_c_boolean has_level;
  uint32_t level;
  protobuf_c_boolean has_kill_count;
  uint32_t kill_count;
  protobuf_c_boolean has_death_count;
  uint32_t death_count;
  protobuf_c_boolean has_assists_count;
  uint32_t assists_count;
  protobuf_c_boolean has_denies_count;
  uint32_t denies_count;
  protobuf_c_boolean has_lh_count;
  uint32_t lh_count;
  protobuf_c_boolean has_hero_healing;
  uint32_t hero_healing;
  protobuf_c_boolean has_gold_per_min;
  uint32_t gold_per_min;
  protobuf_c_boolean has_xp_per_min;
  uint32_t xp_per_min;
  protobuf_c_boolean has_net_gold;
  uint32_t net_gold;
  protobuf_c_boolean has_gold;
  uint32_t gold;
  protobuf_c_boolean has_x;
  float x;
  protobuf_c_boolean has_y;
  float y;
  protobuf_c_boolean has_respawn_time;
  int32_t respawn_time;
  protobuf_c_boolean has_ultimate_cooldown;
  uint32_t ultimate_cooldown;
  protobuf_c_boolean has_has_buyback;
  protobuf_c_boolean has_buyback;
  size_t n_items;
  CMsgDOTARealtimeGameStats__ItemDetails **items;
  size_t n_stashitems;
  CMsgDOTARealtimeGameStats__ItemDetails **stashitems;
  size_t n_itemshoppinglist;
  CMsgDOTARealtimeGameStats__ItemDetails **itemshoppinglist;
  size_t n_levelpoints;
  CMsgDOTARealtimeGameStats__AbilityList **levelpoints;
  size_t n_hero_to_hero_stats;
  CMsgDOTARealtimeGameStats__HeroToHeroStats **hero_to_hero_stats;
  protobuf_c_boolean has_has_ultimate;
  protobuf_c_boolean has_ultimate;
  protobuf_c_boolean has_has_ultimate_mana;
  protobuf_c_boolean has_ultimate_mana;
};
#define CMSG_DOTAREALTIME_GAME_STATS__PLAYER_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotarealtime_game_stats__player_details__descriptor) \
    , 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,0, 0,0 }


struct  _CMsgDOTARealtimeGameStats__BuildingDetails
{
  ProtobufCMessage base;
  protobuf_c_boolean has_team;
  uint32_t team;
  protobuf_c_boolean has_heading;
  float heading;
  protobuf_c_boolean has_lane;
  uint32_t lane;
  protobuf_c_boolean has_tier;
  uint32_t tier;
  protobuf_c_boolean has_type;
  uint32_t type;
  protobuf_c_boolean has_x;
  float x;
  protobuf_c_boolean has_y;
  float y;
  protobuf_c_boolean has_destroyed;
  protobuf_c_boolean destroyed;
};
#define CMSG_DOTAREALTIME_GAME_STATS__BUILDING_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotarealtime_game_stats__building_details__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgDOTARealtimeGameStats__KillDetails
{
  ProtobufCMessage base;
  protobuf_c_boolean has_player_id;
  uint32_t player_id;
  protobuf_c_boolean has_death_time;
  int32_t death_time;
  protobuf_c_boolean has_killer_player_id;
  uint32_t killer_player_id;
};
#define CMSG_DOTAREALTIME_GAME_STATS__KILL_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotarealtime_game_stats__kill_details__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _CMsgDOTARealtimeGameStats__BroadcasterDetails
{
  ProtobufCMessage base;
  protobuf_c_boolean has_player_id;
  uint32_t player_id;
  protobuf_c_boolean has_selected_hero;
  uint32_t selected_hero;
  protobuf_c_boolean has_selected_graph;
  uint32_t selected_graph;
};
#define CMSG_DOTAREALTIME_GAME_STATS__BROADCASTER_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotarealtime_game_stats__broadcaster_details__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _CMsgDOTARealtimeGameStats__PickBanDetails
{
  ProtobufCMessage base;
  protobuf_c_boolean has_hero;
  uint32_t hero;
  protobuf_c_boolean has_team;
  uint32_t team;
};
#define CMSG_DOTAREALTIME_GAME_STATS__PICK_BAN_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotarealtime_game_stats__pick_ban_details__descriptor) \
    , 0,0, 0,0 }


struct  _CMsgDOTARealtimeGameStats__MatchDetails
{
  ProtobufCMessage base;
  protobuf_c_boolean has_server_steam_id;
  uint64_t server_steam_id;
  protobuf_c_boolean has_matchid;
  uint64_t matchid;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  protobuf_c_boolean has_time_of_day;
  float time_of_day;
  protobuf_c_boolean has_is_nightstalker_night;
  protobuf_c_boolean is_nightstalker_night;
  protobuf_c_boolean has_game_time;
  int32_t game_time;
  protobuf_c_boolean has_teamid_radiant;
  uint32_t teamid_radiant;
  protobuf_c_boolean has_teamid_dire;
  uint32_t teamid_dire;
  size_t n_picks;
  CMsgDOTARealtimeGameStats__PickBanDetails **picks;
  size_t n_bans;
  CMsgDOTARealtimeGameStats__PickBanDetails **bans;
  size_t n_kills;
  CMsgDOTARealtimeGameStats__KillDetails **kills;
  size_t n_broadcasters;
  CMsgDOTARealtimeGameStats__BroadcasterDetails **broadcasters;
  protobuf_c_boolean has_game_mode;
  uint32_t game_mode;
  protobuf_c_boolean has_league_id;
  uint32_t league_id;
  protobuf_c_boolean has_single_team;
  protobuf_c_boolean single_team;
  protobuf_c_boolean has_cheers_peak;
  uint32_t cheers_peak;
};
#define CMSG_DOTAREALTIME_GAME_STATS__MATCH_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotarealtime_game_stats__match_details__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgDOTARealtimeGameStats__GraphData__LocationStats
{
  ProtobufCMessage base;
  size_t n_stats;
  int32_t *stats;
};
#define CMSG_DOTAREALTIME_GAME_STATS__GRAPH_DATA__LOCATION_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotarealtime_game_stats__graph_data__location_stats__descriptor) \
    , 0,NULL }


struct  _CMsgDOTARealtimeGameStats__GraphData__TeamLocationStats
{
  ProtobufCMessage base;
  size_t n_loc_stats;
  CMsgDOTARealtimeGameStats__GraphData__LocationStats **loc_stats;
};
#define CMSG_DOTAREALTIME_GAME_STATS__GRAPH_DATA__TEAM_LOCATION_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotarealtime_game_stats__graph_data__team_location_stats__descriptor) \
    , 0,NULL }


struct  _CMsgDOTARealtimeGameStats__GraphData
{
  ProtobufCMessage base;
  size_t n_graph_gold;
  int32_t *graph_gold;
  size_t n_graph_xp;
  int32_t *graph_xp;
  size_t n_graph_kill;
  int32_t *graph_kill;
  size_t n_graph_tower;
  int32_t *graph_tower;
  size_t n_graph_rax;
  int32_t *graph_rax;
  size_t n_team_loc_stats;
  CMsgDOTARealtimeGameStats__GraphData__TeamLocationStats **team_loc_stats;
};
#define CMSG_DOTAREALTIME_GAME_STATS__GRAPH_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotarealtime_game_stats__graph_data__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _CMsgDOTARealtimeGameStats
{
  ProtobufCMessage base;
  CMsgDOTARealtimeGameStats__MatchDetails *match;
  size_t n_teams;
  CMsgDOTARealtimeGameStats__TeamDetails **teams;
  size_t n_buildings;
  CMsgDOTARealtimeGameStats__BuildingDetails **buildings;
  CMsgDOTARealtimeGameStats__GraphData *graph_data;
  protobuf_c_boolean has_delta_frame;
  protobuf_c_boolean delta_frame;
};
#define CMSG_DOTAREALTIME_GAME_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotarealtime_game_stats__descriptor) \
    , NULL, 0,NULL, 0,NULL, NULL, 0,0 }


struct  _CMsgDOTARealtimeGameStatsTerse__TeamDetails
{
  ProtobufCMessage base;
  protobuf_c_boolean has_team_number;
  uint32_t team_number;
  protobuf_c_boolean has_team_id;
  uint32_t team_id;
  char *team_name;
  protobuf_c_boolean has_team_logo;
  uint64_t team_logo;
  protobuf_c_boolean has_score;
  uint32_t score;
  size_t n_players;
  CMsgDOTARealtimeGameStatsTerse__PlayerDetails **players;
};
#define CMSG_DOTAREALTIME_GAME_STATS_TERSE__TEAM_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotarealtime_game_stats_terse__team_details__descriptor) \
    , 0,0, 0,0, NULL, 0,0, 0,0, 0,NULL }


struct  _CMsgDOTARealtimeGameStatsTerse__PlayerDetails
{
  ProtobufCMessage base;
  protobuf_c_boolean has_accountid;
  uint32_t accountid;
  protobuf_c_boolean has_playerid;
  uint32_t playerid;
  char *name;
  protobuf_c_boolean has_team;
  uint32_t team;
  protobuf_c_boolean has_heroid;
  uint32_t heroid;
  protobuf_c_boolean has_level;
  uint32_t level;
  protobuf_c_boolean has_kill_count;
  uint32_t kill_count;
  protobuf_c_boolean has_death_count;
  uint32_t death_count;
  protobuf_c_boolean has_assists_count;
  uint32_t assists_count;
  protobuf_c_boolean has_denies_count;
  uint32_t denies_count;
  protobuf_c_boolean has_lh_count;
  uint32_t lh_count;
  protobuf_c_boolean has_gold;
  uint32_t gold;
  protobuf_c_boolean has_x;
  float x;
  protobuf_c_boolean has_y;
  float y;
};
#define CMSG_DOTAREALTIME_GAME_STATS_TERSE__PLAYER_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotarealtime_game_stats_terse__player_details__descriptor) \
    , 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgDOTARealtimeGameStatsTerse__BuildingDetails
{
  ProtobufCMessage base;
  protobuf_c_boolean has_team;
  uint32_t team;
  protobuf_c_boolean has_heading;
  float heading;
  protobuf_c_boolean has_type;
  uint32_t type;
  protobuf_c_boolean has_lane;
  uint32_t lane;
  protobuf_c_boolean has_tier;
  uint32_t tier;
  protobuf_c_boolean has_x;
  float x;
  protobuf_c_boolean has_y;
  float y;
  protobuf_c_boolean has_destroyed;
  protobuf_c_boolean destroyed;
};
#define CMSG_DOTAREALTIME_GAME_STATS_TERSE__BUILDING_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotarealtime_game_stats_terse__building_details__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgDOTARealtimeGameStatsTerse__MatchDetails
{
  ProtobufCMessage base;
  protobuf_c_boolean has_server_steam_id;
  uint64_t server_steam_id;
  protobuf_c_boolean has_matchid;
  uint64_t matchid;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  protobuf_c_boolean has_game_time;
  int32_t game_time;
  size_t n_steam_broadcaster_account_ids;
  uint32_t *steam_broadcaster_account_ids;
  protobuf_c_boolean has_game_mode;
  uint32_t game_mode;
  protobuf_c_boolean has_league_id;
  uint32_t league_id;
};
#define CMSG_DOTAREALTIME_GAME_STATS_TERSE__MATCH_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotarealtime_game_stats_terse__match_details__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,0, 0,0 }


struct  _CMsgDOTARealtimeGameStatsTerse__GraphData
{
  ProtobufCMessage base;
  size_t n_graph_gold;
  int32_t *graph_gold;
};
#define CMSG_DOTAREALTIME_GAME_STATS_TERSE__GRAPH_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotarealtime_game_stats_terse__graph_data__descriptor) \
    , 0,NULL }


struct  _CMsgDOTARealtimeGameStatsTerse
{
  ProtobufCMessage base;
  CMsgDOTARealtimeGameStatsTerse__MatchDetails *match;
  size_t n_teams;
  CMsgDOTARealtimeGameStatsTerse__TeamDetails **teams;
  size_t n_buildings;
  CMsgDOTARealtimeGameStatsTerse__BuildingDetails **buildings;
  CMsgDOTARealtimeGameStatsTerse__GraphData *graph_data;
  protobuf_c_boolean has_delta_frame;
  protobuf_c_boolean delta_frame;
};
#define CMSG_DOTAREALTIME_GAME_STATS_TERSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotarealtime_game_stats_terse__descriptor) \
    , NULL, 0,NULL, 0,NULL, NULL, 0,0 }


struct  _CMsgGCToClientMatchGroupsVersion
{
  ProtobufCMessage base;
  protobuf_c_boolean has_matchgroups_version;
  uint32_t matchgroups_version;
};
#define CMSG_GCTO_CLIENT_MATCH_GROUPS_VERSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_gcto_client_match_groups_version__descriptor) \
    , 0,0 }


struct  _CMsgDOTASDOHeroStatsHistory
{
  ProtobufCMessage base;
  protobuf_c_boolean has_match_id;
  uint64_t match_id;
  protobuf_c_boolean has_game_mode;
  uint32_t game_mode;
  protobuf_c_boolean has_lobby_type;
  uint32_t lobby_type;
  protobuf_c_boolean has_start_time;
  uint32_t start_time;
  protobuf_c_boolean has_won;
  protobuf_c_boolean won;
  protobuf_c_boolean has_gpm;
  uint32_t gpm;
  protobuf_c_boolean has_xpm;
  uint32_t xpm;
  protobuf_c_boolean has_kills;
  uint32_t kills;
  protobuf_c_boolean has_deaths;
  uint32_t deaths;
  protobuf_c_boolean has_assists;
  uint32_t assists;
};
#define CMSG_DOTASDOHERO_STATS_HISTORY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotasdohero_stats_history__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgDOTASeasonRewards__Reward
{
  ProtobufCMessage base;
  char *name;
  protobuf_c_boolean has_itemdef;
  uint32_t itemdef;
  protobuf_c_boolean has_importance;
  uint32_t importance;
  protobuf_c_boolean has_base_level;
  uint32_t base_level;
  protobuf_c_boolean has_repeat_level;
  uint32_t repeat_level;
  protobuf_c_boolean has_reward_type;
  CMsgDOTASeasonRewards__ERewardType reward_type;
  char *image;
  protobuf_c_boolean has_action_id;
  uint32_t action_id;
  protobuf_c_boolean has_effect_index;
  uint32_t effect_index;
};
#define CMSG_DOTASEASON_REWARDS__REWARD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotaseason_rewards__reward__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,CMSG_DOTASEASON_REWARDS__EREWARD_TYPE__EconItem, NULL, 0,0, 0,0 }


struct  _CMsgDOTASeasonRewards
{
  ProtobufCMessage base;
  size_t n_rewards;
  CMsgDOTASeasonRewards__Reward **rewards;
};
#define CMSG_DOTASEASON_REWARDS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotaseason_rewards__descriptor) \
    , 0,NULL }


struct  _CMsgDOTASeasonAchievements__Achievement
{
  ProtobufCMessage base;
  char *name;
  char *description;
  char *image;
  protobuf_c_boolean has_action_id;
  uint32_t action_id;
  protobuf_c_boolean has_max_grants;
  uint32_t max_grants;
  protobuf_c_boolean has_normal_points;
  uint32_t normal_points;
  protobuf_c_boolean has_tracking_achievement;
  uint32_t tracking_achievement;
  protobuf_c_boolean has_achievement_goal;
  uint32_t achievement_goal;
  protobuf_c_boolean has_achievement_level;
  uint32_t achievement_level;
};
#define CMSG_DOTASEASON_ACHIEVEMENTS__ACHIEVEMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotaseason_achievements__achievement__descriptor) \
    , NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgDOTASeasonAchievements
{
  ProtobufCMessage base;
  size_t n_achievements;
  CMsgDOTASeasonAchievements__Achievement **achievements;
};
#define CMSG_DOTASEASON_ACHIEVEMENTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotaseason_achievements__descriptor) \
    , 0,NULL }


struct  _CMsgDOTASeasonPredictions__Choice
{
  ProtobufCMessage base;
  protobuf_c_boolean has_value;
  uint32_t value;
  char *name;
  protobuf_c_boolean has_min_raw_value;
  uint32_t min_raw_value;
  protobuf_c_boolean has_max_raw_value;
  uint32_t max_raw_value;
};
#define CMSG_DOTASEASON_PREDICTIONS__CHOICE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotaseason_predictions__choice__descriptor) \
    , 0,0, NULL, 0,0, 0,0 }


struct  _CMsgDOTASeasonPredictions__Answers
{
  ProtobufCMessage base;
  size_t n_answer_id;
  uint32_t *answer_id;
};
#define CMSG_DOTASEASON_PREDICTIONS__ANSWERS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotaseason_predictions__answers__descriptor) \
    , 0,NULL }


struct  _CMsgDOTASeasonPredictions__QueryKeyValues
{
  ProtobufCMessage base;
  char *name;
  char *value;
};
#define CMSG_DOTASEASON_PREDICTIONS__QUERY_KEY_VALUES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotaseason_predictions__query_key_values__descriptor) \
    , NULL, NULL }


struct  _CMsgDOTASeasonPredictions__Prediction
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  CMsgDOTASeasonPredictions__EPredictionType type;
  char *question;
  size_t n_choices;
  CMsgDOTASeasonPredictions__Choice **choices;
  protobuf_c_boolean has_team_id;
  uint32_t team_id;
  protobuf_c_boolean has_series_id;
  uint32_t series_id;
  protobuf_c_boolean has_group_id;
  uint32_t group_id;
  protobuf_c_boolean has_phase_id;
  uint32_t phase_id;
  protobuf_c_boolean has_selection_id;
  uint32_t selection_id;
  protobuf_c_boolean has_lock_date;
  uint32_t lock_date;
  protobuf_c_boolean has_reward;
  uint32_t reward;
  protobuf_c_boolean has_answer_type;
  uint32_t answer_type;
  protobuf_c_boolean has_answer_id;
  uint32_t answer_id;
  size_t n_answers;
  CMsgDOTASeasonPredictions__Answers **answers;
  char *query_name;
  protobuf_c_boolean has_lock_on_selection_id;
  uint32_t lock_on_selection_id;
  protobuf_c_boolean has_lock_on_selection_value;
  uint32_t lock_on_selection_value;
  protobuf_c_boolean has_lock_on_selection_set;
  protobuf_c_boolean lock_on_selection_set;
};
#define CMSG_DOTASEASON_PREDICTIONS__PREDICTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotaseason_predictions__prediction__descriptor) \
    , 0,CMSG_DOTASEASON_PREDICTIONS__E_PREDICTION_TYPE__Generic, NULL, 0,NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL, NULL, 0,0, 0,0, 0,0 }


struct  _CMsgDOTASeasonPredictions__InGamePrediction
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  char *name;
  protobuf_c_boolean has_type;
  CMsgDOTASeasonPredictions__EPredictionType type;
  protobuf_c_boolean has_group;
  CMsgDOTASeasonPredictions__ERandomSelectionGroupT group;
  char *question;
  size_t n_choices;
  CMsgDOTASeasonPredictions__Choice **choices;
  size_t n_required_heroes;
  char **required_heroes;
  char *query_name;
  size_t n_query_values;
  CMsgDOTASeasonPredictions__QueryKeyValues **query_values;
  protobuf_c_boolean has_answer_resolution_type;
  CMsgDOTASeasonPredictions__EResolutionTypeT answer_resolution_type;
  protobuf_c_boolean has_points_to_grant;
  uint32_t points_to_grant;
  protobuf_c_boolean has_reward_action;
  uint32_t reward_action;
  protobuf_c_boolean has_debug_force_selection;
  uint32_t debug_force_selection;
  protobuf_c_boolean has_raw_value_type;
  CMsgDOTASeasonPredictions__ERawValueTypeT raw_value_type;
};
#define CMSG_DOTASEASON_PREDICTIONS__IN_GAME_PREDICTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotaseason_predictions__in_game_prediction__descriptor) \
    , 0,0, NULL, 0,CMSG_DOTASEASON_PREDICTIONS__E_PREDICTION_TYPE__Generic, 0,CMSG_DOTASEASON_PREDICTIONS__E_RANDOM_SELECTION_GROUP_T__EarlyGame, NULL, 0,NULL, 0,NULL, NULL, 0,NULL, 0,CMSG_DOTASEASON_PREDICTIONS__E_RESOLUTION_TYPE_T__InvalidQuery, 0,0, 0,0, 0,0, 0,CMSG_DOTASEASON_PREDICTIONS__E_RAW_VALUE_TYPE_T__Number }


struct  _CMsgDOTASeasonPredictions
{
  ProtobufCMessage base;
  size_t n_predictions;
  CMsgDOTASeasonPredictions__Prediction **predictions;
  size_t n_in_game_predictions;
  CMsgDOTASeasonPredictions__InGamePrediction **in_game_predictions;
  protobuf_c_boolean has_in_game_prediction_count_per_game;
  uint32_t in_game_prediction_count_per_game;
  protobuf_c_boolean has_in_game_prediction_voting_period_minutes;
  uint32_t in_game_prediction_voting_period_minutes;
};
#define CMSG_DOTASEASON_PREDICTIONS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotaseason_predictions__descriptor) \
    , 0,NULL, 0,NULL, 0,0, 0,0 }


struct  _CMsgDOTAMatch__Player__CustomGameData
{
  ProtobufCMessage base;
  protobuf_c_boolean has_dota_team;
  uint32_t dota_team;
  protobuf_c_boolean has_winner;
  protobuf_c_boolean winner;
};
#define CMSG_DOTAMATCH__PLAYER__CUSTOM_GAME_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotamatch__player__custom_game_data__descriptor) \
    , 0,0, 0,0 }


struct  _CMsgDOTAMatch__Player
{
  ProtobufCMessage base;
  protobuf_c_boolean has_account_id;
  uint32_t account_id;
  protobuf_c_boolean has_player_slot;
  uint32_t player_slot;
  protobuf_c_boolean has_hero_id;
  uint32_t hero_id;
  protobuf_c_boolean has_item_0;
  uint32_t item_0;
  protobuf_c_boolean has_item_1;
  uint32_t item_1;
  protobuf_c_boolean has_item_2;
  uint32_t item_2;
  protobuf_c_boolean has_item_3;
  uint32_t item_3;
  protobuf_c_boolean has_item_4;
  uint32_t item_4;
  protobuf_c_boolean has_item_5;
  uint32_t item_5;
  protobuf_c_boolean has_expected_team_contribution;
  float expected_team_contribution;
  protobuf_c_boolean has_scaled_metric;
  float scaled_metric;
  protobuf_c_boolean has_previous_rank;
  uint32_t previous_rank;
  protobuf_c_boolean has_rank_change;
  uint32_t rank_change;
  protobuf_c_boolean has_solo_rank;
  protobuf_c_boolean solo_rank;
  protobuf_c_boolean has_seasonal_rank;
  protobuf_c_boolean seasonal_rank;
  protobuf_c_boolean has_kills;
  uint32_t kills;
  protobuf_c_boolean has_deaths;
  uint32_t deaths;
  protobuf_c_boolean has_assists;
  uint32_t assists;
  protobuf_c_boolean has_leaver_status;
  uint32_t leaver_status;
  protobuf_c_boolean has_gold;
  uint32_t gold;
  protobuf_c_boolean has_last_hits;
  uint32_t last_hits;
  protobuf_c_boolean has_denies;
  uint32_t denies;
  protobuf_c_boolean has_gold_per_min;
  uint32_t gold_per_min;
  protobuf_c_boolean has_xp_per_min;
  uint32_t xp_per_min;
  protobuf_c_boolean has_gold_spent;
  uint32_t gold_spent;
  protobuf_c_boolean has_hero_damage;
  uint32_t hero_damage;
  protobuf_c_boolean has_tower_damage;
  uint32_t tower_damage;
  protobuf_c_boolean has_hero_healing;
  uint32_t hero_healing;
  protobuf_c_boolean has_level;
  uint32_t level;
  protobuf_c_boolean has_time_last_seen;
  uint32_t time_last_seen;
  char *player_name;
  protobuf_c_boolean has_support_ability_value;
  uint32_t support_ability_value;
  protobuf_c_boolean has_feeding_detected;
  protobuf_c_boolean feeding_detected;
  protobuf_c_boolean has_search_rank;
  uint32_t search_rank;
  protobuf_c_boolean has_search_rank_uncertainty;
  uint32_t search_rank_uncertainty;
  protobuf_c_boolean has_rank_uncertainty_change;
  int32_t rank_uncertainty_change;
  protobuf_c_boolean has_hero_play_count;
  uint32_t hero_play_count;
  protobuf_c_boolean has_party_id;
  uint64_t party_id;
  protobuf_c_boolean has_scaled_kills;
  float scaled_kills;
  protobuf_c_boolean has_scaled_deaths;
  float scaled_deaths;
  protobuf_c_boolean has_scaled_assists;
  float scaled_assists;
  protobuf_c_boolean has_claimed_farm_gold;
  uint32_t claimed_farm_gold;
  protobuf_c_boolean has_support_gold;
  uint32_t support_gold;
  protobuf_c_boolean has_claimed_denies;
  uint32_t claimed_denies;
  protobuf_c_boolean has_claimed_misses;
  uint32_t claimed_misses;
  protobuf_c_boolean has_misses;
  uint32_t misses;
  size_t n_ability_upgrades;
  CMatchPlayerAbilityUpgrade **ability_upgrades;
  size_t n_additional_units_inventory;
  CMatchAdditionalUnitInventory **additional_units_inventory;
  CMsgDOTAMatch__Player__CustomGameData *custom_game_data;
  protobuf_c_boolean has_active_battle_pass;
  protobuf_c_boolean active_battle_pass;
  protobuf_c_boolean has_net_worth;
  uint32_t net_worth;
};
#define CMSG_DOTAMATCH__PLAYER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotamatch__player__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,NULL, NULL, 0,0, 0,0 }


struct  _CMsgDOTAMatch__BroadcasterInfo
{
  ProtobufCMessage base;
  protobuf_c_boolean has_account_id;
  uint32_t account_id;
  char *name;
};
#define CMSG_DOTAMATCH__BROADCASTER_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotamatch__broadcaster_info__descriptor) \
    , 0,0, NULL }


struct  _CMsgDOTAMatch__BroadcasterChannel
{
  ProtobufCMessage base;
  char *country_code;
  char *description;
  size_t n_broadcaster_infos;
  CMsgDOTAMatch__BroadcasterInfo **broadcaster_infos;
  char *language_code;
};
#define CMSG_DOTAMATCH__BROADCASTER_CHANNEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotamatch__broadcaster_channel__descriptor) \
    , NULL, NULL, 0,NULL, NULL }


struct  _CMsgDOTAMatch__CustomGameData
{
  ProtobufCMessage base;
  protobuf_c_boolean has_custom_game_id;
  uint64_t custom_game_id;
  char *map_name;
};
#define CMSG_DOTAMATCH__CUSTOM_GAME_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotamatch__custom_game_data__descriptor) \
    , 0,0, NULL }


struct  _CMsgDOTAMatch
{
  ProtobufCMessage base;
  protobuf_c_boolean has_duration;
  uint32_t duration;
  protobuf_c_boolean has_starttime;
  uint32_t starttime;
  size_t n_players;
  CMsgDOTAMatch__Player **players;
  protobuf_c_boolean has_match_id;
  uint64_t match_id;
  size_t n_tower_status;
  uint32_t *tower_status;
  size_t n_barracks_status;
  uint32_t *barracks_status;
  protobuf_c_boolean has_cluster;
  uint32_t cluster;
  protobuf_c_boolean has_first_blood_time;
  uint32_t first_blood_time;
  protobuf_c_boolean has_replay_salt;
  uint32_t replay_salt;
  protobuf_c_boolean has_server_ip;
  uint32_t server_ip;
  protobuf_c_boolean has_server_port;
  uint32_t server_port;
  protobuf_c_boolean has_lobby_type;
  uint32_t lobby_type;
  protobuf_c_boolean has_human_players;
  uint32_t human_players;
  protobuf_c_boolean has_average_skill;
  uint32_t average_skill;
  protobuf_c_boolean has_game_balance;
  float game_balance;
  protobuf_c_boolean has_radiant_team_id;
  uint32_t radiant_team_id;
  protobuf_c_boolean has_dire_team_id;
  uint32_t dire_team_id;
  protobuf_c_boolean has_leagueid;
  uint32_t leagueid;
  char *radiant_team_name;
  char *dire_team_name;
  protobuf_c_boolean has_radiant_team_logo;
  uint64_t radiant_team_logo;
  protobuf_c_boolean has_dire_team_logo;
  uint64_t dire_team_logo;
  protobuf_c_boolean has_radiant_team_complete;
  uint32_t radiant_team_complete;
  protobuf_c_boolean has_dire_team_complete;
  uint32_t dire_team_complete;
  protobuf_c_boolean has_positive_votes;
  uint32_t positive_votes;
  protobuf_c_boolean has_negative_votes;
  uint32_t negative_votes;
  protobuf_c_boolean has_game_mode;
  DOTAGameMode game_mode;
  size_t n_picks_bans;
  CMatchHeroSelectEvent **picks_bans;
  protobuf_c_boolean has_match_seq_num;
  uint64_t match_seq_num;
  protobuf_c_boolean has_replay_state;
  CMsgDOTAMatch__ReplayState replay_state;
  protobuf_c_boolean has_radiant_guild_id;
  uint32_t radiant_guild_id;
  protobuf_c_boolean has_dire_guild_id;
  uint32_t dire_guild_id;
  char *radiant_team_tag;
  char *dire_team_tag;
  protobuf_c_boolean has_series_id;
  uint32_t series_id;
  protobuf_c_boolean has_series_type;
  uint32_t series_type;
  size_t n_broadcaster_channels;
  CMsgDOTAMatch__BroadcasterChannel **broadcaster_channels;
  protobuf_c_boolean has_engine;
  uint32_t engine;
  CMsgDOTAMatch__CustomGameData *custom_game_data;
  protobuf_c_boolean has_match_flags;
  uint32_t match_flags;
  protobuf_c_boolean has_private_metadata_key;
  uint32_t private_metadata_key;
  protobuf_c_boolean has_radiant_team_score;
  uint32_t radiant_team_score;
  protobuf_c_boolean has_dire_team_score;
  uint32_t dire_team_score;
  protobuf_c_boolean has_match_outcome;
  EMatchOutcome match_outcome;
  protobuf_c_boolean has_tournament_id;
  uint32_t tournament_id;
  protobuf_c_boolean has_tournament_round;
  uint32_t tournament_round;
  protobuf_c_boolean has_pre_game_duration;
  uint32_t pre_game_duration;
};
#define CMSG_DOTAMATCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotamatch__descriptor) \
    , 0,0, 0,0, 0,NULL, 0,0, 0,NULL, 0,NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,DOTA__GAME_MODE__DOTA_GAMEMODE_NONE, 0,NULL, 0,0, 0,CMSG_DOTAMATCH__REPLAY_STATE__REPLAY_AVAILABLE, 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,NULL, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,EMATCH_OUTCOME__k_EMatchOutcome_Unknown, 0,0, 0,0, 0,0 }


struct  _CMsgPlayerCard__StatModifier
{
  ProtobufCMessage base;
  protobuf_c_boolean has_stat;
  uint32_t stat;
  protobuf_c_boolean has_value;
  uint32_t value;
};
#define CMSG_PLAYER_CARD__STAT_MODIFIER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_player_card__stat_modifier__descriptor) \
    , 0,0, 0,0 }


struct  _CMsgPlayerCard
{
  ProtobufCMessage base;
  protobuf_c_boolean has_account_id;
  uint32_t account_id;
  size_t n_stat_modifier;
  CMsgPlayerCard__StatModifier **stat_modifier;
};
#define CMSG_PLAYER_CARD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_player_card__descriptor) \
    , 0,0, 0,NULL }


/* CSODOTAGameAccountClient methods */
void   csodotagame_account_client__init
                     (CSODOTAGameAccountClient         *message);
size_t csodotagame_account_client__get_packed_size
                     (const CSODOTAGameAccountClient   *message);
size_t csodotagame_account_client__pack
                     (const CSODOTAGameAccountClient   *message,
                      uint8_t             *out);
size_t csodotagame_account_client__pack_to_buffer
                     (const CSODOTAGameAccountClient   *message,
                      ProtobufCBuffer     *buffer);
CSODOTAGameAccountClient *
       csodotagame_account_client__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csodotagame_account_client__free_unpacked
                     (CSODOTAGameAccountClient *message,
                      ProtobufCAllocator *allocator);
/* CMsgLobbyEventPoints__AccountPoints methods */
void   cmsg_lobby_event_points__account_points__init
                     (CMsgLobbyEventPoints__AccountPoints         *message);
/* CMsgLobbyEventPoints methods */
void   cmsg_lobby_event_points__init
                     (CMsgLobbyEventPoints         *message);
size_t cmsg_lobby_event_points__get_packed_size
                     (const CMsgLobbyEventPoints   *message);
size_t cmsg_lobby_event_points__pack
                     (const CMsgLobbyEventPoints   *message,
                      uint8_t             *out);
size_t cmsg_lobby_event_points__pack_to_buffer
                     (const CMsgLobbyEventPoints   *message,
                      ProtobufCBuffer     *buffer);
CMsgLobbyEventPoints *
       cmsg_lobby_event_points__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_lobby_event_points__free_unpacked
                     (CMsgLobbyEventPoints *message,
                      ProtobufCAllocator *allocator);
/* CMsgLobbyBattleCupVictory__BattleCupVictory methods */
void   cmsg_lobby_battle_cup_victory__battle_cup_victory__init
                     (CMsgLobbyBattleCupVictory__BattleCupVictory         *message);
/* CMsgLobbyBattleCupVictory methods */
void   cmsg_lobby_battle_cup_victory__init
                     (CMsgLobbyBattleCupVictory         *message);
size_t cmsg_lobby_battle_cup_victory__get_packed_size
                     (const CMsgLobbyBattleCupVictory   *message);
size_t cmsg_lobby_battle_cup_victory__pack
                     (const CMsgLobbyBattleCupVictory   *message,
                      uint8_t             *out);
size_t cmsg_lobby_battle_cup_victory__pack_to_buffer
                     (const CMsgLobbyBattleCupVictory   *message,
                      ProtobufCBuffer     *buffer);
CMsgLobbyBattleCupVictory *
       cmsg_lobby_battle_cup_victory__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_lobby_battle_cup_victory__free_unpacked
                     (CMsgLobbyBattleCupVictory *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTABroadcastNotification methods */
void   cmsg_dotabroadcast_notification__init
                     (CMsgDOTABroadcastNotification         *message);
size_t cmsg_dotabroadcast_notification__get_packed_size
                     (const CMsgDOTABroadcastNotification   *message);
size_t cmsg_dotabroadcast_notification__pack
                     (const CMsgDOTABroadcastNotification   *message,
                      uint8_t             *out);
size_t cmsg_dotabroadcast_notification__pack_to_buffer
                     (const CMsgDOTABroadcastNotification   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTABroadcastNotification *
       cmsg_dotabroadcast_notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotabroadcast_notification__free_unpacked
                     (CMsgDOTABroadcastNotification *message,
                      ProtobufCAllocator *allocator);
/* CProtoItemHeroStatue methods */
void   cproto_item_hero_statue__init
                     (CProtoItemHeroStatue         *message);
size_t cproto_item_hero_statue__get_packed_size
                     (const CProtoItemHeroStatue   *message);
size_t cproto_item_hero_statue__pack
                     (const CProtoItemHeroStatue   *message,
                      uint8_t             *out);
size_t cproto_item_hero_statue__pack_to_buffer
                     (const CProtoItemHeroStatue   *message,
                      ProtobufCBuffer     *buffer);
CProtoItemHeroStatue *
       cproto_item_hero_statue__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cproto_item_hero_statue__free_unpacked
                     (CProtoItemHeroStatue *message,
                      ProtobufCAllocator *allocator);
/* CProtoItemTeamShowcase methods */
void   cproto_item_team_showcase__init
                     (CProtoItemTeamShowcase         *message);
size_t cproto_item_team_showcase__get_packed_size
                     (const CProtoItemTeamShowcase   *message);
size_t cproto_item_team_showcase__pack
                     (const CProtoItemTeamShowcase   *message,
                      uint8_t             *out);
size_t cproto_item_team_showcase__pack_to_buffer
                     (const CProtoItemTeamShowcase   *message,
                      ProtobufCBuffer     *buffer);
CProtoItemTeamShowcase *
       cproto_item_team_showcase__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cproto_item_team_showcase__free_unpacked
                     (CProtoItemTeamShowcase *message,
                      ProtobufCAllocator *allocator);
/* CMatchPlayerAbilityUpgrade methods */
void   cmatch_player_ability_upgrade__init
                     (CMatchPlayerAbilityUpgrade         *message);
size_t cmatch_player_ability_upgrade__get_packed_size
                     (const CMatchPlayerAbilityUpgrade   *message);
size_t cmatch_player_ability_upgrade__pack
                     (const CMatchPlayerAbilityUpgrade   *message,
                      uint8_t             *out);
size_t cmatch_player_ability_upgrade__pack_to_buffer
                     (const CMatchPlayerAbilityUpgrade   *message,
                      ProtobufCBuffer     *buffer);
CMatchPlayerAbilityUpgrade *
       cmatch_player_ability_upgrade__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmatch_player_ability_upgrade__free_unpacked
                     (CMatchPlayerAbilityUpgrade *message,
                      ProtobufCAllocator *allocator);
/* CMatchAdditionalUnitInventory methods */
void   cmatch_additional_unit_inventory__init
                     (CMatchAdditionalUnitInventory         *message);
size_t cmatch_additional_unit_inventory__get_packed_size
                     (const CMatchAdditionalUnitInventory   *message);
size_t cmatch_additional_unit_inventory__pack
                     (const CMatchAdditionalUnitInventory   *message,
                      uint8_t             *out);
size_t cmatch_additional_unit_inventory__pack_to_buffer
                     (const CMatchAdditionalUnitInventory   *message,
                      ProtobufCBuffer     *buffer);
CMatchAdditionalUnitInventory *
       cmatch_additional_unit_inventory__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmatch_additional_unit_inventory__free_unpacked
                     (CMatchAdditionalUnitInventory *message,
                      ProtobufCAllocator *allocator);
/* CMatchHeroSelectEvent methods */
void   cmatch_hero_select_event__init
                     (CMatchHeroSelectEvent         *message);
size_t cmatch_hero_select_event__get_packed_size
                     (const CMatchHeroSelectEvent   *message);
size_t cmatch_hero_select_event__pack
                     (const CMatchHeroSelectEvent   *message,
                      uint8_t             *out);
size_t cmatch_hero_select_event__pack_to_buffer
                     (const CMatchHeroSelectEvent   *message,
                      ProtobufCBuffer     *buffer);
CMatchHeroSelectEvent *
       cmatch_hero_select_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmatch_hero_select_event__free_unpacked
                     (CMatchHeroSelectEvent *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTAProcessFantasyScheduledEvent methods */
void   cmsg_dotaprocess_fantasy_scheduled_event__init
                     (CMsgDOTAProcessFantasyScheduledEvent         *message);
size_t cmsg_dotaprocess_fantasy_scheduled_event__get_packed_size
                     (const CMsgDOTAProcessFantasyScheduledEvent   *message);
size_t cmsg_dotaprocess_fantasy_scheduled_event__pack
                     (const CMsgDOTAProcessFantasyScheduledEvent   *message,
                      uint8_t             *out);
size_t cmsg_dotaprocess_fantasy_scheduled_event__pack_to_buffer
                     (const CMsgDOTAProcessFantasyScheduledEvent   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTAProcessFantasyScheduledEvent *
       cmsg_dotaprocess_fantasy_scheduled_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotaprocess_fantasy_scheduled_event__free_unpacked
                     (CMsgDOTAProcessFantasyScheduledEvent *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTAHasItemQuery methods */
void   cmsg_dotahas_item_query__init
                     (CMsgDOTAHasItemQuery         *message);
size_t cmsg_dotahas_item_query__get_packed_size
                     (const CMsgDOTAHasItemQuery   *message);
size_t cmsg_dotahas_item_query__pack
                     (const CMsgDOTAHasItemQuery   *message,
                      uint8_t             *out);
size_t cmsg_dotahas_item_query__pack_to_buffer
                     (const CMsgDOTAHasItemQuery   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTAHasItemQuery *
       cmsg_dotahas_item_query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotahas_item_query__free_unpacked
                     (CMsgDOTAHasItemQuery *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTAHasItemResponse methods */
void   cmsg_dotahas_item_response__init
                     (CMsgDOTAHasItemResponse         *message);
size_t cmsg_dotahas_item_response__get_packed_size
                     (const CMsgDOTAHasItemResponse   *message);
size_t cmsg_dotahas_item_response__pack
                     (const CMsgDOTAHasItemResponse   *message,
                      uint8_t             *out);
size_t cmsg_dotahas_item_response__pack_to_buffer
                     (const CMsgDOTAHasItemResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTAHasItemResponse *
       cmsg_dotahas_item_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotahas_item_response__free_unpacked
                     (CMsgDOTAHasItemResponse *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTAHasItemDefsQuery methods */
void   cmsg_dotahas_item_defs_query__init
                     (CMsgDOTAHasItemDefsQuery         *message);
size_t cmsg_dotahas_item_defs_query__get_packed_size
                     (const CMsgDOTAHasItemDefsQuery   *message);
size_t cmsg_dotahas_item_defs_query__pack
                     (const CMsgDOTAHasItemDefsQuery   *message,
                      uint8_t             *out);
size_t cmsg_dotahas_item_defs_query__pack_to_buffer
                     (const CMsgDOTAHasItemDefsQuery   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTAHasItemDefsQuery *
       cmsg_dotahas_item_defs_query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotahas_item_defs_query__free_unpacked
                     (CMsgDOTAHasItemDefsQuery *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTAHasItemDefsResponse methods */
void   cmsg_dotahas_item_defs_response__init
                     (CMsgDOTAHasItemDefsResponse         *message);
size_t cmsg_dotahas_item_defs_response__get_packed_size
                     (const CMsgDOTAHasItemDefsResponse   *message);
size_t cmsg_dotahas_item_defs_response__pack
                     (const CMsgDOTAHasItemDefsResponse   *message,
                      uint8_t             *out);
size_t cmsg_dotahas_item_defs_response__pack_to_buffer
                     (const CMsgDOTAHasItemDefsResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTAHasItemDefsResponse *
       cmsg_dotahas_item_defs_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotahas_item_defs_response__free_unpacked
                     (CMsgDOTAHasItemDefsResponse *message,
                      ProtobufCAllocator *allocator);
/* CMsgGCToGCFantasySetMatchLeague methods */
void   cmsg_gcto_gcfantasy_set_match_league__init
                     (CMsgGCToGCFantasySetMatchLeague         *message);
size_t cmsg_gcto_gcfantasy_set_match_league__get_packed_size
                     (const CMsgGCToGCFantasySetMatchLeague   *message);
size_t cmsg_gcto_gcfantasy_set_match_league__pack
                     (const CMsgGCToGCFantasySetMatchLeague   *message,
                      uint8_t             *out);
size_t cmsg_gcto_gcfantasy_set_match_league__pack_to_buffer
                     (const CMsgGCToGCFantasySetMatchLeague   *message,
                      ProtobufCBuffer     *buffer);
CMsgGCToGCFantasySetMatchLeague *
       cmsg_gcto_gcfantasy_set_match_league__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_gcto_gcfantasy_set_match_league__free_unpacked
                     (CMsgGCToGCFantasySetMatchLeague *message,
                      ProtobufCAllocator *allocator);
/* CSODOTAMapLocationState methods */
void   csodotamap_location_state__init
                     (CSODOTAMapLocationState         *message);
size_t csodotamap_location_state__get_packed_size
                     (const CSODOTAMapLocationState   *message);
size_t csodotamap_location_state__pack
                     (const CSODOTAMapLocationState   *message,
                      uint8_t             *out);
size_t csodotamap_location_state__pack_to_buffer
                     (const CSODOTAMapLocationState   *message,
                      ProtobufCBuffer     *buffer);
CSODOTAMapLocationState *
       csodotamap_location_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csodotamap_location_state__free_unpacked
                     (CSODOTAMapLocationState *message,
                      ProtobufCAllocator *allocator);
/* CMsgLeagueAdminList methods */
void   cmsg_league_admin_list__init
                     (CMsgLeagueAdminList         *message);
size_t cmsg_league_admin_list__get_packed_size
                     (const CMsgLeagueAdminList   *message);
size_t cmsg_league_admin_list__pack
                     (const CMsgLeagueAdminList   *message,
                      uint8_t             *out);
size_t cmsg_league_admin_list__pack_to_buffer
                     (const CMsgLeagueAdminList   *message,
                      ProtobufCBuffer     *buffer);
CMsgLeagueAdminList *
       cmsg_league_admin_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_league_admin_list__free_unpacked
                     (CMsgLeagueAdminList *message,
                      ProtobufCAllocator *allocator);
/* CCompendiumTimestampedData methods */
void   ccompendium_timestamped_data__init
                     (CCompendiumTimestampedData         *message);
size_t ccompendium_timestamped_data__get_packed_size
                     (const CCompendiumTimestampedData   *message);
size_t ccompendium_timestamped_data__pack
                     (const CCompendiumTimestampedData   *message,
                      uint8_t             *out);
size_t ccompendium_timestamped_data__pack_to_buffer
                     (const CCompendiumTimestampedData   *message,
                      ProtobufCBuffer     *buffer);
CCompendiumTimestampedData *
       ccompendium_timestamped_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ccompendium_timestamped_data__free_unpacked
                     (CCompendiumTimestampedData *message,
                      ProtobufCAllocator *allocator);
/* CCompendiumGameTimeline methods */
void   ccompendium_game_timeline__init
                     (CCompendiumGameTimeline         *message);
size_t ccompendium_game_timeline__get_packed_size
                     (const CCompendiumGameTimeline   *message);
size_t ccompendium_game_timeline__pack
                     (const CCompendiumGameTimeline   *message,
                      uint8_t             *out);
size_t ccompendium_game_timeline__pack_to_buffer
                     (const CCompendiumGameTimeline   *message,
                      ProtobufCBuffer     *buffer);
CCompendiumGameTimeline *
       ccompendium_game_timeline__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ccompendium_game_timeline__free_unpacked
                     (CCompendiumGameTimeline *message,
                      ProtobufCAllocator *allocator);
/* CCompendiumGameList methods */
void   ccompendium_game_list__init
                     (CCompendiumGameList         *message);
size_t ccompendium_game_list__get_packed_size
                     (const CCompendiumGameList   *message);
size_t ccompendium_game_list__pack
                     (const CCompendiumGameList   *message,
                      uint8_t             *out);
size_t ccompendium_game_list__pack_to_buffer
                     (const CCompendiumGameList   *message,
                      ProtobufCBuffer     *buffer);
CCompendiumGameList *
       ccompendium_game_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ccompendium_game_list__free_unpacked
                     (CCompendiumGameList *message,
                      ProtobufCAllocator *allocator);
/* CAdditionalEquipSlot methods */
void   cadditional_equip_slot__init
                     (CAdditionalEquipSlot         *message);
size_t cadditional_equip_slot__get_packed_size
                     (const CAdditionalEquipSlot   *message);
size_t cadditional_equip_slot__pack
                     (const CAdditionalEquipSlot   *message,
                      uint8_t             *out);
size_t cadditional_equip_slot__pack_to_buffer
                     (const CAdditionalEquipSlot   *message,
                      ProtobufCBuffer     *buffer);
CAdditionalEquipSlot *
       cadditional_equip_slot__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cadditional_equip_slot__free_unpacked
                     (CAdditionalEquipSlot *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTACombatLogEntry methods */
void   cmsg_dotacombat_log_entry__init
                     (CMsgDOTACombatLogEntry         *message);
size_t cmsg_dotacombat_log_entry__get_packed_size
                     (const CMsgDOTACombatLogEntry   *message);
size_t cmsg_dotacombat_log_entry__pack
                     (const CMsgDOTACombatLogEntry   *message,
                      uint8_t             *out);
size_t cmsg_dotacombat_log_entry__pack_to_buffer
                     (const CMsgDOTACombatLogEntry   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTACombatLogEntry *
       cmsg_dotacombat_log_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotacombat_log_entry__free_unpacked
                     (CMsgDOTACombatLogEntry *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTAProfileCard__Slot__Trophy methods */
void   cmsg_dotaprofile_card__slot__trophy__init
                     (CMsgDOTAProfileCard__Slot__Trophy         *message);
/* CMsgDOTAProfileCard__Slot__Stat methods */
void   cmsg_dotaprofile_card__slot__stat__init
                     (CMsgDOTAProfileCard__Slot__Stat         *message);
/* CMsgDOTAProfileCard__Slot__Item methods */
void   cmsg_dotaprofile_card__slot__item__init
                     (CMsgDOTAProfileCard__Slot__Item         *message);
/* CMsgDOTAProfileCard__Slot__Hero methods */
void   cmsg_dotaprofile_card__slot__hero__init
                     (CMsgDOTAProfileCard__Slot__Hero         *message);
/* CMsgDOTAProfileCard__Slot__Emoticon methods */
void   cmsg_dotaprofile_card__slot__emoticon__init
                     (CMsgDOTAProfileCard__Slot__Emoticon         *message);
/* CMsgDOTAProfileCard__Slot methods */
void   cmsg_dotaprofile_card__slot__init
                     (CMsgDOTAProfileCard__Slot         *message);
/* CMsgDOTAProfileCard methods */
void   cmsg_dotaprofile_card__init
                     (CMsgDOTAProfileCard         *message);
size_t cmsg_dotaprofile_card__get_packed_size
                     (const CMsgDOTAProfileCard   *message);
size_t cmsg_dotaprofile_card__pack
                     (const CMsgDOTAProfileCard   *message,
                      uint8_t             *out);
size_t cmsg_dotaprofile_card__pack_to_buffer
                     (const CMsgDOTAProfileCard   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTAProfileCard *
       cmsg_dotaprofile_card__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotaprofile_card__free_unpacked
                     (CMsgDOTAProfileCard *message,
                      ProtobufCAllocator *allocator);
/* CSODOTAPlayerChallenge methods */
void   csodotaplayer_challenge__init
                     (CSODOTAPlayerChallenge         *message);
size_t csodotaplayer_challenge__get_packed_size
                     (const CSODOTAPlayerChallenge   *message);
size_t csodotaplayer_challenge__pack
                     (const CSODOTAPlayerChallenge   *message,
                      uint8_t             *out);
size_t csodotaplayer_challenge__pack_to_buffer
                     (const CSODOTAPlayerChallenge   *message,
                      ProtobufCBuffer     *buffer);
CSODOTAPlayerChallenge *
       csodotaplayer_challenge__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csodotaplayer_challenge__free_unpacked
                     (CSODOTAPlayerChallenge *message,
                      ProtobufCAllocator *allocator);
/* CMsgClientToGCRerollPlayerChallenge methods */
void   cmsg_client_to_gcreroll_player_challenge__init
                     (CMsgClientToGCRerollPlayerChallenge         *message);
size_t cmsg_client_to_gcreroll_player_challenge__get_packed_size
                     (const CMsgClientToGCRerollPlayerChallenge   *message);
size_t cmsg_client_to_gcreroll_player_challenge__pack
                     (const CMsgClientToGCRerollPlayerChallenge   *message,
                      uint8_t             *out);
size_t cmsg_client_to_gcreroll_player_challenge__pack_to_buffer
                     (const CMsgClientToGCRerollPlayerChallenge   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientToGCRerollPlayerChallenge *
       cmsg_client_to_gcreroll_player_challenge__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_to_gcreroll_player_challenge__free_unpacked
                     (CMsgClientToGCRerollPlayerChallenge *message,
                      ProtobufCAllocator *allocator);
/* CMsgGCRerollPlayerChallengeResponse methods */
void   cmsg_gcreroll_player_challenge_response__init
                     (CMsgGCRerollPlayerChallengeResponse         *message);
size_t cmsg_gcreroll_player_challenge_response__get_packed_size
                     (const CMsgGCRerollPlayerChallengeResponse   *message);
size_t cmsg_gcreroll_player_challenge_response__pack
                     (const CMsgGCRerollPlayerChallengeResponse   *message,
                      uint8_t             *out);
size_t cmsg_gcreroll_player_challenge_response__pack_to_buffer
                     (const CMsgGCRerollPlayerChallengeResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgGCRerollPlayerChallengeResponse *
       cmsg_gcreroll_player_challenge_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_gcreroll_player_challenge_response__free_unpacked
                     (CMsgGCRerollPlayerChallengeResponse *message,
                      ProtobufCAllocator *allocator);
/* CMsgGCTopCustomGamesList methods */
void   cmsg_gctop_custom_games_list__init
                     (CMsgGCTopCustomGamesList         *message);
size_t cmsg_gctop_custom_games_list__get_packed_size
                     (const CMsgGCTopCustomGamesList   *message);
size_t cmsg_gctop_custom_games_list__pack
                     (const CMsgGCTopCustomGamesList   *message,
                      uint8_t             *out);
size_t cmsg_gctop_custom_games_list__pack_to_buffer
                     (const CMsgGCTopCustomGamesList   *message,
                      ProtobufCBuffer     *buffer);
CMsgGCTopCustomGamesList *
       cmsg_gctop_custom_games_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_gctop_custom_games_list__free_unpacked
                     (CMsgGCTopCustomGamesList *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTARealtimeGameStats__TeamDetails methods */
void   cmsg_dotarealtime_game_stats__team_details__init
                     (CMsgDOTARealtimeGameStats__TeamDetails         *message);
/* CMsgDOTARealtimeGameStats__ItemDetails methods */
void   cmsg_dotarealtime_game_stats__item_details__init
                     (CMsgDOTARealtimeGameStats__ItemDetails         *message);
/* CMsgDOTARealtimeGameStats__AbilityDetails methods */
void   cmsg_dotarealtime_game_stats__ability_details__init
                     (CMsgDOTARealtimeGameStats__AbilityDetails         *message);
/* CMsgDOTARealtimeGameStats__HeroToHeroStats methods */
void   cmsg_dotarealtime_game_stats__hero_to_hero_stats__init
                     (CMsgDOTARealtimeGameStats__HeroToHeroStats         *message);
/* CMsgDOTARealtimeGameStats__AbilityList methods */
void   cmsg_dotarealtime_game_stats__ability_list__init
                     (CMsgDOTARealtimeGameStats__AbilityList         *message);
/* CMsgDOTARealtimeGameStats__PlayerDetails methods */
void   cmsg_dotarealtime_game_stats__player_details__init
                     (CMsgDOTARealtimeGameStats__PlayerDetails         *message);
/* CMsgDOTARealtimeGameStats__BuildingDetails methods */
void   cmsg_dotarealtime_game_stats__building_details__init
                     (CMsgDOTARealtimeGameStats__BuildingDetails         *message);
/* CMsgDOTARealtimeGameStats__KillDetails methods */
void   cmsg_dotarealtime_game_stats__kill_details__init
                     (CMsgDOTARealtimeGameStats__KillDetails         *message);
/* CMsgDOTARealtimeGameStats__BroadcasterDetails methods */
void   cmsg_dotarealtime_game_stats__broadcaster_details__init
                     (CMsgDOTARealtimeGameStats__BroadcasterDetails         *message);
/* CMsgDOTARealtimeGameStats__PickBanDetails methods */
void   cmsg_dotarealtime_game_stats__pick_ban_details__init
                     (CMsgDOTARealtimeGameStats__PickBanDetails         *message);
/* CMsgDOTARealtimeGameStats__MatchDetails methods */
void   cmsg_dotarealtime_game_stats__match_details__init
                     (CMsgDOTARealtimeGameStats__MatchDetails         *message);
/* CMsgDOTARealtimeGameStats__GraphData__LocationStats methods */
void   cmsg_dotarealtime_game_stats__graph_data__location_stats__init
                     (CMsgDOTARealtimeGameStats__GraphData__LocationStats         *message);
/* CMsgDOTARealtimeGameStats__GraphData__TeamLocationStats methods */
void   cmsg_dotarealtime_game_stats__graph_data__team_location_stats__init
                     (CMsgDOTARealtimeGameStats__GraphData__TeamLocationStats         *message);
/* CMsgDOTARealtimeGameStats__GraphData methods */
void   cmsg_dotarealtime_game_stats__graph_data__init
                     (CMsgDOTARealtimeGameStats__GraphData         *message);
/* CMsgDOTARealtimeGameStats methods */
void   cmsg_dotarealtime_game_stats__init
                     (CMsgDOTARealtimeGameStats         *message);
size_t cmsg_dotarealtime_game_stats__get_packed_size
                     (const CMsgDOTARealtimeGameStats   *message);
size_t cmsg_dotarealtime_game_stats__pack
                     (const CMsgDOTARealtimeGameStats   *message,
                      uint8_t             *out);
size_t cmsg_dotarealtime_game_stats__pack_to_buffer
                     (const CMsgDOTARealtimeGameStats   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTARealtimeGameStats *
       cmsg_dotarealtime_game_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotarealtime_game_stats__free_unpacked
                     (CMsgDOTARealtimeGameStats *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTARealtimeGameStatsTerse__TeamDetails methods */
void   cmsg_dotarealtime_game_stats_terse__team_details__init
                     (CMsgDOTARealtimeGameStatsTerse__TeamDetails         *message);
/* CMsgDOTARealtimeGameStatsTerse__PlayerDetails methods */
void   cmsg_dotarealtime_game_stats_terse__player_details__init
                     (CMsgDOTARealtimeGameStatsTerse__PlayerDetails         *message);
/* CMsgDOTARealtimeGameStatsTerse__BuildingDetails methods */
void   cmsg_dotarealtime_game_stats_terse__building_details__init
                     (CMsgDOTARealtimeGameStatsTerse__BuildingDetails         *message);
/* CMsgDOTARealtimeGameStatsTerse__MatchDetails methods */
void   cmsg_dotarealtime_game_stats_terse__match_details__init
                     (CMsgDOTARealtimeGameStatsTerse__MatchDetails         *message);
/* CMsgDOTARealtimeGameStatsTerse__GraphData methods */
void   cmsg_dotarealtime_game_stats_terse__graph_data__init
                     (CMsgDOTARealtimeGameStatsTerse__GraphData         *message);
/* CMsgDOTARealtimeGameStatsTerse methods */
void   cmsg_dotarealtime_game_stats_terse__init
                     (CMsgDOTARealtimeGameStatsTerse         *message);
size_t cmsg_dotarealtime_game_stats_terse__get_packed_size
                     (const CMsgDOTARealtimeGameStatsTerse   *message);
size_t cmsg_dotarealtime_game_stats_terse__pack
                     (const CMsgDOTARealtimeGameStatsTerse   *message,
                      uint8_t             *out);
size_t cmsg_dotarealtime_game_stats_terse__pack_to_buffer
                     (const CMsgDOTARealtimeGameStatsTerse   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTARealtimeGameStatsTerse *
       cmsg_dotarealtime_game_stats_terse__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotarealtime_game_stats_terse__free_unpacked
                     (CMsgDOTARealtimeGameStatsTerse *message,
                      ProtobufCAllocator *allocator);
/* CMsgGCToClientMatchGroupsVersion methods */
void   cmsg_gcto_client_match_groups_version__init
                     (CMsgGCToClientMatchGroupsVersion         *message);
size_t cmsg_gcto_client_match_groups_version__get_packed_size
                     (const CMsgGCToClientMatchGroupsVersion   *message);
size_t cmsg_gcto_client_match_groups_version__pack
                     (const CMsgGCToClientMatchGroupsVersion   *message,
                      uint8_t             *out);
size_t cmsg_gcto_client_match_groups_version__pack_to_buffer
                     (const CMsgGCToClientMatchGroupsVersion   *message,
                      ProtobufCBuffer     *buffer);
CMsgGCToClientMatchGroupsVersion *
       cmsg_gcto_client_match_groups_version__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_gcto_client_match_groups_version__free_unpacked
                     (CMsgGCToClientMatchGroupsVersion *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTASDOHeroStatsHistory methods */
void   cmsg_dotasdohero_stats_history__init
                     (CMsgDOTASDOHeroStatsHistory         *message);
size_t cmsg_dotasdohero_stats_history__get_packed_size
                     (const CMsgDOTASDOHeroStatsHistory   *message);
size_t cmsg_dotasdohero_stats_history__pack
                     (const CMsgDOTASDOHeroStatsHistory   *message,
                      uint8_t             *out);
size_t cmsg_dotasdohero_stats_history__pack_to_buffer
                     (const CMsgDOTASDOHeroStatsHistory   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTASDOHeroStatsHistory *
       cmsg_dotasdohero_stats_history__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotasdohero_stats_history__free_unpacked
                     (CMsgDOTASDOHeroStatsHistory *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTASeasonRewards__Reward methods */
void   cmsg_dotaseason_rewards__reward__init
                     (CMsgDOTASeasonRewards__Reward         *message);
/* CMsgDOTASeasonRewards methods */
void   cmsg_dotaseason_rewards__init
                     (CMsgDOTASeasonRewards         *message);
size_t cmsg_dotaseason_rewards__get_packed_size
                     (const CMsgDOTASeasonRewards   *message);
size_t cmsg_dotaseason_rewards__pack
                     (const CMsgDOTASeasonRewards   *message,
                      uint8_t             *out);
size_t cmsg_dotaseason_rewards__pack_to_buffer
                     (const CMsgDOTASeasonRewards   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTASeasonRewards *
       cmsg_dotaseason_rewards__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotaseason_rewards__free_unpacked
                     (CMsgDOTASeasonRewards *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTASeasonAchievements__Achievement methods */
void   cmsg_dotaseason_achievements__achievement__init
                     (CMsgDOTASeasonAchievements__Achievement         *message);
/* CMsgDOTASeasonAchievements methods */
void   cmsg_dotaseason_achievements__init
                     (CMsgDOTASeasonAchievements         *message);
size_t cmsg_dotaseason_achievements__get_packed_size
                     (const CMsgDOTASeasonAchievements   *message);
size_t cmsg_dotaseason_achievements__pack
                     (const CMsgDOTASeasonAchievements   *message,
                      uint8_t             *out);
size_t cmsg_dotaseason_achievements__pack_to_buffer
                     (const CMsgDOTASeasonAchievements   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTASeasonAchievements *
       cmsg_dotaseason_achievements__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotaseason_achievements__free_unpacked
                     (CMsgDOTASeasonAchievements *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTASeasonPredictions__Choice methods */
void   cmsg_dotaseason_predictions__choice__init
                     (CMsgDOTASeasonPredictions__Choice         *message);
/* CMsgDOTASeasonPredictions__Answers methods */
void   cmsg_dotaseason_predictions__answers__init
                     (CMsgDOTASeasonPredictions__Answers         *message);
/* CMsgDOTASeasonPredictions__QueryKeyValues methods */
void   cmsg_dotaseason_predictions__query_key_values__init
                     (CMsgDOTASeasonPredictions__QueryKeyValues         *message);
/* CMsgDOTASeasonPredictions__Prediction methods */
void   cmsg_dotaseason_predictions__prediction__init
                     (CMsgDOTASeasonPredictions__Prediction         *message);
/* CMsgDOTASeasonPredictions__InGamePrediction methods */
void   cmsg_dotaseason_predictions__in_game_prediction__init
                     (CMsgDOTASeasonPredictions__InGamePrediction         *message);
/* CMsgDOTASeasonPredictions methods */
void   cmsg_dotaseason_predictions__init
                     (CMsgDOTASeasonPredictions         *message);
size_t cmsg_dotaseason_predictions__get_packed_size
                     (const CMsgDOTASeasonPredictions   *message);
size_t cmsg_dotaseason_predictions__pack
                     (const CMsgDOTASeasonPredictions   *message,
                      uint8_t             *out);
size_t cmsg_dotaseason_predictions__pack_to_buffer
                     (const CMsgDOTASeasonPredictions   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTASeasonPredictions *
       cmsg_dotaseason_predictions__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotaseason_predictions__free_unpacked
                     (CMsgDOTASeasonPredictions *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTAMatch__Player__CustomGameData methods */
void   cmsg_dotamatch__player__custom_game_data__init
                     (CMsgDOTAMatch__Player__CustomGameData         *message);
/* CMsgDOTAMatch__Player methods */
void   cmsg_dotamatch__player__init
                     (CMsgDOTAMatch__Player         *message);
/* CMsgDOTAMatch__BroadcasterInfo methods */
void   cmsg_dotamatch__broadcaster_info__init
                     (CMsgDOTAMatch__BroadcasterInfo         *message);
/* CMsgDOTAMatch__BroadcasterChannel methods */
void   cmsg_dotamatch__broadcaster_channel__init
                     (CMsgDOTAMatch__BroadcasterChannel         *message);
/* CMsgDOTAMatch__CustomGameData methods */
void   cmsg_dotamatch__custom_game_data__init
                     (CMsgDOTAMatch__CustomGameData         *message);
/* CMsgDOTAMatch methods */
void   cmsg_dotamatch__init
                     (CMsgDOTAMatch         *message);
size_t cmsg_dotamatch__get_packed_size
                     (const CMsgDOTAMatch   *message);
size_t cmsg_dotamatch__pack
                     (const CMsgDOTAMatch   *message,
                      uint8_t             *out);
size_t cmsg_dotamatch__pack_to_buffer
                     (const CMsgDOTAMatch   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTAMatch *
       cmsg_dotamatch__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotamatch__free_unpacked
                     (CMsgDOTAMatch *message,
                      ProtobufCAllocator *allocator);
/* CMsgPlayerCard__StatModifier methods */
void   cmsg_player_card__stat_modifier__init
                     (CMsgPlayerCard__StatModifier         *message);
/* CMsgPlayerCard methods */
void   cmsg_player_card__init
                     (CMsgPlayerCard         *message);
size_t cmsg_player_card__get_packed_size
                     (const CMsgPlayerCard   *message);
size_t cmsg_player_card__pack
                     (const CMsgPlayerCard   *message,
                      uint8_t             *out);
size_t cmsg_player_card__pack_to_buffer
                     (const CMsgPlayerCard   *message,
                      ProtobufCBuffer     *buffer);
CMsgPlayerCard *
       cmsg_player_card__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_player_card__free_unpacked
                     (CMsgPlayerCard *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CSODOTAGameAccountClient_Closure)
                 (const CSODOTAGameAccountClient *message,
                  void *closure_data);
typedef void (*CMsgLobbyEventPoints__AccountPoints_Closure)
                 (const CMsgLobbyEventPoints__AccountPoints *message,
                  void *closure_data);
typedef void (*CMsgLobbyEventPoints_Closure)
                 (const CMsgLobbyEventPoints *message,
                  void *closure_data);
typedef void (*CMsgLobbyBattleCupVictory__BattleCupVictory_Closure)
                 (const CMsgLobbyBattleCupVictory__BattleCupVictory *message,
                  void *closure_data);
typedef void (*CMsgLobbyBattleCupVictory_Closure)
                 (const CMsgLobbyBattleCupVictory *message,
                  void *closure_data);
typedef void (*CMsgDOTABroadcastNotification_Closure)
                 (const CMsgDOTABroadcastNotification *message,
                  void *closure_data);
typedef void (*CProtoItemHeroStatue_Closure)
                 (const CProtoItemHeroStatue *message,
                  void *closure_data);
typedef void (*CProtoItemTeamShowcase_Closure)
                 (const CProtoItemTeamShowcase *message,
                  void *closure_data);
typedef void (*CMatchPlayerAbilityUpgrade_Closure)
                 (const CMatchPlayerAbilityUpgrade *message,
                  void *closure_data);
typedef void (*CMatchAdditionalUnitInventory_Closure)
                 (const CMatchAdditionalUnitInventory *message,
                  void *closure_data);
typedef void (*CMatchHeroSelectEvent_Closure)
                 (const CMatchHeroSelectEvent *message,
                  void *closure_data);
typedef void (*CMsgDOTAProcessFantasyScheduledEvent_Closure)
                 (const CMsgDOTAProcessFantasyScheduledEvent *message,
                  void *closure_data);
typedef void (*CMsgDOTAHasItemQuery_Closure)
                 (const CMsgDOTAHasItemQuery *message,
                  void *closure_data);
typedef void (*CMsgDOTAHasItemResponse_Closure)
                 (const CMsgDOTAHasItemResponse *message,
                  void *closure_data);
typedef void (*CMsgDOTAHasItemDefsQuery_Closure)
                 (const CMsgDOTAHasItemDefsQuery *message,
                  void *closure_data);
typedef void (*CMsgDOTAHasItemDefsResponse_Closure)
                 (const CMsgDOTAHasItemDefsResponse *message,
                  void *closure_data);
typedef void (*CMsgGCToGCFantasySetMatchLeague_Closure)
                 (const CMsgGCToGCFantasySetMatchLeague *message,
                  void *closure_data);
typedef void (*CSODOTAMapLocationState_Closure)
                 (const CSODOTAMapLocationState *message,
                  void *closure_data);
typedef void (*CMsgLeagueAdminList_Closure)
                 (const CMsgLeagueAdminList *message,
                  void *closure_data);
typedef void (*CCompendiumTimestampedData_Closure)
                 (const CCompendiumTimestampedData *message,
                  void *closure_data);
typedef void (*CCompendiumGameTimeline_Closure)
                 (const CCompendiumGameTimeline *message,
                  void *closure_data);
typedef void (*CCompendiumGameList_Closure)
                 (const CCompendiumGameList *message,
                  void *closure_data);
typedef void (*CAdditionalEquipSlot_Closure)
                 (const CAdditionalEquipSlot *message,
                  void *closure_data);
typedef void (*CMsgDOTACombatLogEntry_Closure)
                 (const CMsgDOTACombatLogEntry *message,
                  void *closure_data);
typedef void (*CMsgDOTAProfileCard__Slot__Trophy_Closure)
                 (const CMsgDOTAProfileCard__Slot__Trophy *message,
                  void *closure_data);
typedef void (*CMsgDOTAProfileCard__Slot__Stat_Closure)
                 (const CMsgDOTAProfileCard__Slot__Stat *message,
                  void *closure_data);
typedef void (*CMsgDOTAProfileCard__Slot__Item_Closure)
                 (const CMsgDOTAProfileCard__Slot__Item *message,
                  void *closure_data);
typedef void (*CMsgDOTAProfileCard__Slot__Hero_Closure)
                 (const CMsgDOTAProfileCard__Slot__Hero *message,
                  void *closure_data);
typedef void (*CMsgDOTAProfileCard__Slot__Emoticon_Closure)
                 (const CMsgDOTAProfileCard__Slot__Emoticon *message,
                  void *closure_data);
typedef void (*CMsgDOTAProfileCard__Slot_Closure)
                 (const CMsgDOTAProfileCard__Slot *message,
                  void *closure_data);
typedef void (*CMsgDOTAProfileCard_Closure)
                 (const CMsgDOTAProfileCard *message,
                  void *closure_data);
typedef void (*CSODOTAPlayerChallenge_Closure)
                 (const CSODOTAPlayerChallenge *message,
                  void *closure_data);
typedef void (*CMsgClientToGCRerollPlayerChallenge_Closure)
                 (const CMsgClientToGCRerollPlayerChallenge *message,
                  void *closure_data);
typedef void (*CMsgGCRerollPlayerChallengeResponse_Closure)
                 (const CMsgGCRerollPlayerChallengeResponse *message,
                  void *closure_data);
typedef void (*CMsgGCTopCustomGamesList_Closure)
                 (const CMsgGCTopCustomGamesList *message,
                  void *closure_data);
typedef void (*CMsgDOTARealtimeGameStats__TeamDetails_Closure)
                 (const CMsgDOTARealtimeGameStats__TeamDetails *message,
                  void *closure_data);
typedef void (*CMsgDOTARealtimeGameStats__ItemDetails_Closure)
                 (const CMsgDOTARealtimeGameStats__ItemDetails *message,
                  void *closure_data);
typedef void (*CMsgDOTARealtimeGameStats__AbilityDetails_Closure)
                 (const CMsgDOTARealtimeGameStats__AbilityDetails *message,
                  void *closure_data);
typedef void (*CMsgDOTARealtimeGameStats__HeroToHeroStats_Closure)
                 (const CMsgDOTARealtimeGameStats__HeroToHeroStats *message,
                  void *closure_data);
typedef void (*CMsgDOTARealtimeGameStats__AbilityList_Closure)
                 (const CMsgDOTARealtimeGameStats__AbilityList *message,
                  void *closure_data);
typedef void (*CMsgDOTARealtimeGameStats__PlayerDetails_Closure)
                 (const CMsgDOTARealtimeGameStats__PlayerDetails *message,
                  void *closure_data);
typedef void (*CMsgDOTARealtimeGameStats__BuildingDetails_Closure)
                 (const CMsgDOTARealtimeGameStats__BuildingDetails *message,
                  void *closure_data);
typedef void (*CMsgDOTARealtimeGameStats__KillDetails_Closure)
                 (const CMsgDOTARealtimeGameStats__KillDetails *message,
                  void *closure_data);
typedef void (*CMsgDOTARealtimeGameStats__BroadcasterDetails_Closure)
                 (const CMsgDOTARealtimeGameStats__BroadcasterDetails *message,
                  void *closure_data);
typedef void (*CMsgDOTARealtimeGameStats__PickBanDetails_Closure)
                 (const CMsgDOTARealtimeGameStats__PickBanDetails *message,
                  void *closure_data);
typedef void (*CMsgDOTARealtimeGameStats__MatchDetails_Closure)
                 (const CMsgDOTARealtimeGameStats__MatchDetails *message,
                  void *closure_data);
typedef void (*CMsgDOTARealtimeGameStats__GraphData__LocationStats_Closure)
                 (const CMsgDOTARealtimeGameStats__GraphData__LocationStats *message,
                  void *closure_data);
typedef void (*CMsgDOTARealtimeGameStats__GraphData__TeamLocationStats_Closure)
                 (const CMsgDOTARealtimeGameStats__GraphData__TeamLocationStats *message,
                  void *closure_data);
typedef void (*CMsgDOTARealtimeGameStats__GraphData_Closure)
                 (const CMsgDOTARealtimeGameStats__GraphData *message,
                  void *closure_data);
typedef void (*CMsgDOTARealtimeGameStats_Closure)
                 (const CMsgDOTARealtimeGameStats *message,
                  void *closure_data);
typedef void (*CMsgDOTARealtimeGameStatsTerse__TeamDetails_Closure)
                 (const CMsgDOTARealtimeGameStatsTerse__TeamDetails *message,
                  void *closure_data);
typedef void (*CMsgDOTARealtimeGameStatsTerse__PlayerDetails_Closure)
                 (const CMsgDOTARealtimeGameStatsTerse__PlayerDetails *message,
                  void *closure_data);
typedef void (*CMsgDOTARealtimeGameStatsTerse__BuildingDetails_Closure)
                 (const CMsgDOTARealtimeGameStatsTerse__BuildingDetails *message,
                  void *closure_data);
typedef void (*CMsgDOTARealtimeGameStatsTerse__MatchDetails_Closure)
                 (const CMsgDOTARealtimeGameStatsTerse__MatchDetails *message,
                  void *closure_data);
typedef void (*CMsgDOTARealtimeGameStatsTerse__GraphData_Closure)
                 (const CMsgDOTARealtimeGameStatsTerse__GraphData *message,
                  void *closure_data);
typedef void (*CMsgDOTARealtimeGameStatsTerse_Closure)
                 (const CMsgDOTARealtimeGameStatsTerse *message,
                  void *closure_data);
typedef void (*CMsgGCToClientMatchGroupsVersion_Closure)
                 (const CMsgGCToClientMatchGroupsVersion *message,
                  void *closure_data);
typedef void (*CMsgDOTASDOHeroStatsHistory_Closure)
                 (const CMsgDOTASDOHeroStatsHistory *message,
                  void *closure_data);
typedef void (*CMsgDOTASeasonRewards__Reward_Closure)
                 (const CMsgDOTASeasonRewards__Reward *message,
                  void *closure_data);
typedef void (*CMsgDOTASeasonRewards_Closure)
                 (const CMsgDOTASeasonRewards *message,
                  void *closure_data);
typedef void (*CMsgDOTASeasonAchievements__Achievement_Closure)
                 (const CMsgDOTASeasonAchievements__Achievement *message,
                  void *closure_data);
typedef void (*CMsgDOTASeasonAchievements_Closure)
                 (const CMsgDOTASeasonAchievements *message,
                  void *closure_data);
typedef void (*CMsgDOTASeasonPredictions__Choice_Closure)
                 (const CMsgDOTASeasonPredictions__Choice *message,
                  void *closure_data);
typedef void (*CMsgDOTASeasonPredictions__Answers_Closure)
                 (const CMsgDOTASeasonPredictions__Answers *message,
                  void *closure_data);
typedef void (*CMsgDOTASeasonPredictions__QueryKeyValues_Closure)
                 (const CMsgDOTASeasonPredictions__QueryKeyValues *message,
                  void *closure_data);
typedef void (*CMsgDOTASeasonPredictions__Prediction_Closure)
                 (const CMsgDOTASeasonPredictions__Prediction *message,
                  void *closure_data);
typedef void (*CMsgDOTASeasonPredictions__InGamePrediction_Closure)
                 (const CMsgDOTASeasonPredictions__InGamePrediction *message,
                  void *closure_data);
typedef void (*CMsgDOTASeasonPredictions_Closure)
                 (const CMsgDOTASeasonPredictions *message,
                  void *closure_data);
typedef void (*CMsgDOTAMatch__Player__CustomGameData_Closure)
                 (const CMsgDOTAMatch__Player__CustomGameData *message,
                  void *closure_data);
typedef void (*CMsgDOTAMatch__Player_Closure)
                 (const CMsgDOTAMatch__Player *message,
                  void *closure_data);
typedef void (*CMsgDOTAMatch__BroadcasterInfo_Closure)
                 (const CMsgDOTAMatch__BroadcasterInfo *message,
                  void *closure_data);
typedef void (*CMsgDOTAMatch__BroadcasterChannel_Closure)
                 (const CMsgDOTAMatch__BroadcasterChannel *message,
                  void *closure_data);
typedef void (*CMsgDOTAMatch__CustomGameData_Closure)
                 (const CMsgDOTAMatch__CustomGameData *message,
                  void *closure_data);
typedef void (*CMsgDOTAMatch_Closure)
                 (const CMsgDOTAMatch *message,
                  void *closure_data);
typedef void (*CMsgPlayerCard__StatModifier_Closure)
                 (const CMsgPlayerCard__StatModifier *message,
                  void *closure_data);
typedef void (*CMsgPlayerCard_Closure)
                 (const CMsgPlayerCard *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    especial_ping_value__descriptor;
extern const ProtobufCEnumDescriptor    edotagcsession_need__descriptor;
extern const ProtobufCEnumDescriptor    dota__tournament_events__descriptor;
extern const ProtobufCEnumDescriptor    dota__combatlog__types__descriptor;
extern const ProtobufCMessageDescriptor csodotagame_account_client__descriptor;
extern const ProtobufCMessageDescriptor cmsg_lobby_event_points__descriptor;
extern const ProtobufCMessageDescriptor cmsg_lobby_event_points__account_points__descriptor;
extern const ProtobufCMessageDescriptor cmsg_lobby_battle_cup_victory__descriptor;
extern const ProtobufCMessageDescriptor cmsg_lobby_battle_cup_victory__battle_cup_victory__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotabroadcast_notification__descriptor;
extern const ProtobufCMessageDescriptor cproto_item_hero_statue__descriptor;
extern const ProtobufCMessageDescriptor cproto_item_team_showcase__descriptor;
extern const ProtobufCMessageDescriptor cmatch_player_ability_upgrade__descriptor;
extern const ProtobufCMessageDescriptor cmatch_additional_unit_inventory__descriptor;
extern const ProtobufCMessageDescriptor cmatch_hero_select_event__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotaprocess_fantasy_scheduled_event__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotahas_item_query__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotahas_item_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotahas_item_defs_query__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotahas_item_defs_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_gcto_gcfantasy_set_match_league__descriptor;
extern const ProtobufCMessageDescriptor csodotamap_location_state__descriptor;
extern const ProtobufCMessageDescriptor cmsg_league_admin_list__descriptor;
extern const ProtobufCMessageDescriptor ccompendium_timestamped_data__descriptor;
extern const ProtobufCMessageDescriptor ccompendium_game_timeline__descriptor;
extern const ProtobufCMessageDescriptor ccompendium_game_list__descriptor;
extern const ProtobufCMessageDescriptor cadditional_equip_slot__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotacombat_log_entry__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotaprofile_card__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotaprofile_card__slot__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotaprofile_card__slot__trophy__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotaprofile_card__slot__stat__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotaprofile_card__slot__item__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotaprofile_card__slot__hero__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotaprofile_card__slot__emoticon__descriptor;
extern const ProtobufCEnumDescriptor    cmsg_dotaprofile_card__estat_id__descriptor;
extern const ProtobufCMessageDescriptor csodotaplayer_challenge__descriptor;
extern const ProtobufCEnumDescriptor    csodotaplayer_challenge__eflags__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_to_gcreroll_player_challenge__descriptor;
extern const ProtobufCMessageDescriptor cmsg_gcreroll_player_challenge_response__descriptor;
extern const ProtobufCEnumDescriptor    cmsg_gcreroll_player_challenge_response__eresult__descriptor;
extern const ProtobufCMessageDescriptor cmsg_gctop_custom_games_list__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotarealtime_game_stats__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotarealtime_game_stats__team_details__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotarealtime_game_stats__item_details__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotarealtime_game_stats__ability_details__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotarealtime_game_stats__hero_to_hero_stats__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotarealtime_game_stats__ability_list__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotarealtime_game_stats__player_details__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotarealtime_game_stats__building_details__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotarealtime_game_stats__kill_details__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotarealtime_game_stats__broadcaster_details__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotarealtime_game_stats__pick_ban_details__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotarealtime_game_stats__match_details__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotarealtime_game_stats__graph_data__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotarealtime_game_stats__graph_data__location_stats__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotarealtime_game_stats__graph_data__team_location_stats__descriptor;
extern const ProtobufCEnumDescriptor    cmsg_dotarealtime_game_stats__graph_data__e_stat__descriptor;
extern const ProtobufCEnumDescriptor    cmsg_dotarealtime_game_stats__graph_data__e_location__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotarealtime_game_stats_terse__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotarealtime_game_stats_terse__team_details__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotarealtime_game_stats_terse__player_details__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotarealtime_game_stats_terse__building_details__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotarealtime_game_stats_terse__match_details__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotarealtime_game_stats_terse__graph_data__descriptor;
extern const ProtobufCMessageDescriptor cmsg_gcto_client_match_groups_version__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotasdohero_stats_history__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotaseason_rewards__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotaseason_rewards__reward__descriptor;
extern const ProtobufCEnumDescriptor    cmsg_dotaseason_rewards__ereward_type__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotaseason_achievements__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotaseason_achievements__achievement__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotaseason_predictions__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotaseason_predictions__choice__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotaseason_predictions__answers__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotaseason_predictions__query_key_values__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotaseason_predictions__prediction__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotaseason_predictions__in_game_prediction__descriptor;
extern const ProtobufCEnumDescriptor    cmsg_dotaseason_predictions__e_prediction_type__descriptor;
extern const ProtobufCEnumDescriptor    cmsg_dotaseason_predictions__e_answer_type__descriptor;
extern const ProtobufCEnumDescriptor    cmsg_dotaseason_predictions__e_resolution_type_t__descriptor;
extern const ProtobufCEnumDescriptor    cmsg_dotaseason_predictions__e_random_selection_group_t__descriptor;
extern const ProtobufCEnumDescriptor    cmsg_dotaseason_predictions__e_raw_value_type_t__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotamatch__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotamatch__player__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotamatch__player__custom_game_data__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotamatch__broadcaster_info__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotamatch__broadcaster_channel__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotamatch__custom_game_data__descriptor;
extern const ProtobufCEnumDescriptor    cmsg_dotamatch__replay_state__descriptor;
extern const ProtobufCMessageDescriptor cmsg_player_card__descriptor;
extern const ProtobufCMessageDescriptor cmsg_player_card__stat_modifier__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_dota_5fgcmessages_5fcommon_2eproto__INCLUDED */
