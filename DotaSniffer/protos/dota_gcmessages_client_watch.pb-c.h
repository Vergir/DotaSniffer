/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: dota_gcmessages_client_watch.proto */

#ifndef PROTOBUF_C_dota_5fgcmessages_5fclient_5fwatch_2eproto__INCLUDED
#define PROTOBUF_C_dota_5fgcmessages_5fclient_5fwatch_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "dota_shared_enums.pb-c.h"
#include "dota_gcmessages_common.pb-c.h"

typedef struct _CSourceTVGameSmall CSourceTVGameSmall;
typedef struct _CSourceTVGameSmall__Player CSourceTVGameSmall__Player;
typedef struct _CMsgClientToGCFindTopSourceTVGames CMsgClientToGCFindTopSourceTVGames;
typedef struct _CMsgGCToClientFindTopSourceTVGamesResponse CMsgGCToClientFindTopSourceTVGamesResponse;
typedef struct _CMsgClientToGCTopMatchesRequest CMsgClientToGCTopMatchesRequest;
typedef struct _CMsgClientToGCTopLeagueMatchesRequest CMsgClientToGCTopLeagueMatchesRequest;
typedef struct _CMsgClientToGCTopFriendMatchesRequest CMsgClientToGCTopFriendMatchesRequest;
typedef struct _CMsgClientToGCMatchesMinimalRequest CMsgClientToGCMatchesMinimalRequest;
typedef struct _CMsgClientToGCMatchesMinimalResponse CMsgClientToGCMatchesMinimalResponse;
typedef struct _CMsgGCToClientTopLeagueMatchesResponse CMsgGCToClientTopLeagueMatchesResponse;
typedef struct _CMsgGCToClientTopFriendMatchesResponse CMsgGCToClientTopFriendMatchesResponse;
typedef struct _CMsgClientToGCFindTopMatches CMsgClientToGCFindTopMatches;
typedef struct _CMsgGCToClientFindTopLeagueMatchesResponse CMsgGCToClientFindTopLeagueMatchesResponse;
typedef struct _CMsgSpectateFriendGame CMsgSpectateFriendGame;
typedef struct _CMsgSpectateFriendGameResponse CMsgSpectateFriendGameResponse;
typedef struct _CMsgDOTAMatchMinimal CMsgDOTAMatchMinimal;
typedef struct _CMsgDOTAMatchMinimal__Player CMsgDOTAMatchMinimal__Player;
typedef struct _CMsgDOTAMatchMinimal__League CMsgDOTAMatchMinimal__League;
typedef struct _CDOTAReplayDownloadInfo CDOTAReplayDownloadInfo;
typedef struct _CDOTAReplayDownloadInfo__Highlight CDOTAReplayDownloadInfo__Highlight;
typedef struct _CMsgWatchGame CMsgWatchGame;
typedef struct _CMsgCancelWatchGame CMsgCancelWatchGame;
typedef struct _CMsgWatchGameResponse CMsgWatchGameResponse;
typedef struct _CMsgPartyLeaderWatchGamePrompt CMsgPartyLeaderWatchGamePrompt;
typedef struct _CDOTABroadcasterInfo CDOTABroadcasterInfo;


/* --- enums --- */

typedef enum _CMsgWatchGameResponse__WatchGameResult {
  CMSG_WATCH_GAME_RESPONSE__WATCH_GAME_RESULT__PENDING = 0,
  CMSG_WATCH_GAME_RESPONSE__WATCH_GAME_RESULT__READY = 1,
  CMSG_WATCH_GAME_RESPONSE__WATCH_GAME_RESULT__GAMESERVERNOTFOUND = 2,
  CMSG_WATCH_GAME_RESPONSE__WATCH_GAME_RESULT__UNAVAILABLE = 3,
  CMSG_WATCH_GAME_RESPONSE__WATCH_GAME_RESULT__CANCELLED = 4,
  CMSG_WATCH_GAME_RESPONSE__WATCH_GAME_RESULT__INCOMPATIBLEVERSION = 5,
  CMSG_WATCH_GAME_RESPONSE__WATCH_GAME_RESULT__MISSINGLEAGUESUBSCRIPTION = 6,
  CMSG_WATCH_GAME_RESPONSE__WATCH_GAME_RESULT__LOBBYNOTFOUND = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CMSG_WATCH_GAME_RESPONSE__WATCH_GAME_RESULT)
} CMsgWatchGameResponse__WatchGameResult;

/* --- messages --- */

struct  _CSourceTVGameSmall__Player
{
  ProtobufCMessage base;
  protobuf_c_boolean has_account_id;
  uint32_t account_id;
  protobuf_c_boolean has_hero_id;
  uint32_t hero_id;
};
#define CSOURCE_TVGAME_SMALL__PLAYER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csource_tvgame_small__player__descriptor) \
    , 0,0, 0,0 }


struct  _CSourceTVGameSmall
{
  ProtobufCMessage base;
  protobuf_c_boolean has_activate_time;
  uint32_t activate_time;
  protobuf_c_boolean has_deactivate_time;
  uint32_t deactivate_time;
  protobuf_c_boolean has_server_steam_id;
  uint64_t server_steam_id;
  protobuf_c_boolean has_lobby_id;
  uint64_t lobby_id;
  protobuf_c_boolean has_league_id;
  uint32_t league_id;
  protobuf_c_boolean has_lobby_type;
  uint32_t lobby_type;
  protobuf_c_boolean has_game_time;
  int32_t game_time;
  protobuf_c_boolean has_delay;
  uint32_t delay;
  protobuf_c_boolean has_spectators;
  uint32_t spectators;
  protobuf_c_boolean has_game_mode;
  uint32_t game_mode;
  protobuf_c_boolean has_average_mmr;
  uint32_t average_mmr;
  char *team_name_radiant;
  char *team_name_dire;
  protobuf_c_boolean has_sort_score;
  uint32_t sort_score;
  protobuf_c_boolean has_last_update_time;
  float last_update_time;
  protobuf_c_boolean has_radiant_lead;
  int32_t radiant_lead;
  protobuf_c_boolean has_radiant_score;
  uint32_t radiant_score;
  protobuf_c_boolean has_dire_score;
  uint32_t dire_score;
  size_t n_players;
  CSourceTVGameSmall__Player **players;
  protobuf_c_boolean has_building_state;
  uint32_t building_state;
};
#define CSOURCE_TVGAME_SMALL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csource_tvgame_small__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,0 }


struct  _CMsgClientToGCFindTopSourceTVGames
{
  ProtobufCMessage base;
  char *search_key;
  protobuf_c_boolean has_league_id;
  uint32_t league_id;
  protobuf_c_boolean has_hero_id;
  uint32_t hero_id;
  protobuf_c_boolean has_start_game;
  uint32_t start_game;
  protobuf_c_boolean has_game_list_index;
  uint32_t game_list_index;
  size_t n_lobby_ids;
  uint64_t *lobby_ids;
};
#define CMSG_CLIENT_TO_GCFIND_TOP_SOURCE_TVGAMES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_client_to_gcfind_top_source_tvgames__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,NULL }


struct  _CMsgGCToClientFindTopSourceTVGamesResponse
{
  ProtobufCMessage base;
  char *search_key;
  protobuf_c_boolean has_league_id;
  uint32_t league_id;
  protobuf_c_boolean has_hero_id;
  uint32_t hero_id;
  protobuf_c_boolean has_start_game;
  uint32_t start_game;
  protobuf_c_boolean has_num_games;
  uint32_t num_games;
  protobuf_c_boolean has_game_list_index;
  uint32_t game_list_index;
  size_t n_game_list;
  CSourceTVGameSmall **game_list;
  protobuf_c_boolean has_specific_games;
  protobuf_c_boolean specific_games;
};
#define CMSG_GCTO_CLIENT_FIND_TOP_SOURCE_TVGAMES_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_gcto_client_find_top_source_tvgames_response__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,0 }


struct  _CMsgClientToGCTopMatchesRequest
{
  ProtobufCMessage base;
  protobuf_c_boolean has_hero_id;
  uint32_t hero_id;
  protobuf_c_boolean has_player_account_id;
  uint32_t player_account_id;
  protobuf_c_boolean has_team_id;
  uint32_t team_id;
};
#define CMSG_CLIENT_TO_GCTOP_MATCHES_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_client_to_gctop_matches_request__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _CMsgClientToGCTopLeagueMatchesRequest
{
  ProtobufCMessage base;
};
#define CMSG_CLIENT_TO_GCTOP_LEAGUE_MATCHES_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_client_to_gctop_league_matches_request__descriptor) \
     }


struct  _CMsgClientToGCTopFriendMatchesRequest
{
  ProtobufCMessage base;
};
#define CMSG_CLIENT_TO_GCTOP_FRIEND_MATCHES_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_client_to_gctop_friend_matches_request__descriptor) \
     }


struct  _CMsgClientToGCMatchesMinimalRequest
{
  ProtobufCMessage base;
  size_t n_match_ids;
  uint64_t *match_ids;
};
#define CMSG_CLIENT_TO_GCMATCHES_MINIMAL_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_client_to_gcmatches_minimal_request__descriptor) \
    , 0,NULL }


struct  _CMsgClientToGCMatchesMinimalResponse
{
  ProtobufCMessage base;
  size_t n_matches;
  CMsgDOTAMatchMinimal **matches;
  protobuf_c_boolean has_last_match;
  protobuf_c_boolean last_match;
};
#define CMSG_CLIENT_TO_GCMATCHES_MINIMAL_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_client_to_gcmatches_minimal_response__descriptor) \
    , 0,NULL, 0,0 }


struct  _CMsgGCToClientTopLeagueMatchesResponse
{
  ProtobufCMessage base;
  size_t n_matches;
  CMsgDOTAMatchMinimal **matches;
};
#define CMSG_GCTO_CLIENT_TOP_LEAGUE_MATCHES_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_gcto_client_top_league_matches_response__descriptor) \
    , 0,NULL }


struct  _CMsgGCToClientTopFriendMatchesResponse
{
  ProtobufCMessage base;
  size_t n_matches;
  CMsgDOTAMatchMinimal **matches;
};
#define CMSG_GCTO_CLIENT_TOP_FRIEND_MATCHES_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_gcto_client_top_friend_matches_response__descriptor) \
    , 0,NULL }


struct  _CMsgClientToGCFindTopMatches
{
  ProtobufCMessage base;
  protobuf_c_boolean has_start_game;
  uint32_t start_game;
  protobuf_c_boolean has_league_id;
  uint32_t league_id;
  protobuf_c_boolean has_hero_id;
  uint32_t hero_id;
  protobuf_c_boolean has_friend_id;
  uint32_t friend_id;
  protobuf_c_boolean has_friend_list;
  protobuf_c_boolean friend_list;
  protobuf_c_boolean has_league_list;
  protobuf_c_boolean league_list;
};
#define CMSG_CLIENT_TO_GCFIND_TOP_MATCHES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_client_to_gcfind_top_matches__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgGCToClientFindTopLeagueMatchesResponse
{
  ProtobufCMessage base;
  protobuf_c_boolean has_start_game;
  uint32_t start_game;
  protobuf_c_boolean has_league_id;
  uint32_t league_id;
  protobuf_c_boolean has_hero_id;
  uint32_t hero_id;
  size_t n_match_ids;
  uint32_t *match_ids;
  size_t n_matches;
  CMsgDOTAMatch **matches;
};
#define CMSG_GCTO_CLIENT_FIND_TOP_LEAGUE_MATCHES_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_gcto_client_find_top_league_matches_response__descriptor) \
    , 0,0, 0,0, 0,0, 0,NULL, 0,NULL }


struct  _CMsgSpectateFriendGame
{
  ProtobufCMessage base;
  protobuf_c_boolean has_steam_id;
  uint64_t steam_id;
};
#define CMSG_SPECTATE_FRIEND_GAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_spectate_friend_game__descriptor) \
    , 0,0 }


struct  _CMsgSpectateFriendGameResponse
{
  ProtobufCMessage base;
  protobuf_c_boolean has_server_steamid;
  uint64_t server_steamid;
};
#define CMSG_SPECTATE_FRIEND_GAME_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_spectate_friend_game_response__descriptor) \
    , 0,0 }


struct  _CMsgDOTAMatchMinimal__Player
{
  ProtobufCMessage base;
  protobuf_c_boolean has_account_id;
  uint32_t account_id;
  protobuf_c_boolean has_hero_id;
  uint32_t hero_id;
  protobuf_c_boolean has_kills;
  uint32_t kills;
  protobuf_c_boolean has_deaths;
  uint32_t deaths;
  protobuf_c_boolean has_assists;
  uint32_t assists;
  size_t n_items;
  uint32_t *items;
  protobuf_c_boolean has_player_slot;
  uint32_t player_slot;
};
#define CMSG_DOTAMATCH_MINIMAL__PLAYER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotamatch_minimal__player__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,0 }


struct  _CMsgDOTAMatchMinimal__League
{
  ProtobufCMessage base;
  protobuf_c_boolean has_league_id;
  uint32_t league_id;
  protobuf_c_boolean has_radiant_team_id;
  uint32_t radiant_team_id;
  char *radiant_team_name;
  protobuf_c_boolean has_radiant_team_logo;
  uint64_t radiant_team_logo;
  protobuf_c_boolean has_dire_team_id;
  uint32_t dire_team_id;
  char *dire_team_name;
  protobuf_c_boolean has_dire_team_logo;
  uint64_t dire_team_logo;
  protobuf_c_boolean has_series_type;
  uint32_t series_type;
  protobuf_c_boolean has_series_game;
  uint32_t series_game;
};
#define CMSG_DOTAMATCH_MINIMAL__LEAGUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotamatch_minimal__league__descriptor) \
    , 0,0, 0,0, NULL, 0,0, 0,0, NULL, 0,0, 0,0, 0,0 }


struct  _CMsgDOTAMatchMinimal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_match_id;
  uint64_t match_id;
  protobuf_c_boolean has_start_time;
  uint32_t start_time;
  protobuf_c_boolean has_duration;
  uint32_t duration;
  protobuf_c_boolean has_game_mode;
  DOTAGameMode game_mode;
  size_t n_players;
  CMsgDOTAMatchMinimal__Player **players;
  CMsgDOTAMatchMinimal__League *league;
  protobuf_c_boolean has_match_outcome;
  EMatchOutcome match_outcome;
};
#define CMSG_DOTAMATCH_MINIMAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotamatch_minimal__descriptor) \
    , 0,0, 0,0, 0,0, 0,DOTA__GAME_MODE__DOTA_GAMEMODE_NONE, 0,NULL, NULL, 0,EMATCH_OUTCOME__k_EMatchOutcome_Unknown }


struct  _CDOTAReplayDownloadInfo__Highlight
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  char *description;
};
#define CDOTAREPLAY_DOWNLOAD_INFO__HIGHLIGHT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdotareplay_download_info__highlight__descriptor) \
    , 0,0, NULL }


struct  _CDOTAReplayDownloadInfo
{
  ProtobufCMessage base;
  CMsgDOTAMatchMinimal *match;
  char *title;
  char *description;
  protobuf_c_boolean has_size;
  uint32_t size;
  size_t n_tags;
  char **tags;
  protobuf_c_boolean has_exists_on_disk;
  protobuf_c_boolean exists_on_disk;
};
#define CDOTAREPLAY_DOWNLOAD_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdotareplay_download_info__descriptor) \
    , NULL, NULL, NULL, 0,0, 0,NULL, 0,0 }


struct  _CMsgWatchGame
{
  ProtobufCMessage base;
  protobuf_c_boolean has_server_steamid;
  uint64_t server_steamid;
  protobuf_c_boolean has_client_version;
  uint32_t client_version;
  protobuf_c_boolean has_watch_server_steamid;
  uint64_t watch_server_steamid;
  protobuf_c_boolean has_lobby_id;
  uint64_t lobby_id;
  size_t n_regions;
  uint32_t *regions;
};
#define CMSG_WATCH_GAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_watch_game__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,NULL }


struct  _CMsgCancelWatchGame
{
  ProtobufCMessage base;
};
#define CMSG_CANCEL_WATCH_GAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_cancel_watch_game__descriptor) \
     }


struct  _CMsgWatchGameResponse
{
  ProtobufCMessage base;
  protobuf_c_boolean has_watch_game_result;
  CMsgWatchGameResponse__WatchGameResult watch_game_result;
  protobuf_c_boolean has_source_tv_public_addr;
  uint32_t source_tv_public_addr;
  protobuf_c_boolean has_source_tv_private_addr;
  uint32_t source_tv_private_addr;
  protobuf_c_boolean has_source_tv_port;
  uint32_t source_tv_port;
  protobuf_c_boolean has_game_server_steamid;
  uint64_t game_server_steamid;
  protobuf_c_boolean has_watch_server_steamid;
  uint64_t watch_server_steamid;
  protobuf_c_boolean has_watch_tv_unique_secret_code;
  uint64_t watch_tv_unique_secret_code;
};
#define CMSG_WATCH_GAME_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_watch_game_response__descriptor) \
    , 0,CMSG_WATCH_GAME_RESPONSE__WATCH_GAME_RESULT__PENDING, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgPartyLeaderWatchGamePrompt
{
  ProtobufCMessage base;
  protobuf_c_boolean has_game_server_steamid;
  uint64_t game_server_steamid;
};
#define CMSG_PARTY_LEADER_WATCH_GAME_PROMPT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_party_leader_watch_game_prompt__descriptor) \
    , 0,0 }


struct  _CDOTABroadcasterInfo
{
  ProtobufCMessage base;
  protobuf_c_boolean has_account_id;
  uint32_t account_id;
  protobuf_c_boolean has_server_steam_id;
  uint64_t server_steam_id;
  protobuf_c_boolean has_live;
  protobuf_c_boolean live;
  char *team_name_radiant;
  char *team_name_dire;
  char *stage_name;
  protobuf_c_boolean has_series_game;
  uint32_t series_game;
  protobuf_c_boolean has_series_type;
  uint32_t series_type;
  protobuf_c_boolean has_upcoming_broadcast_timestamp;
  uint32_t upcoming_broadcast_timestamp;
  protobuf_c_boolean has_allow_live_video;
  protobuf_c_boolean allow_live_video;
};
#define CDOTABROADCASTER_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdotabroadcaster_info__descriptor) \
    , 0,0, 0,0, 0,0, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0 }


/* CSourceTVGameSmall__Player methods */
void   csource_tvgame_small__player__init
                     (CSourceTVGameSmall__Player         *message);
/* CSourceTVGameSmall methods */
void   csource_tvgame_small__init
                     (CSourceTVGameSmall         *message);
size_t csource_tvgame_small__get_packed_size
                     (const CSourceTVGameSmall   *message);
size_t csource_tvgame_small__pack
                     (const CSourceTVGameSmall   *message,
                      uint8_t             *out);
size_t csource_tvgame_small__pack_to_buffer
                     (const CSourceTVGameSmall   *message,
                      ProtobufCBuffer     *buffer);
CSourceTVGameSmall *
       csource_tvgame_small__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csource_tvgame_small__free_unpacked
                     (CSourceTVGameSmall *message,
                      ProtobufCAllocator *allocator);
/* CMsgClientToGCFindTopSourceTVGames methods */
void   cmsg_client_to_gcfind_top_source_tvgames__init
                     (CMsgClientToGCFindTopSourceTVGames         *message);
size_t cmsg_client_to_gcfind_top_source_tvgames__get_packed_size
                     (const CMsgClientToGCFindTopSourceTVGames   *message);
size_t cmsg_client_to_gcfind_top_source_tvgames__pack
                     (const CMsgClientToGCFindTopSourceTVGames   *message,
                      uint8_t             *out);
size_t cmsg_client_to_gcfind_top_source_tvgames__pack_to_buffer
                     (const CMsgClientToGCFindTopSourceTVGames   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientToGCFindTopSourceTVGames *
       cmsg_client_to_gcfind_top_source_tvgames__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_to_gcfind_top_source_tvgames__free_unpacked
                     (CMsgClientToGCFindTopSourceTVGames *message,
                      ProtobufCAllocator *allocator);
/* CMsgGCToClientFindTopSourceTVGamesResponse methods */
void   cmsg_gcto_client_find_top_source_tvgames_response__init
                     (CMsgGCToClientFindTopSourceTVGamesResponse         *message);
size_t cmsg_gcto_client_find_top_source_tvgames_response__get_packed_size
                     (const CMsgGCToClientFindTopSourceTVGamesResponse   *message);
size_t cmsg_gcto_client_find_top_source_tvgames_response__pack
                     (const CMsgGCToClientFindTopSourceTVGamesResponse   *message,
                      uint8_t             *out);
size_t cmsg_gcto_client_find_top_source_tvgames_response__pack_to_buffer
                     (const CMsgGCToClientFindTopSourceTVGamesResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgGCToClientFindTopSourceTVGamesResponse *
       cmsg_gcto_client_find_top_source_tvgames_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_gcto_client_find_top_source_tvgames_response__free_unpacked
                     (CMsgGCToClientFindTopSourceTVGamesResponse *message,
                      ProtobufCAllocator *allocator);
/* CMsgClientToGCTopMatchesRequest methods */
void   cmsg_client_to_gctop_matches_request__init
                     (CMsgClientToGCTopMatchesRequest         *message);
size_t cmsg_client_to_gctop_matches_request__get_packed_size
                     (const CMsgClientToGCTopMatchesRequest   *message);
size_t cmsg_client_to_gctop_matches_request__pack
                     (const CMsgClientToGCTopMatchesRequest   *message,
                      uint8_t             *out);
size_t cmsg_client_to_gctop_matches_request__pack_to_buffer
                     (const CMsgClientToGCTopMatchesRequest   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientToGCTopMatchesRequest *
       cmsg_client_to_gctop_matches_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_to_gctop_matches_request__free_unpacked
                     (CMsgClientToGCTopMatchesRequest *message,
                      ProtobufCAllocator *allocator);
/* CMsgClientToGCTopLeagueMatchesRequest methods */
void   cmsg_client_to_gctop_league_matches_request__init
                     (CMsgClientToGCTopLeagueMatchesRequest         *message);
size_t cmsg_client_to_gctop_league_matches_request__get_packed_size
                     (const CMsgClientToGCTopLeagueMatchesRequest   *message);
size_t cmsg_client_to_gctop_league_matches_request__pack
                     (const CMsgClientToGCTopLeagueMatchesRequest   *message,
                      uint8_t             *out);
size_t cmsg_client_to_gctop_league_matches_request__pack_to_buffer
                     (const CMsgClientToGCTopLeagueMatchesRequest   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientToGCTopLeagueMatchesRequest *
       cmsg_client_to_gctop_league_matches_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_to_gctop_league_matches_request__free_unpacked
                     (CMsgClientToGCTopLeagueMatchesRequest *message,
                      ProtobufCAllocator *allocator);
/* CMsgClientToGCTopFriendMatchesRequest methods */
void   cmsg_client_to_gctop_friend_matches_request__init
                     (CMsgClientToGCTopFriendMatchesRequest         *message);
size_t cmsg_client_to_gctop_friend_matches_request__get_packed_size
                     (const CMsgClientToGCTopFriendMatchesRequest   *message);
size_t cmsg_client_to_gctop_friend_matches_request__pack
                     (const CMsgClientToGCTopFriendMatchesRequest   *message,
                      uint8_t             *out);
size_t cmsg_client_to_gctop_friend_matches_request__pack_to_buffer
                     (const CMsgClientToGCTopFriendMatchesRequest   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientToGCTopFriendMatchesRequest *
       cmsg_client_to_gctop_friend_matches_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_to_gctop_friend_matches_request__free_unpacked
                     (CMsgClientToGCTopFriendMatchesRequest *message,
                      ProtobufCAllocator *allocator);
/* CMsgClientToGCMatchesMinimalRequest methods */
void   cmsg_client_to_gcmatches_minimal_request__init
                     (CMsgClientToGCMatchesMinimalRequest         *message);
size_t cmsg_client_to_gcmatches_minimal_request__get_packed_size
                     (const CMsgClientToGCMatchesMinimalRequest   *message);
size_t cmsg_client_to_gcmatches_minimal_request__pack
                     (const CMsgClientToGCMatchesMinimalRequest   *message,
                      uint8_t             *out);
size_t cmsg_client_to_gcmatches_minimal_request__pack_to_buffer
                     (const CMsgClientToGCMatchesMinimalRequest   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientToGCMatchesMinimalRequest *
       cmsg_client_to_gcmatches_minimal_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_to_gcmatches_minimal_request__free_unpacked
                     (CMsgClientToGCMatchesMinimalRequest *message,
                      ProtobufCAllocator *allocator);
/* CMsgClientToGCMatchesMinimalResponse methods */
void   cmsg_client_to_gcmatches_minimal_response__init
                     (CMsgClientToGCMatchesMinimalResponse         *message);
size_t cmsg_client_to_gcmatches_minimal_response__get_packed_size
                     (const CMsgClientToGCMatchesMinimalResponse   *message);
size_t cmsg_client_to_gcmatches_minimal_response__pack
                     (const CMsgClientToGCMatchesMinimalResponse   *message,
                      uint8_t             *out);
size_t cmsg_client_to_gcmatches_minimal_response__pack_to_buffer
                     (const CMsgClientToGCMatchesMinimalResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientToGCMatchesMinimalResponse *
       cmsg_client_to_gcmatches_minimal_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_to_gcmatches_minimal_response__free_unpacked
                     (CMsgClientToGCMatchesMinimalResponse *message,
                      ProtobufCAllocator *allocator);
/* CMsgGCToClientTopLeagueMatchesResponse methods */
void   cmsg_gcto_client_top_league_matches_response__init
                     (CMsgGCToClientTopLeagueMatchesResponse         *message);
size_t cmsg_gcto_client_top_league_matches_response__get_packed_size
                     (const CMsgGCToClientTopLeagueMatchesResponse   *message);
size_t cmsg_gcto_client_top_league_matches_response__pack
                     (const CMsgGCToClientTopLeagueMatchesResponse   *message,
                      uint8_t             *out);
size_t cmsg_gcto_client_top_league_matches_response__pack_to_buffer
                     (const CMsgGCToClientTopLeagueMatchesResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgGCToClientTopLeagueMatchesResponse *
       cmsg_gcto_client_top_league_matches_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_gcto_client_top_league_matches_response__free_unpacked
                     (CMsgGCToClientTopLeagueMatchesResponse *message,
                      ProtobufCAllocator *allocator);
/* CMsgGCToClientTopFriendMatchesResponse methods */
void   cmsg_gcto_client_top_friend_matches_response__init
                     (CMsgGCToClientTopFriendMatchesResponse         *message);
size_t cmsg_gcto_client_top_friend_matches_response__get_packed_size
                     (const CMsgGCToClientTopFriendMatchesResponse   *message);
size_t cmsg_gcto_client_top_friend_matches_response__pack
                     (const CMsgGCToClientTopFriendMatchesResponse   *message,
                      uint8_t             *out);
size_t cmsg_gcto_client_top_friend_matches_response__pack_to_buffer
                     (const CMsgGCToClientTopFriendMatchesResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgGCToClientTopFriendMatchesResponse *
       cmsg_gcto_client_top_friend_matches_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_gcto_client_top_friend_matches_response__free_unpacked
                     (CMsgGCToClientTopFriendMatchesResponse *message,
                      ProtobufCAllocator *allocator);
/* CMsgClientToGCFindTopMatches methods */
void   cmsg_client_to_gcfind_top_matches__init
                     (CMsgClientToGCFindTopMatches         *message);
size_t cmsg_client_to_gcfind_top_matches__get_packed_size
                     (const CMsgClientToGCFindTopMatches   *message);
size_t cmsg_client_to_gcfind_top_matches__pack
                     (const CMsgClientToGCFindTopMatches   *message,
                      uint8_t             *out);
size_t cmsg_client_to_gcfind_top_matches__pack_to_buffer
                     (const CMsgClientToGCFindTopMatches   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientToGCFindTopMatches *
       cmsg_client_to_gcfind_top_matches__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_to_gcfind_top_matches__free_unpacked
                     (CMsgClientToGCFindTopMatches *message,
                      ProtobufCAllocator *allocator);
/* CMsgGCToClientFindTopLeagueMatchesResponse methods */
void   cmsg_gcto_client_find_top_league_matches_response__init
                     (CMsgGCToClientFindTopLeagueMatchesResponse         *message);
size_t cmsg_gcto_client_find_top_league_matches_response__get_packed_size
                     (const CMsgGCToClientFindTopLeagueMatchesResponse   *message);
size_t cmsg_gcto_client_find_top_league_matches_response__pack
                     (const CMsgGCToClientFindTopLeagueMatchesResponse   *message,
                      uint8_t             *out);
size_t cmsg_gcto_client_find_top_league_matches_response__pack_to_buffer
                     (const CMsgGCToClientFindTopLeagueMatchesResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgGCToClientFindTopLeagueMatchesResponse *
       cmsg_gcto_client_find_top_league_matches_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_gcto_client_find_top_league_matches_response__free_unpacked
                     (CMsgGCToClientFindTopLeagueMatchesResponse *message,
                      ProtobufCAllocator *allocator);
/* CMsgSpectateFriendGame methods */
void   cmsg_spectate_friend_game__init
                     (CMsgSpectateFriendGame         *message);
size_t cmsg_spectate_friend_game__get_packed_size
                     (const CMsgSpectateFriendGame   *message);
size_t cmsg_spectate_friend_game__pack
                     (const CMsgSpectateFriendGame   *message,
                      uint8_t             *out);
size_t cmsg_spectate_friend_game__pack_to_buffer
                     (const CMsgSpectateFriendGame   *message,
                      ProtobufCBuffer     *buffer);
CMsgSpectateFriendGame *
       cmsg_spectate_friend_game__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_spectate_friend_game__free_unpacked
                     (CMsgSpectateFriendGame *message,
                      ProtobufCAllocator *allocator);
/* CMsgSpectateFriendGameResponse methods */
void   cmsg_spectate_friend_game_response__init
                     (CMsgSpectateFriendGameResponse         *message);
size_t cmsg_spectate_friend_game_response__get_packed_size
                     (const CMsgSpectateFriendGameResponse   *message);
size_t cmsg_spectate_friend_game_response__pack
                     (const CMsgSpectateFriendGameResponse   *message,
                      uint8_t             *out);
size_t cmsg_spectate_friend_game_response__pack_to_buffer
                     (const CMsgSpectateFriendGameResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgSpectateFriendGameResponse *
       cmsg_spectate_friend_game_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_spectate_friend_game_response__free_unpacked
                     (CMsgSpectateFriendGameResponse *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTAMatchMinimal__Player methods */
void   cmsg_dotamatch_minimal__player__init
                     (CMsgDOTAMatchMinimal__Player         *message);
/* CMsgDOTAMatchMinimal__League methods */
void   cmsg_dotamatch_minimal__league__init
                     (CMsgDOTAMatchMinimal__League         *message);
/* CMsgDOTAMatchMinimal methods */
void   cmsg_dotamatch_minimal__init
                     (CMsgDOTAMatchMinimal         *message);
size_t cmsg_dotamatch_minimal__get_packed_size
                     (const CMsgDOTAMatchMinimal   *message);
size_t cmsg_dotamatch_minimal__pack
                     (const CMsgDOTAMatchMinimal   *message,
                      uint8_t             *out);
size_t cmsg_dotamatch_minimal__pack_to_buffer
                     (const CMsgDOTAMatchMinimal   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTAMatchMinimal *
       cmsg_dotamatch_minimal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotamatch_minimal__free_unpacked
                     (CMsgDOTAMatchMinimal *message,
                      ProtobufCAllocator *allocator);
/* CDOTAReplayDownloadInfo__Highlight methods */
void   cdotareplay_download_info__highlight__init
                     (CDOTAReplayDownloadInfo__Highlight         *message);
/* CDOTAReplayDownloadInfo methods */
void   cdotareplay_download_info__init
                     (CDOTAReplayDownloadInfo         *message);
size_t cdotareplay_download_info__get_packed_size
                     (const CDOTAReplayDownloadInfo   *message);
size_t cdotareplay_download_info__pack
                     (const CDOTAReplayDownloadInfo   *message,
                      uint8_t             *out);
size_t cdotareplay_download_info__pack_to_buffer
                     (const CDOTAReplayDownloadInfo   *message,
                      ProtobufCBuffer     *buffer);
CDOTAReplayDownloadInfo *
       cdotareplay_download_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdotareplay_download_info__free_unpacked
                     (CDOTAReplayDownloadInfo *message,
                      ProtobufCAllocator *allocator);
/* CMsgWatchGame methods */
void   cmsg_watch_game__init
                     (CMsgWatchGame         *message);
size_t cmsg_watch_game__get_packed_size
                     (const CMsgWatchGame   *message);
size_t cmsg_watch_game__pack
                     (const CMsgWatchGame   *message,
                      uint8_t             *out);
size_t cmsg_watch_game__pack_to_buffer
                     (const CMsgWatchGame   *message,
                      ProtobufCBuffer     *buffer);
CMsgWatchGame *
       cmsg_watch_game__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_watch_game__free_unpacked
                     (CMsgWatchGame *message,
                      ProtobufCAllocator *allocator);
/* CMsgCancelWatchGame methods */
void   cmsg_cancel_watch_game__init
                     (CMsgCancelWatchGame         *message);
size_t cmsg_cancel_watch_game__get_packed_size
                     (const CMsgCancelWatchGame   *message);
size_t cmsg_cancel_watch_game__pack
                     (const CMsgCancelWatchGame   *message,
                      uint8_t             *out);
size_t cmsg_cancel_watch_game__pack_to_buffer
                     (const CMsgCancelWatchGame   *message,
                      ProtobufCBuffer     *buffer);
CMsgCancelWatchGame *
       cmsg_cancel_watch_game__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_cancel_watch_game__free_unpacked
                     (CMsgCancelWatchGame *message,
                      ProtobufCAllocator *allocator);
/* CMsgWatchGameResponse methods */
void   cmsg_watch_game_response__init
                     (CMsgWatchGameResponse         *message);
size_t cmsg_watch_game_response__get_packed_size
                     (const CMsgWatchGameResponse   *message);
size_t cmsg_watch_game_response__pack
                     (const CMsgWatchGameResponse   *message,
                      uint8_t             *out);
size_t cmsg_watch_game_response__pack_to_buffer
                     (const CMsgWatchGameResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgWatchGameResponse *
       cmsg_watch_game_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_watch_game_response__free_unpacked
                     (CMsgWatchGameResponse *message,
                      ProtobufCAllocator *allocator);
/* CMsgPartyLeaderWatchGamePrompt methods */
void   cmsg_party_leader_watch_game_prompt__init
                     (CMsgPartyLeaderWatchGamePrompt         *message);
size_t cmsg_party_leader_watch_game_prompt__get_packed_size
                     (const CMsgPartyLeaderWatchGamePrompt   *message);
size_t cmsg_party_leader_watch_game_prompt__pack
                     (const CMsgPartyLeaderWatchGamePrompt   *message,
                      uint8_t             *out);
size_t cmsg_party_leader_watch_game_prompt__pack_to_buffer
                     (const CMsgPartyLeaderWatchGamePrompt   *message,
                      ProtobufCBuffer     *buffer);
CMsgPartyLeaderWatchGamePrompt *
       cmsg_party_leader_watch_game_prompt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_party_leader_watch_game_prompt__free_unpacked
                     (CMsgPartyLeaderWatchGamePrompt *message,
                      ProtobufCAllocator *allocator);
/* CDOTABroadcasterInfo methods */
void   cdotabroadcaster_info__init
                     (CDOTABroadcasterInfo         *message);
size_t cdotabroadcaster_info__get_packed_size
                     (const CDOTABroadcasterInfo   *message);
size_t cdotabroadcaster_info__pack
                     (const CDOTABroadcasterInfo   *message,
                      uint8_t             *out);
size_t cdotabroadcaster_info__pack_to_buffer
                     (const CDOTABroadcasterInfo   *message,
                      ProtobufCBuffer     *buffer);
CDOTABroadcasterInfo *
       cdotabroadcaster_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdotabroadcaster_info__free_unpacked
                     (CDOTABroadcasterInfo *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CSourceTVGameSmall__Player_Closure)
                 (const CSourceTVGameSmall__Player *message,
                  void *closure_data);
typedef void (*CSourceTVGameSmall_Closure)
                 (const CSourceTVGameSmall *message,
                  void *closure_data);
typedef void (*CMsgClientToGCFindTopSourceTVGames_Closure)
                 (const CMsgClientToGCFindTopSourceTVGames *message,
                  void *closure_data);
typedef void (*CMsgGCToClientFindTopSourceTVGamesResponse_Closure)
                 (const CMsgGCToClientFindTopSourceTVGamesResponse *message,
                  void *closure_data);
typedef void (*CMsgClientToGCTopMatchesRequest_Closure)
                 (const CMsgClientToGCTopMatchesRequest *message,
                  void *closure_data);
typedef void (*CMsgClientToGCTopLeagueMatchesRequest_Closure)
                 (const CMsgClientToGCTopLeagueMatchesRequest *message,
                  void *closure_data);
typedef void (*CMsgClientToGCTopFriendMatchesRequest_Closure)
                 (const CMsgClientToGCTopFriendMatchesRequest *message,
                  void *closure_data);
typedef void (*CMsgClientToGCMatchesMinimalRequest_Closure)
                 (const CMsgClientToGCMatchesMinimalRequest *message,
                  void *closure_data);
typedef void (*CMsgClientToGCMatchesMinimalResponse_Closure)
                 (const CMsgClientToGCMatchesMinimalResponse *message,
                  void *closure_data);
typedef void (*CMsgGCToClientTopLeagueMatchesResponse_Closure)
                 (const CMsgGCToClientTopLeagueMatchesResponse *message,
                  void *closure_data);
typedef void (*CMsgGCToClientTopFriendMatchesResponse_Closure)
                 (const CMsgGCToClientTopFriendMatchesResponse *message,
                  void *closure_data);
typedef void (*CMsgClientToGCFindTopMatches_Closure)
                 (const CMsgClientToGCFindTopMatches *message,
                  void *closure_data);
typedef void (*CMsgGCToClientFindTopLeagueMatchesResponse_Closure)
                 (const CMsgGCToClientFindTopLeagueMatchesResponse *message,
                  void *closure_data);
typedef void (*CMsgSpectateFriendGame_Closure)
                 (const CMsgSpectateFriendGame *message,
                  void *closure_data);
typedef void (*CMsgSpectateFriendGameResponse_Closure)
                 (const CMsgSpectateFriendGameResponse *message,
                  void *closure_data);
typedef void (*CMsgDOTAMatchMinimal__Player_Closure)
                 (const CMsgDOTAMatchMinimal__Player *message,
                  void *closure_data);
typedef void (*CMsgDOTAMatchMinimal__League_Closure)
                 (const CMsgDOTAMatchMinimal__League *message,
                  void *closure_data);
typedef void (*CMsgDOTAMatchMinimal_Closure)
                 (const CMsgDOTAMatchMinimal *message,
                  void *closure_data);
typedef void (*CDOTAReplayDownloadInfo__Highlight_Closure)
                 (const CDOTAReplayDownloadInfo__Highlight *message,
                  void *closure_data);
typedef void (*CDOTAReplayDownloadInfo_Closure)
                 (const CDOTAReplayDownloadInfo *message,
                  void *closure_data);
typedef void (*CMsgWatchGame_Closure)
                 (const CMsgWatchGame *message,
                  void *closure_data);
typedef void (*CMsgCancelWatchGame_Closure)
                 (const CMsgCancelWatchGame *message,
                  void *closure_data);
typedef void (*CMsgWatchGameResponse_Closure)
                 (const CMsgWatchGameResponse *message,
                  void *closure_data);
typedef void (*CMsgPartyLeaderWatchGamePrompt_Closure)
                 (const CMsgPartyLeaderWatchGamePrompt *message,
                  void *closure_data);
typedef void (*CDOTABroadcasterInfo_Closure)
                 (const CDOTABroadcasterInfo *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor csource_tvgame_small__descriptor;
extern const ProtobufCMessageDescriptor csource_tvgame_small__player__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_to_gcfind_top_source_tvgames__descriptor;
extern const ProtobufCMessageDescriptor cmsg_gcto_client_find_top_source_tvgames_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_to_gctop_matches_request__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_to_gctop_league_matches_request__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_to_gctop_friend_matches_request__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_to_gcmatches_minimal_request__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_to_gcmatches_minimal_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_gcto_client_top_league_matches_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_gcto_client_top_friend_matches_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_to_gcfind_top_matches__descriptor;
extern const ProtobufCMessageDescriptor cmsg_gcto_client_find_top_league_matches_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_spectate_friend_game__descriptor;
extern const ProtobufCMessageDescriptor cmsg_spectate_friend_game_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotamatch_minimal__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotamatch_minimal__player__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotamatch_minimal__league__descriptor;
extern const ProtobufCMessageDescriptor cdotareplay_download_info__descriptor;
extern const ProtobufCMessageDescriptor cdotareplay_download_info__highlight__descriptor;
extern const ProtobufCMessageDescriptor cmsg_watch_game__descriptor;
extern const ProtobufCMessageDescriptor cmsg_cancel_watch_game__descriptor;
extern const ProtobufCMessageDescriptor cmsg_watch_game_response__descriptor;
extern const ProtobufCEnumDescriptor    cmsg_watch_game_response__watch_game_result__descriptor;
extern const ProtobufCMessageDescriptor cmsg_party_leader_watch_game_prompt__descriptor;
extern const ProtobufCMessageDescriptor cdotabroadcaster_info__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_dota_5fgcmessages_5fclient_5fwatch_2eproto__INCLUDED */
