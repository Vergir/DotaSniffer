/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: networksystem_protomessages.proto */

#ifndef PROTOBUF_C_networksystem_5fprotomessages_2eproto__INCLUDED
#define PROTOBUF_C_networksystem_5fprotomessages_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _NetMessageSplitscreenUserChanged NetMessageSplitscreenUserChanged;
typedef struct _NetMessageConnectionClosed NetMessageConnectionClosed;
typedef struct _NetMessageConnectionCrashed NetMessageConnectionCrashed;
typedef struct _NetMessagePacketStart NetMessagePacketStart;
typedef struct _NetMessagePacketEnd NetMessagePacketEnd;


/* --- enums --- */


/* --- messages --- */

struct  _NetMessageSplitscreenUserChanged
{
  ProtobufCMessage base;
  protobuf_c_boolean has_slot;
  uint32_t slot;
};
#define NET_MESSAGE_SPLITSCREEN_USER_CHANGED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&net_message_splitscreen_user_changed__descriptor) \
    , 0,0 }


struct  _NetMessageConnectionClosed
{
  ProtobufCMessage base;
  protobuf_c_boolean has_reason;
  uint32_t reason;
};
#define NET_MESSAGE_CONNECTION_CLOSED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&net_message_connection_closed__descriptor) \
    , 0,0 }


struct  _NetMessageConnectionCrashed
{
  ProtobufCMessage base;
  protobuf_c_boolean has_reason;
  uint32_t reason;
};
#define NET_MESSAGE_CONNECTION_CRASHED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&net_message_connection_crashed__descriptor) \
    , 0,0 }


struct  _NetMessagePacketStart
{
  ProtobufCMessage base;
  protobuf_c_boolean has_incoming_sequence;
  uint32_t incoming_sequence;
  protobuf_c_boolean has_outgoing_acknowledged;
  uint32_t outgoing_acknowledged;
};
#define NET_MESSAGE_PACKET_START__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&net_message_packet_start__descriptor) \
    , 0,0, 0,0 }


struct  _NetMessagePacketEnd
{
  ProtobufCMessage base;
};
#define NET_MESSAGE_PACKET_END__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&net_message_packet_end__descriptor) \
     }


/* NetMessageSplitscreenUserChanged methods */
void   net_message_splitscreen_user_changed__init
                     (NetMessageSplitscreenUserChanged         *message);
size_t net_message_splitscreen_user_changed__get_packed_size
                     (const NetMessageSplitscreenUserChanged   *message);
size_t net_message_splitscreen_user_changed__pack
                     (const NetMessageSplitscreenUserChanged   *message,
                      uint8_t             *out);
size_t net_message_splitscreen_user_changed__pack_to_buffer
                     (const NetMessageSplitscreenUserChanged   *message,
                      ProtobufCBuffer     *buffer);
NetMessageSplitscreenUserChanged *
       net_message_splitscreen_user_changed__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   net_message_splitscreen_user_changed__free_unpacked
                     (NetMessageSplitscreenUserChanged *message,
                      ProtobufCAllocator *allocator);
/* NetMessageConnectionClosed methods */
void   net_message_connection_closed__init
                     (NetMessageConnectionClosed         *message);
size_t net_message_connection_closed__get_packed_size
                     (const NetMessageConnectionClosed   *message);
size_t net_message_connection_closed__pack
                     (const NetMessageConnectionClosed   *message,
                      uint8_t             *out);
size_t net_message_connection_closed__pack_to_buffer
                     (const NetMessageConnectionClosed   *message,
                      ProtobufCBuffer     *buffer);
NetMessageConnectionClosed *
       net_message_connection_closed__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   net_message_connection_closed__free_unpacked
                     (NetMessageConnectionClosed *message,
                      ProtobufCAllocator *allocator);
/* NetMessageConnectionCrashed methods */
void   net_message_connection_crashed__init
                     (NetMessageConnectionCrashed         *message);
size_t net_message_connection_crashed__get_packed_size
                     (const NetMessageConnectionCrashed   *message);
size_t net_message_connection_crashed__pack
                     (const NetMessageConnectionCrashed   *message,
                      uint8_t             *out);
size_t net_message_connection_crashed__pack_to_buffer
                     (const NetMessageConnectionCrashed   *message,
                      ProtobufCBuffer     *buffer);
NetMessageConnectionCrashed *
       net_message_connection_crashed__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   net_message_connection_crashed__free_unpacked
                     (NetMessageConnectionCrashed *message,
                      ProtobufCAllocator *allocator);
/* NetMessagePacketStart methods */
void   net_message_packet_start__init
                     (NetMessagePacketStart         *message);
size_t net_message_packet_start__get_packed_size
                     (const NetMessagePacketStart   *message);
size_t net_message_packet_start__pack
                     (const NetMessagePacketStart   *message,
                      uint8_t             *out);
size_t net_message_packet_start__pack_to_buffer
                     (const NetMessagePacketStart   *message,
                      ProtobufCBuffer     *buffer);
NetMessagePacketStart *
       net_message_packet_start__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   net_message_packet_start__free_unpacked
                     (NetMessagePacketStart *message,
                      ProtobufCAllocator *allocator);
/* NetMessagePacketEnd methods */
void   net_message_packet_end__init
                     (NetMessagePacketEnd         *message);
size_t net_message_packet_end__get_packed_size
                     (const NetMessagePacketEnd   *message);
size_t net_message_packet_end__pack
                     (const NetMessagePacketEnd   *message,
                      uint8_t             *out);
size_t net_message_packet_end__pack_to_buffer
                     (const NetMessagePacketEnd   *message,
                      ProtobufCBuffer     *buffer);
NetMessagePacketEnd *
       net_message_packet_end__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   net_message_packet_end__free_unpacked
                     (NetMessagePacketEnd *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*NetMessageSplitscreenUserChanged_Closure)
                 (const NetMessageSplitscreenUserChanged *message,
                  void *closure_data);
typedef void (*NetMessageConnectionClosed_Closure)
                 (const NetMessageConnectionClosed *message,
                  void *closure_data);
typedef void (*NetMessageConnectionCrashed_Closure)
                 (const NetMessageConnectionCrashed *message,
                  void *closure_data);
typedef void (*NetMessagePacketStart_Closure)
                 (const NetMessagePacketStart *message,
                  void *closure_data);
typedef void (*NetMessagePacketEnd_Closure)
                 (const NetMessagePacketEnd *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor net_message_splitscreen_user_changed__descriptor;
extern const ProtobufCMessageDescriptor net_message_connection_closed__descriptor;
extern const ProtobufCMessageDescriptor net_message_connection_crashed__descriptor;
extern const ProtobufCMessageDescriptor net_message_packet_start__descriptor;
extern const ProtobufCMessageDescriptor net_message_packet_end__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_networksystem_5fprotomessages_2eproto__INCLUDED */
