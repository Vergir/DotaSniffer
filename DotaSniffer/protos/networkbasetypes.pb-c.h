/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: networkbasetypes.proto */

#ifndef PROTOBUF_C_networkbasetypes_2eproto__INCLUDED
#define PROTOBUF_C_networkbasetypes_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "network_connection.pb-c.h"

typedef struct _CMsgVector CMsgVector;
typedef struct _CMsgVector2D CMsgVector2D;
typedef struct _CMsgQAngle CMsgQAngle;
typedef struct _CMsgPlayerInfo CMsgPlayerInfo;
typedef struct _CMsgCVars CMsgCVars;
typedef struct _CMsgCVars__CVar CMsgCVars__CVar;
typedef struct _CNETMsgNOP CNETMsgNOP;
typedef struct _CNETMsgSplitScreenUser CNETMsgSplitScreenUser;
typedef struct _CNETMsgDisconnect CNETMsgDisconnect;
typedef struct _CNETMsgTick CNETMsgTick;
typedef struct _CNETMsgStringCmd CNETMsgStringCmd;
typedef struct _CNETMsgSetConVar CNETMsgSetConVar;
typedef struct _CNETMsgSignonState CNETMsgSignonState;
typedef struct _CSVCMsgGameEvent CSVCMsgGameEvent;
typedef struct _CSVCMsgGameEvent__KeyT CSVCMsgGameEvent__KeyT;
typedef struct _CSVCMsgListGameEvents CSVCMsgListGameEvents;
typedef struct _CSVCMsgListGameEvents__EventT CSVCMsgListGameEvents__EventT;
typedef struct _CSVCMsgUserMessage CSVCMsgUserMessage;
typedef struct _CSVCMsgListUserMessages CSVCMsgListUserMessages;
typedef struct _CSVCMsgListUserMessages__UsermsgT CSVCMsgListUserMessages__UsermsgT;
typedef struct _CNETMsgSpawnGroupLoad CNETMsgSpawnGroupLoad;
typedef struct _CNETMsgSpawnGroupManifestUpdate CNETMsgSpawnGroupManifestUpdate;
typedef struct _CNETMsgSpawnGroupSetCreationTick CNETMsgSpawnGroupSetCreationTick;
typedef struct _CNETMsgSpawnGroupUnload CNETMsgSpawnGroupUnload;
typedef struct _CNETMsgSpawnGroupLoadCompleted CNETMsgSpawnGroupLoadCompleted;
typedef struct _CSVCMsgGameSessionConfiguration CSVCMsgGameSessionConfiguration;


/* --- enums --- */

typedef enum _NETMessages {
  NET__MESSAGES__net_NOP = 0,
  NET__MESSAGES__net_Disconnect = 1,
  NET__MESSAGES__net_SplitScreenUser = 3,
  NET__MESSAGES__net_Tick = 4,
  NET__MESSAGES__net_StringCmd = 5,
  NET__MESSAGES__net_SetConVar = 6,
  NET__MESSAGES__net_SignonState = 7,
  NET__MESSAGES__net_SpawnGroup_Load = 8,
  NET__MESSAGES__net_SpawnGroup_ManifestUpdate = 9,
  NET__MESSAGES__net_SpawnGroup_SetCreationTick = 11,
  NET__MESSAGES__net_SpawnGroup_Unload = 12,
  NET__MESSAGES__net_SpawnGroup_LoadCompleted = 13
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(NET__MESSAGES)
} NETMessages;
typedef enum _SpawnGroupFlagsT {
  SPAWN_GROUP_FLAGS_T__SPAWN_GROUP_LOAD_ENTITIES_FROM_SAVE = 1,
  SPAWN_GROUP_FLAGS_T__SPAWN_GROUP_DONT_SPAWN_ENTITIES = 2,
  SPAWN_GROUP_FLAGS_T__SPAWN_GROUP_SYNCHRONOUS_SPAWN = 4,
  SPAWN_GROUP_FLAGS_T__SPAWN_GROUP_IS_INITIAL_SPAWN_GROUP = 8,
  SPAWN_GROUP_FLAGS_T__SPAWN_GROUP_CREATE_CLIENT_ONLY_ENTITIES = 16,
  SPAWN_GROUP_FLAGS_T__SPAWN_GROUP_SAVE_ENTITIES = 32,
  SPAWN_GROUP_FLAGS_T__SPAWN_GROUP_BLOCK_UNTIL_LOADED = 64,
  SPAWN_GROUP_FLAGS_T__SPAWN_GROUP_LOAD_STREAMING_DATA = 128,
  SPAWN_GROUP_FLAGS_T__SPAWN_GROUP_CREATE_NEW_SCENE_WORLD = 256
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SPAWN_GROUP_FLAGS_T)
} SpawnGroupFlagsT;

/* --- messages --- */

struct  _CMsgVector
{
  ProtobufCMessage base;
  protobuf_c_boolean has_x;
  float x;
  protobuf_c_boolean has_y;
  float y;
  protobuf_c_boolean has_z;
  float z;
};
#define CMSG_VECTOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_vector__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _CMsgVector2D
{
  ProtobufCMessage base;
  protobuf_c_boolean has_x;
  float x;
  protobuf_c_boolean has_y;
  float y;
};
#define CMSG_VECTOR2_D__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_vector2_d__descriptor) \
    , 0,0, 0,0 }


struct  _CMsgQAngle
{
  ProtobufCMessage base;
  protobuf_c_boolean has_x;
  float x;
  protobuf_c_boolean has_y;
  float y;
  protobuf_c_boolean has_z;
  float z;
};
#define CMSG_QANGLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_qangle__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _CMsgPlayerInfo
{
  ProtobufCMessage base;
  char *name;
  protobuf_c_boolean has_xuid;
  uint64_t xuid;
  protobuf_c_boolean has_userid;
  int32_t userid;
  protobuf_c_boolean has_steamid;
  uint64_t steamid;
  protobuf_c_boolean has_fakeplayer;
  protobuf_c_boolean fakeplayer;
  protobuf_c_boolean has_ishltv;
  protobuf_c_boolean ishltv;
};
#define CMSG_PLAYER_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_player_info__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgCVars__CVar
{
  ProtobufCMessage base;
  char *name;
  char *value;
};
#define CMSG__CVARS__CVAR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg__cvars__cvar__descriptor) \
    , NULL, NULL }


struct  _CMsgCVars
{
  ProtobufCMessage base;
  size_t n_cvars;
  CMsgCVars__CVar **cvars;
};
#define CMSG__CVARS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg__cvars__descriptor) \
    , 0,NULL }


struct  _CNETMsgNOP
{
  ProtobufCMessage base;
};
#define CNETMSG__NOP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cnetmsg__nop__descriptor) \
     }


struct  _CNETMsgSplitScreenUser
{
  ProtobufCMessage base;
  protobuf_c_boolean has_slot;
  int32_t slot;
};
#define CNETMSG__SPLIT_SCREEN_USER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cnetmsg__split_screen_user__descriptor) \
    , 0,0 }


struct  _CNETMsgDisconnect
{
  ProtobufCMessage base;
  protobuf_c_boolean has_reason;
  ENetworkDisconnectionReason reason;
};
#define CNETMSG__DISCONNECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cnetmsg__disconnect__descriptor) \
    , 0,ENETWORK_DISCONNECTION_REASON__NETWORK_DISCONNECT_INVALID }


struct  _CNETMsgTick
{
  ProtobufCMessage base;
  protobuf_c_boolean has_tick;
  uint32_t tick;
  protobuf_c_boolean has_host_frametime;
  uint32_t host_frametime;
  protobuf_c_boolean has_host_frametime_std_deviation;
  uint32_t host_frametime_std_deviation;
  protobuf_c_boolean has_host_computationtime;
  uint32_t host_computationtime;
  protobuf_c_boolean has_host_computationtime_std_deviation;
  uint32_t host_computationtime_std_deviation;
  protobuf_c_boolean has_host_framestarttime_std_deviation;
  uint32_t host_framestarttime_std_deviation;
};
#define CNETMSG__TICK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cnetmsg__tick__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CNETMsgStringCmd
{
  ProtobufCMessage base;
  char *command;
};
#define CNETMSG__STRING_CMD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cnetmsg__string_cmd__descriptor) \
    , NULL }


struct  _CNETMsgSetConVar
{
  ProtobufCMessage base;
  CMsgCVars *convars;
};
#define CNETMSG__SET_CON_VAR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cnetmsg__set_con_var__descriptor) \
    , NULL }


struct  _CNETMsgSignonState
{
  ProtobufCMessage base;
  protobuf_c_boolean has_signon_state;
  uint32_t signon_state;
  protobuf_c_boolean has_spawn_count;
  uint32_t spawn_count;
  protobuf_c_boolean has_num_server_players;
  uint32_t num_server_players;
  size_t n_players_networkids;
  char **players_networkids;
  char *map_name;
};
#define CNETMSG__SIGNON_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cnetmsg__signon_state__descriptor) \
    , 0,0, 0,0, 0,0, 0,NULL, NULL }


struct  _CSVCMsgGameEvent__KeyT
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  int32_t type;
  char *val_string;
  protobuf_c_boolean has_val_float;
  float val_float;
  protobuf_c_boolean has_val_long;
  int32_t val_long;
  protobuf_c_boolean has_val_short;
  int32_t val_short;
  protobuf_c_boolean has_val_byte;
  int32_t val_byte;
  protobuf_c_boolean has_val_bool;
  protobuf_c_boolean val_bool;
  protobuf_c_boolean has_val_uint64;
  uint64_t val_uint64;
};
#define CSVCMSG__GAME_EVENT__KEY_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__game_event__key_t__descriptor) \
    , 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CSVCMsgGameEvent
{
  ProtobufCMessage base;
  char *event_name;
  protobuf_c_boolean has_eventid;
  int32_t eventid;
  size_t n_keys;
  CSVCMsgGameEvent__KeyT **keys;
};
#define CSVCMSG__GAME_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__game_event__descriptor) \
    , NULL, 0,0, 0,NULL }


struct  _CSVCMsgListGameEvents__EventT
{
  ProtobufCMessage base;
  protobuf_c_boolean has_tick;
  int32_t tick;
  CSVCMsgGameEvent *event;
};
#define CSVCMSG_LIST__GAME_EVENTS__EVENT_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg_list__game_events__event_t__descriptor) \
    , 0,0, NULL }


struct  _CSVCMsgListGameEvents
{
  ProtobufCMessage base;
  size_t n_events;
  CSVCMsgListGameEvents__EventT **events;
};
#define CSVCMSG_LIST__GAME_EVENTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg_list__game_events__descriptor) \
    , 0,NULL }


struct  _CSVCMsgUserMessage
{
  ProtobufCMessage base;
  protobuf_c_boolean has_msg_type;
  int32_t msg_type;
  protobuf_c_boolean has_msg_data;
  ProtobufCBinaryData msg_data;
};
#define CSVCMSG__USER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__user_message__descriptor) \
    , 0,0, 0,{0,NULL} }


struct  _CSVCMsgListUserMessages__UsermsgT
{
  ProtobufCMessage base;
  protobuf_c_boolean has_tick;
  int32_t tick;
  CSVCMsgUserMessage *msg;
};
#define CSVCMSG_LIST__USER_MESSAGES__USERMSG_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg_list__user_messages__usermsg_t__descriptor) \
    , 0,0, NULL }


struct  _CSVCMsgListUserMessages
{
  ProtobufCMessage base;
  size_t n_usermsgs;
  CSVCMsgListUserMessages__UsermsgT **usermsgs;
};
#define CSVCMSG_LIST__USER_MESSAGES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg_list__user_messages__descriptor) \
    , 0,NULL }


struct  _CNETMsgSpawnGroupLoad
{
  ProtobufCMessage base;
  char *worldname;
  char *entitylumpname;
  char *entityfiltername;
  protobuf_c_boolean has_spawngrouphandle;
  uint32_t spawngrouphandle;
  protobuf_c_boolean has_spawngroupownerhandle;
  uint32_t spawngroupownerhandle;
  CMsgVector *world_offset_pos;
  CMsgQAngle *world_offset_angle;
  protobuf_c_boolean has_spawngroupmanifest;
  ProtobufCBinaryData spawngroupmanifest;
  protobuf_c_boolean has_flags;
  uint32_t flags;
  protobuf_c_boolean has_tickcount;
  int32_t tickcount;
  protobuf_c_boolean has_manifestincomplete;
  protobuf_c_boolean manifestincomplete;
  char *localnamefixup;
  char *parentnamefixup;
  protobuf_c_boolean has_manifestloadpriority;
  int32_t manifestloadpriority;
  protobuf_c_boolean has_worldgroupid;
  uint32_t worldgroupid;
  protobuf_c_boolean has_creationsequence;
  uint32_t creationsequence;
  char *savegamefilename;
};
#define CNETMSG__SPAWN_GROUP__LOAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cnetmsg__spawn_group__load__descriptor) \
    , NULL, NULL, NULL, 0,0, 0,0, NULL, NULL, 0,{0,NULL}, 0,0, 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,0, NULL }


struct  _CNETMsgSpawnGroupManifestUpdate
{
  ProtobufCMessage base;
  protobuf_c_boolean has_spawngrouphandle;
  uint32_t spawngrouphandle;
  protobuf_c_boolean has_spawngroupmanifest;
  ProtobufCBinaryData spawngroupmanifest;
  protobuf_c_boolean has_manifestincomplete;
  protobuf_c_boolean manifestincomplete;
};
#define CNETMSG__SPAWN_GROUP__MANIFEST_UPDATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cnetmsg__spawn_group__manifest_update__descriptor) \
    , 0,0, 0,{0,NULL}, 0,0 }


struct  _CNETMsgSpawnGroupSetCreationTick
{
  ProtobufCMessage base;
  protobuf_c_boolean has_spawngrouphandle;
  uint32_t spawngrouphandle;
  protobuf_c_boolean has_tickcount;
  int32_t tickcount;
  protobuf_c_boolean has_creationsequence;
  uint32_t creationsequence;
};
#define CNETMSG__SPAWN_GROUP__SET_CREATION_TICK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cnetmsg__spawn_group__set_creation_tick__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _CNETMsgSpawnGroupUnload
{
  ProtobufCMessage base;
  protobuf_c_boolean has_spawngrouphandle;
  uint32_t spawngrouphandle;
  protobuf_c_boolean has_flags;
  uint32_t flags;
  protobuf_c_boolean has_tickcount;
  int32_t tickcount;
};
#define CNETMSG__SPAWN_GROUP__UNLOAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cnetmsg__spawn_group__unload__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _CNETMsgSpawnGroupLoadCompleted
{
  ProtobufCMessage base;
  protobuf_c_boolean has_spawngrouphandle;
  uint32_t spawngrouphandle;
};
#define CNETMSG__SPAWN_GROUP__LOAD_COMPLETED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cnetmsg__spawn_group__load_completed__descriptor) \
    , 0,0 }


struct  _CSVCMsgGameSessionConfiguration
{
  ProtobufCMessage base;
  protobuf_c_boolean has_is_multiplayer;
  protobuf_c_boolean is_multiplayer;
  protobuf_c_boolean has_is_loadsavegame;
  protobuf_c_boolean is_loadsavegame;
  protobuf_c_boolean has_is_background_map;
  protobuf_c_boolean is_background_map;
  protobuf_c_boolean has_is_headless;
  protobuf_c_boolean is_headless;
  protobuf_c_boolean has_min_client_limit;
  uint32_t min_client_limit;
  protobuf_c_boolean has_max_client_limit;
  uint32_t max_client_limit;
  protobuf_c_boolean has_max_clients;
  uint32_t max_clients;
  protobuf_c_boolean has_tick_interval;
  uint32_t tick_interval;
  char *hostname;
  char *savegamename;
  char *s1_mapname;
  char *gamemode;
  char *server_ip_address;
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
  protobuf_c_boolean has_is_localonly;
  protobuf_c_boolean is_localonly;
};
#define CSVCMSG__GAME_SESSION_CONFIGURATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__game_session_configuration__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, NULL, NULL, 0,{0,NULL}, 0,0 }


/* CMsgVector methods */
void   cmsg_vector__init
                     (CMsgVector         *message);
size_t cmsg_vector__get_packed_size
                     (const CMsgVector   *message);
size_t cmsg_vector__pack
                     (const CMsgVector   *message,
                      uint8_t             *out);
size_t cmsg_vector__pack_to_buffer
                     (const CMsgVector   *message,
                      ProtobufCBuffer     *buffer);
CMsgVector *
       cmsg_vector__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_vector__free_unpacked
                     (CMsgVector *message,
                      ProtobufCAllocator *allocator);
/* CMsgVector2D methods */
void   cmsg_vector2_d__init
                     (CMsgVector2D         *message);
size_t cmsg_vector2_d__get_packed_size
                     (const CMsgVector2D   *message);
size_t cmsg_vector2_d__pack
                     (const CMsgVector2D   *message,
                      uint8_t             *out);
size_t cmsg_vector2_d__pack_to_buffer
                     (const CMsgVector2D   *message,
                      ProtobufCBuffer     *buffer);
CMsgVector2D *
       cmsg_vector2_d__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_vector2_d__free_unpacked
                     (CMsgVector2D *message,
                      ProtobufCAllocator *allocator);
/* CMsgQAngle methods */
void   cmsg_qangle__init
                     (CMsgQAngle         *message);
size_t cmsg_qangle__get_packed_size
                     (const CMsgQAngle   *message);
size_t cmsg_qangle__pack
                     (const CMsgQAngle   *message,
                      uint8_t             *out);
size_t cmsg_qangle__pack_to_buffer
                     (const CMsgQAngle   *message,
                      ProtobufCBuffer     *buffer);
CMsgQAngle *
       cmsg_qangle__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_qangle__free_unpacked
                     (CMsgQAngle *message,
                      ProtobufCAllocator *allocator);
/* CMsgPlayerInfo methods */
void   cmsg_player_info__init
                     (CMsgPlayerInfo         *message);
size_t cmsg_player_info__get_packed_size
                     (const CMsgPlayerInfo   *message);
size_t cmsg_player_info__pack
                     (const CMsgPlayerInfo   *message,
                      uint8_t             *out);
size_t cmsg_player_info__pack_to_buffer
                     (const CMsgPlayerInfo   *message,
                      ProtobufCBuffer     *buffer);
CMsgPlayerInfo *
       cmsg_player_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_player_info__free_unpacked
                     (CMsgPlayerInfo *message,
                      ProtobufCAllocator *allocator);
/* CMsgCVars__CVar methods */
void   cmsg__cvars__cvar__init
                     (CMsgCVars__CVar         *message);
/* CMsgCVars methods */
void   cmsg__cvars__init
                     (CMsgCVars         *message);
size_t cmsg__cvars__get_packed_size
                     (const CMsgCVars   *message);
size_t cmsg__cvars__pack
                     (const CMsgCVars   *message,
                      uint8_t             *out);
size_t cmsg__cvars__pack_to_buffer
                     (const CMsgCVars   *message,
                      ProtobufCBuffer     *buffer);
CMsgCVars *
       cmsg__cvars__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg__cvars__free_unpacked
                     (CMsgCVars *message,
                      ProtobufCAllocator *allocator);
/* CNETMsgNOP methods */
void   cnetmsg__nop__init
                     (CNETMsgNOP         *message);
size_t cnetmsg__nop__get_packed_size
                     (const CNETMsgNOP   *message);
size_t cnetmsg__nop__pack
                     (const CNETMsgNOP   *message,
                      uint8_t             *out);
size_t cnetmsg__nop__pack_to_buffer
                     (const CNETMsgNOP   *message,
                      ProtobufCBuffer     *buffer);
CNETMsgNOP *
       cnetmsg__nop__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cnetmsg__nop__free_unpacked
                     (CNETMsgNOP *message,
                      ProtobufCAllocator *allocator);
/* CNETMsgSplitScreenUser methods */
void   cnetmsg__split_screen_user__init
                     (CNETMsgSplitScreenUser         *message);
size_t cnetmsg__split_screen_user__get_packed_size
                     (const CNETMsgSplitScreenUser   *message);
size_t cnetmsg__split_screen_user__pack
                     (const CNETMsgSplitScreenUser   *message,
                      uint8_t             *out);
size_t cnetmsg__split_screen_user__pack_to_buffer
                     (const CNETMsgSplitScreenUser   *message,
                      ProtobufCBuffer     *buffer);
CNETMsgSplitScreenUser *
       cnetmsg__split_screen_user__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cnetmsg__split_screen_user__free_unpacked
                     (CNETMsgSplitScreenUser *message,
                      ProtobufCAllocator *allocator);
/* CNETMsgDisconnect methods */
void   cnetmsg__disconnect__init
                     (CNETMsgDisconnect         *message);
size_t cnetmsg__disconnect__get_packed_size
                     (const CNETMsgDisconnect   *message);
size_t cnetmsg__disconnect__pack
                     (const CNETMsgDisconnect   *message,
                      uint8_t             *out);
size_t cnetmsg__disconnect__pack_to_buffer
                     (const CNETMsgDisconnect   *message,
                      ProtobufCBuffer     *buffer);
CNETMsgDisconnect *
       cnetmsg__disconnect__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cnetmsg__disconnect__free_unpacked
                     (CNETMsgDisconnect *message,
                      ProtobufCAllocator *allocator);
/* CNETMsgTick methods */
void   cnetmsg__tick__init
                     (CNETMsgTick         *message);
size_t cnetmsg__tick__get_packed_size
                     (const CNETMsgTick   *message);
size_t cnetmsg__tick__pack
                     (const CNETMsgTick   *message,
                      uint8_t             *out);
size_t cnetmsg__tick__pack_to_buffer
                     (const CNETMsgTick   *message,
                      ProtobufCBuffer     *buffer);
CNETMsgTick *
       cnetmsg__tick__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cnetmsg__tick__free_unpacked
                     (CNETMsgTick *message,
                      ProtobufCAllocator *allocator);
/* CNETMsgStringCmd methods */
void   cnetmsg__string_cmd__init
                     (CNETMsgStringCmd         *message);
size_t cnetmsg__string_cmd__get_packed_size
                     (const CNETMsgStringCmd   *message);
size_t cnetmsg__string_cmd__pack
                     (const CNETMsgStringCmd   *message,
                      uint8_t             *out);
size_t cnetmsg__string_cmd__pack_to_buffer
                     (const CNETMsgStringCmd   *message,
                      ProtobufCBuffer     *buffer);
CNETMsgStringCmd *
       cnetmsg__string_cmd__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cnetmsg__string_cmd__free_unpacked
                     (CNETMsgStringCmd *message,
                      ProtobufCAllocator *allocator);
/* CNETMsgSetConVar methods */
void   cnetmsg__set_con_var__init
                     (CNETMsgSetConVar         *message);
size_t cnetmsg__set_con_var__get_packed_size
                     (const CNETMsgSetConVar   *message);
size_t cnetmsg__set_con_var__pack
                     (const CNETMsgSetConVar   *message,
                      uint8_t             *out);
size_t cnetmsg__set_con_var__pack_to_buffer
                     (const CNETMsgSetConVar   *message,
                      ProtobufCBuffer     *buffer);
CNETMsgSetConVar *
       cnetmsg__set_con_var__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cnetmsg__set_con_var__free_unpacked
                     (CNETMsgSetConVar *message,
                      ProtobufCAllocator *allocator);
/* CNETMsgSignonState methods */
void   cnetmsg__signon_state__init
                     (CNETMsgSignonState         *message);
size_t cnetmsg__signon_state__get_packed_size
                     (const CNETMsgSignonState   *message);
size_t cnetmsg__signon_state__pack
                     (const CNETMsgSignonState   *message,
                      uint8_t             *out);
size_t cnetmsg__signon_state__pack_to_buffer
                     (const CNETMsgSignonState   *message,
                      ProtobufCBuffer     *buffer);
CNETMsgSignonState *
       cnetmsg__signon_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cnetmsg__signon_state__free_unpacked
                     (CNETMsgSignonState *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgGameEvent__KeyT methods */
void   csvcmsg__game_event__key_t__init
                     (CSVCMsgGameEvent__KeyT         *message);
/* CSVCMsgGameEvent methods */
void   csvcmsg__game_event__init
                     (CSVCMsgGameEvent         *message);
size_t csvcmsg__game_event__get_packed_size
                     (const CSVCMsgGameEvent   *message);
size_t csvcmsg__game_event__pack
                     (const CSVCMsgGameEvent   *message,
                      uint8_t             *out);
size_t csvcmsg__game_event__pack_to_buffer
                     (const CSVCMsgGameEvent   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgGameEvent *
       csvcmsg__game_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__game_event__free_unpacked
                     (CSVCMsgGameEvent *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgListGameEvents__EventT methods */
void   csvcmsg_list__game_events__event_t__init
                     (CSVCMsgListGameEvents__EventT         *message);
/* CSVCMsgListGameEvents methods */
void   csvcmsg_list__game_events__init
                     (CSVCMsgListGameEvents         *message);
size_t csvcmsg_list__game_events__get_packed_size
                     (const CSVCMsgListGameEvents   *message);
size_t csvcmsg_list__game_events__pack
                     (const CSVCMsgListGameEvents   *message,
                      uint8_t             *out);
size_t csvcmsg_list__game_events__pack_to_buffer
                     (const CSVCMsgListGameEvents   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgListGameEvents *
       csvcmsg_list__game_events__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg_list__game_events__free_unpacked
                     (CSVCMsgListGameEvents *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgUserMessage methods */
void   csvcmsg__user_message__init
                     (CSVCMsgUserMessage         *message);
size_t csvcmsg__user_message__get_packed_size
                     (const CSVCMsgUserMessage   *message);
size_t csvcmsg__user_message__pack
                     (const CSVCMsgUserMessage   *message,
                      uint8_t             *out);
size_t csvcmsg__user_message__pack_to_buffer
                     (const CSVCMsgUserMessage   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgUserMessage *
       csvcmsg__user_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__user_message__free_unpacked
                     (CSVCMsgUserMessage *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgListUserMessages__UsermsgT methods */
void   csvcmsg_list__user_messages__usermsg_t__init
                     (CSVCMsgListUserMessages__UsermsgT         *message);
/* CSVCMsgListUserMessages methods */
void   csvcmsg_list__user_messages__init
                     (CSVCMsgListUserMessages         *message);
size_t csvcmsg_list__user_messages__get_packed_size
                     (const CSVCMsgListUserMessages   *message);
size_t csvcmsg_list__user_messages__pack
                     (const CSVCMsgListUserMessages   *message,
                      uint8_t             *out);
size_t csvcmsg_list__user_messages__pack_to_buffer
                     (const CSVCMsgListUserMessages   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgListUserMessages *
       csvcmsg_list__user_messages__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg_list__user_messages__free_unpacked
                     (CSVCMsgListUserMessages *message,
                      ProtobufCAllocator *allocator);
/* CNETMsgSpawnGroupLoad methods */
void   cnetmsg__spawn_group__load__init
                     (CNETMsgSpawnGroupLoad         *message);
size_t cnetmsg__spawn_group__load__get_packed_size
                     (const CNETMsgSpawnGroupLoad   *message);
size_t cnetmsg__spawn_group__load__pack
                     (const CNETMsgSpawnGroupLoad   *message,
                      uint8_t             *out);
size_t cnetmsg__spawn_group__load__pack_to_buffer
                     (const CNETMsgSpawnGroupLoad   *message,
                      ProtobufCBuffer     *buffer);
CNETMsgSpawnGroupLoad *
       cnetmsg__spawn_group__load__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cnetmsg__spawn_group__load__free_unpacked
                     (CNETMsgSpawnGroupLoad *message,
                      ProtobufCAllocator *allocator);
/* CNETMsgSpawnGroupManifestUpdate methods */
void   cnetmsg__spawn_group__manifest_update__init
                     (CNETMsgSpawnGroupManifestUpdate         *message);
size_t cnetmsg__spawn_group__manifest_update__get_packed_size
                     (const CNETMsgSpawnGroupManifestUpdate   *message);
size_t cnetmsg__spawn_group__manifest_update__pack
                     (const CNETMsgSpawnGroupManifestUpdate   *message,
                      uint8_t             *out);
size_t cnetmsg__spawn_group__manifest_update__pack_to_buffer
                     (const CNETMsgSpawnGroupManifestUpdate   *message,
                      ProtobufCBuffer     *buffer);
CNETMsgSpawnGroupManifestUpdate *
       cnetmsg__spawn_group__manifest_update__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cnetmsg__spawn_group__manifest_update__free_unpacked
                     (CNETMsgSpawnGroupManifestUpdate *message,
                      ProtobufCAllocator *allocator);
/* CNETMsgSpawnGroupSetCreationTick methods */
void   cnetmsg__spawn_group__set_creation_tick__init
                     (CNETMsgSpawnGroupSetCreationTick         *message);
size_t cnetmsg__spawn_group__set_creation_tick__get_packed_size
                     (const CNETMsgSpawnGroupSetCreationTick   *message);
size_t cnetmsg__spawn_group__set_creation_tick__pack
                     (const CNETMsgSpawnGroupSetCreationTick   *message,
                      uint8_t             *out);
size_t cnetmsg__spawn_group__set_creation_tick__pack_to_buffer
                     (const CNETMsgSpawnGroupSetCreationTick   *message,
                      ProtobufCBuffer     *buffer);
CNETMsgSpawnGroupSetCreationTick *
       cnetmsg__spawn_group__set_creation_tick__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cnetmsg__spawn_group__set_creation_tick__free_unpacked
                     (CNETMsgSpawnGroupSetCreationTick *message,
                      ProtobufCAllocator *allocator);
/* CNETMsgSpawnGroupUnload methods */
void   cnetmsg__spawn_group__unload__init
                     (CNETMsgSpawnGroupUnload         *message);
size_t cnetmsg__spawn_group__unload__get_packed_size
                     (const CNETMsgSpawnGroupUnload   *message);
size_t cnetmsg__spawn_group__unload__pack
                     (const CNETMsgSpawnGroupUnload   *message,
                      uint8_t             *out);
size_t cnetmsg__spawn_group__unload__pack_to_buffer
                     (const CNETMsgSpawnGroupUnload   *message,
                      ProtobufCBuffer     *buffer);
CNETMsgSpawnGroupUnload *
       cnetmsg__spawn_group__unload__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cnetmsg__spawn_group__unload__free_unpacked
                     (CNETMsgSpawnGroupUnload *message,
                      ProtobufCAllocator *allocator);
/* CNETMsgSpawnGroupLoadCompleted methods */
void   cnetmsg__spawn_group__load_completed__init
                     (CNETMsgSpawnGroupLoadCompleted         *message);
size_t cnetmsg__spawn_group__load_completed__get_packed_size
                     (const CNETMsgSpawnGroupLoadCompleted   *message);
size_t cnetmsg__spawn_group__load_completed__pack
                     (const CNETMsgSpawnGroupLoadCompleted   *message,
                      uint8_t             *out);
size_t cnetmsg__spawn_group__load_completed__pack_to_buffer
                     (const CNETMsgSpawnGroupLoadCompleted   *message,
                      ProtobufCBuffer     *buffer);
CNETMsgSpawnGroupLoadCompleted *
       cnetmsg__spawn_group__load_completed__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cnetmsg__spawn_group__load_completed__free_unpacked
                     (CNETMsgSpawnGroupLoadCompleted *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgGameSessionConfiguration methods */
void   csvcmsg__game_session_configuration__init
                     (CSVCMsgGameSessionConfiguration         *message);
size_t csvcmsg__game_session_configuration__get_packed_size
                     (const CSVCMsgGameSessionConfiguration   *message);
size_t csvcmsg__game_session_configuration__pack
                     (const CSVCMsgGameSessionConfiguration   *message,
                      uint8_t             *out);
size_t csvcmsg__game_session_configuration__pack_to_buffer
                     (const CSVCMsgGameSessionConfiguration   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgGameSessionConfiguration *
       csvcmsg__game_session_configuration__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__game_session_configuration__free_unpacked
                     (CSVCMsgGameSessionConfiguration *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CMsgVector_Closure)
                 (const CMsgVector *message,
                  void *closure_data);
typedef void (*CMsgVector2D_Closure)
                 (const CMsgVector2D *message,
                  void *closure_data);
typedef void (*CMsgQAngle_Closure)
                 (const CMsgQAngle *message,
                  void *closure_data);
typedef void (*CMsgPlayerInfo_Closure)
                 (const CMsgPlayerInfo *message,
                  void *closure_data);
typedef void (*CMsgCVars__CVar_Closure)
                 (const CMsgCVars__CVar *message,
                  void *closure_data);
typedef void (*CMsgCVars_Closure)
                 (const CMsgCVars *message,
                  void *closure_data);
typedef void (*CNETMsgNOP_Closure)
                 (const CNETMsgNOP *message,
                  void *closure_data);
typedef void (*CNETMsgSplitScreenUser_Closure)
                 (const CNETMsgSplitScreenUser *message,
                  void *closure_data);
typedef void (*CNETMsgDisconnect_Closure)
                 (const CNETMsgDisconnect *message,
                  void *closure_data);
typedef void (*CNETMsgTick_Closure)
                 (const CNETMsgTick *message,
                  void *closure_data);
typedef void (*CNETMsgStringCmd_Closure)
                 (const CNETMsgStringCmd *message,
                  void *closure_data);
typedef void (*CNETMsgSetConVar_Closure)
                 (const CNETMsgSetConVar *message,
                  void *closure_data);
typedef void (*CNETMsgSignonState_Closure)
                 (const CNETMsgSignonState *message,
                  void *closure_data);
typedef void (*CSVCMsgGameEvent__KeyT_Closure)
                 (const CSVCMsgGameEvent__KeyT *message,
                  void *closure_data);
typedef void (*CSVCMsgGameEvent_Closure)
                 (const CSVCMsgGameEvent *message,
                  void *closure_data);
typedef void (*CSVCMsgListGameEvents__EventT_Closure)
                 (const CSVCMsgListGameEvents__EventT *message,
                  void *closure_data);
typedef void (*CSVCMsgListGameEvents_Closure)
                 (const CSVCMsgListGameEvents *message,
                  void *closure_data);
typedef void (*CSVCMsgUserMessage_Closure)
                 (const CSVCMsgUserMessage *message,
                  void *closure_data);
typedef void (*CSVCMsgListUserMessages__UsermsgT_Closure)
                 (const CSVCMsgListUserMessages__UsermsgT *message,
                  void *closure_data);
typedef void (*CSVCMsgListUserMessages_Closure)
                 (const CSVCMsgListUserMessages *message,
                  void *closure_data);
typedef void (*CNETMsgSpawnGroupLoad_Closure)
                 (const CNETMsgSpawnGroupLoad *message,
                  void *closure_data);
typedef void (*CNETMsgSpawnGroupManifestUpdate_Closure)
                 (const CNETMsgSpawnGroupManifestUpdate *message,
                  void *closure_data);
typedef void (*CNETMsgSpawnGroupSetCreationTick_Closure)
                 (const CNETMsgSpawnGroupSetCreationTick *message,
                  void *closure_data);
typedef void (*CNETMsgSpawnGroupUnload_Closure)
                 (const CNETMsgSpawnGroupUnload *message,
                  void *closure_data);
typedef void (*CNETMsgSpawnGroupLoadCompleted_Closure)
                 (const CNETMsgSpawnGroupLoadCompleted *message,
                  void *closure_data);
typedef void (*CSVCMsgGameSessionConfiguration_Closure)
                 (const CSVCMsgGameSessionConfiguration *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    net__messages__descriptor;
extern const ProtobufCEnumDescriptor    spawn_group_flags_t__descriptor;
extern const ProtobufCMessageDescriptor cmsg_vector__descriptor;
extern const ProtobufCMessageDescriptor cmsg_vector2_d__descriptor;
extern const ProtobufCMessageDescriptor cmsg_qangle__descriptor;
extern const ProtobufCMessageDescriptor cmsg_player_info__descriptor;
extern const ProtobufCMessageDescriptor cmsg__cvars__descriptor;
extern const ProtobufCMessageDescriptor cmsg__cvars__cvar__descriptor;
extern const ProtobufCMessageDescriptor cnetmsg__nop__descriptor;
extern const ProtobufCMessageDescriptor cnetmsg__split_screen_user__descriptor;
extern const ProtobufCMessageDescriptor cnetmsg__disconnect__descriptor;
extern const ProtobufCMessageDescriptor cnetmsg__tick__descriptor;
extern const ProtobufCMessageDescriptor cnetmsg__string_cmd__descriptor;
extern const ProtobufCMessageDescriptor cnetmsg__set_con_var__descriptor;
extern const ProtobufCMessageDescriptor cnetmsg__signon_state__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__game_event__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__game_event__key_t__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg_list__game_events__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg_list__game_events__event_t__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__user_message__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg_list__user_messages__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg_list__user_messages__usermsg_t__descriptor;
extern const ProtobufCMessageDescriptor cnetmsg__spawn_group__load__descriptor;
extern const ProtobufCMessageDescriptor cnetmsg__spawn_group__manifest_update__descriptor;
extern const ProtobufCMessageDescriptor cnetmsg__spawn_group__set_creation_tick__descriptor;
extern const ProtobufCMessageDescriptor cnetmsg__spawn_group__unload__descriptor;
extern const ProtobufCMessageDescriptor cnetmsg__spawn_group__load_completed__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__game_session_configuration__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_networkbasetypes_2eproto__INCLUDED */
