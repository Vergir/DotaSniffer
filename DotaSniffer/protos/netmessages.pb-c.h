/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: netmessages.proto */

#ifndef PROTOBUF_C_netmessages_2eproto__INCLUDED
#define PROTOBUF_C_netmessages_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "networkbasetypes.pb-c.h"

typedef struct _CCLCMsgClientInfo CCLCMsgClientInfo;
typedef struct _CCLCMsgMove CCLCMsgMove;
typedef struct _CMsgVoiceAudio CMsgVoiceAudio;
typedef struct _CCLCMsgVoiceData CCLCMsgVoiceData;
typedef struct _CCLCMsgBaselineAck CCLCMsgBaselineAck;
typedef struct _CCLCMsgListenEvents CCLCMsgListenEvents;
typedef struct _CCLCMsgRespondCvarValue CCLCMsgRespondCvarValue;
typedef struct _CCLCMsgFileCRCCheck CCLCMsgFileCRCCheck;
typedef struct _CCLCMsgLoadingProgress CCLCMsgLoadingProgress;
typedef struct _CCLCMsgSplitPlayerConnect CCLCMsgSplitPlayerConnect;
typedef struct _CCLCMsgClientMessage CCLCMsgClientMessage;
typedef struct _CCLCMsgSplitPlayerDisconnect CCLCMsgSplitPlayerDisconnect;
typedef struct _CCLCMsgServerStatus CCLCMsgServerStatus;
typedef struct _CCLCMsgServerPing CCLCMsgServerPing;
typedef struct _CCLCMsgRequestPause CCLCMsgRequestPause;
typedef struct _CCLCMsgCmdKeyValues CCLCMsgCmdKeyValues;
typedef struct _CSVCMsgServerInfo CSVCMsgServerInfo;
typedef struct _CSVCMsgClassInfo CSVCMsgClassInfo;
typedef struct _CSVCMsgClassInfo__ClassT CSVCMsgClassInfo__ClassT;
typedef struct _CSVCMsgSetPause CSVCMsgSetPause;
typedef struct _CSVCMsgVoiceInit CSVCMsgVoiceInit;
typedef struct _CSVCMsgPrint CSVCMsgPrint;
typedef struct _CSVCMsgSounds CSVCMsgSounds;
typedef struct _CSVCMsgSounds__SounddataT CSVCMsgSounds__SounddataT;
typedef struct _CSVCMsgPrefetch CSVCMsgPrefetch;
typedef struct _CSVCMsgSetView CSVCMsgSetView;
typedef struct _CSVCMsgFixAngle CSVCMsgFixAngle;
typedef struct _CSVCMsgCrosshairAngle CSVCMsgCrosshairAngle;
typedef struct _CSVCMsgBSPDecal CSVCMsgBSPDecal;
typedef struct _CSVCMsgSplitScreen CSVCMsgSplitScreen;
typedef struct _CSVCMsgGetCvarValue CSVCMsgGetCvarValue;
typedef struct _CSVCMsgMenu CSVCMsgMenu;
typedef struct _CSVCMsgSendTable CSVCMsgSendTable;
typedef struct _CSVCMsgSendTable__SendpropT CSVCMsgSendTable__SendpropT;
typedef struct _CSVCMsgGameEventList CSVCMsgGameEventList;
typedef struct _CSVCMsgGameEventList__KeyT CSVCMsgGameEventList__KeyT;
typedef struct _CSVCMsgGameEventList__DescriptorT CSVCMsgGameEventList__DescriptorT;
typedef struct _CSVCMsgPacketEntities CSVCMsgPacketEntities;
typedef struct _CSVCMsgTempEntities CSVCMsgTempEntities;
typedef struct _CSVCMsgCreateStringTable CSVCMsgCreateStringTable;
typedef struct _CSVCMsgUpdateStringTable CSVCMsgUpdateStringTable;
typedef struct _CSVCMsgVoiceData CSVCMsgVoiceData;
typedef struct _CSVCMsgPacketReliable CSVCMsgPacketReliable;
typedef struct _CSVCMsgFullFrameSplit CSVCMsgFullFrameSplit;
typedef struct _CSVCMsgHLTVStatus CSVCMsgHLTVStatus;
typedef struct _CSVCMsgCmdKeyValues CSVCMsgCmdKeyValues;
typedef struct _CMsgIPCAddress CMsgIPCAddress;
typedef struct _CMsgServerPeer CMsgServerPeer;
typedef struct _CSVCMsgPeerList CSVCMsgPeerList;
typedef struct _CSVCMsgClearAllStringTables CSVCMsgClearAllStringTables;
typedef struct _ProtoFlattenedSerializerFieldT ProtoFlattenedSerializerFieldT;
typedef struct _ProtoFlattenedSerializerT ProtoFlattenedSerializerT;
typedef struct _CSVCMsgFlattenedSerializer CSVCMsgFlattenedSerializer;
typedef struct _CSVCMsgStopSound CSVCMsgStopSound;
typedef struct _CBidirMsgRebroadcastGameEvent CBidirMsgRebroadcastGameEvent;
typedef struct _CBidirMsgRebroadcastSource CBidirMsgRebroadcastSource;
typedef struct _SerializedNetAddressT SerializedNetAddressT;
typedef struct _CBidirMsgRelayInfo CBidirMsgRelayInfo;
typedef struct _SignedPayloadT SignedPayloadT;
typedef struct _CBidirMsgRelayPacket CBidirMsgRelayPacket;
typedef struct _CBidirMsgRelayPacket__SignedDestinationAddressT CBidirMsgRelayPacket__SignedDestinationAddressT;
typedef struct _CMsgServerNetworkStats CMsgServerNetworkStats;
typedef struct _CMsgServerNetworkStats__Port CMsgServerNetworkStats__Port;
typedef struct _CMsgServerNetworkStats__Player CMsgServerNetworkStats__Player;


/* --- enums --- */

typedef enum _CBidirMsgRelayInfo__OperationT {
  CBIDIR_MSG__RELAY_INFO__OPERATION_T__RIO_REQUEST_RELAY = 0,
  CBIDIR_MSG__RELAY_INFO__OPERATION_T__RIO_WILL_RELAY = 1,
  CBIDIR_MSG__RELAY_INFO__OPERATION_T__RIO_NO_ROUTE = 2,
  CBIDIR_MSG__RELAY_INFO__OPERATION_T__RIO_REJECT_RELAY = 3,
  CBIDIR_MSG__RELAY_INFO__OPERATION_T__RIO_ESTABLISH_CONNECTION = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CBIDIR_MSG__RELAY_INFO__OPERATION_T)
} CBidirMsgRelayInfo__OperationT;
typedef enum _CLCMessages {
  CLC__MESSAGES__clc_ClientInfo = 20,
  CLC__MESSAGES__clc_Move = 21,
  CLC__MESSAGES__clc_VoiceData = 22,
  CLC__MESSAGES__clc_BaselineAck = 23,
  CLC__MESSAGES__clc_ListenEvents = 24,
  CLC__MESSAGES__clc_RespondCvarValue = 25,
  CLC__MESSAGES__clc_FileCRCCheck = 26,
  CLC__MESSAGES__clc_LoadingProgress = 27,
  CLC__MESSAGES__clc_SplitPlayerConnect = 28,
  CLC__MESSAGES__clc_ClientMessage = 29,
  CLC__MESSAGES__clc_SplitPlayerDisconnect = 30,
  CLC__MESSAGES__clc_ServerStatus = 31,
  CLC__MESSAGES__clc_ServerPing = 32,
  CLC__MESSAGES__clc_RequestPause = 33,
  CLC__MESSAGES__clc_CmdKeyValues = 34
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLC__MESSAGES)
} CLCMessages;
typedef enum _SVCMessages {
  SVC__MESSAGES__svc_ServerInfo = 40,
  SVC__MESSAGES__svc_FlattenedSerializer = 41,
  SVC__MESSAGES__svc_ClassInfo = 42,
  SVC__MESSAGES__svc_SetPause = 43,
  SVC__MESSAGES__svc_CreateStringTable = 44,
  SVC__MESSAGES__svc_UpdateStringTable = 45,
  SVC__MESSAGES__svc_VoiceInit = 46,
  SVC__MESSAGES__svc_VoiceData = 47,
  SVC__MESSAGES__svc_Print = 48,
  SVC__MESSAGES__svc_Sounds = 49,
  SVC__MESSAGES__svc_SetView = 50,
  SVC__MESSAGES__svc_ClearAllStringTables = 51,
  SVC__MESSAGES__svc_CmdKeyValues = 52,
  SVC__MESSAGES__svc_BSPDecal = 53,
  SVC__MESSAGES__svc_SplitScreen = 54,
  SVC__MESSAGES__svc_PacketEntities = 55,
  SVC__MESSAGES__svc_Prefetch = 56,
  SVC__MESSAGES__svc_Menu = 57,
  SVC__MESSAGES__svc_GetCvarValue = 58,
  SVC__MESSAGES__svc_StopSound = 59,
  SVC__MESSAGES__svc_PeerList = 60,
  SVC__MESSAGES__svc_PacketReliable = 61,
  SVC__MESSAGES__svc_HLTVStatus = 62,
  SVC__MESSAGES__svc_FullFrameSplit = 70
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SVC__MESSAGES)
} SVCMessages;
typedef enum _VoiceDataFormatT {
  VOICE_DATA_FORMAT_T__VOICEDATA_FORMAT_STEAM = 0,
  VOICE_DATA_FORMAT_T__VOICEDATA_FORMAT_ENGINE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VOICE_DATA_FORMAT_T)
} VoiceDataFormatT;
typedef enum _RequestPauseT {
  REQUEST_PAUSE_T__RP_PAUSE = 0,
  REQUEST_PAUSE_T__RP_UNPAUSE = 1,
  REQUEST_PAUSE_T__RP_TOGGLEPAUSE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(REQUEST_PAUSE_T)
} RequestPauseT;
typedef enum _PrefetchType {
  PREFETCH_TYPE__PFT_SOUND = 0
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PREFETCH_TYPE)
} PrefetchType;
typedef enum _ESplitScreenMessageType {
  ESPLIT_SCREEN_MESSAGE_TYPE__MSG_SPLITSCREEN_ADDUSER = 0,
  ESPLIT_SCREEN_MESSAGE_TYPE__MSG_SPLITSCREEN_REMOVEUSER = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESPLIT_SCREEN_MESSAGE_TYPE)
} ESplitScreenMessageType;
typedef enum _EQueryCvarValueStatus {
  EQUERY_CVAR_VALUE_STATUS__eQueryCvarValueStatus_ValueIntact = 0,
  EQUERY_CVAR_VALUE_STATUS__eQueryCvarValueStatus_CvarNotFound = 1,
  EQUERY_CVAR_VALUE_STATUS__eQueryCvarValueStatus_NotACvar = 2,
  EQUERY_CVAR_VALUE_STATUS__eQueryCvarValueStatus_CvarProtected = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EQUERY_CVAR_VALUE_STATUS)
} EQueryCvarValueStatus;
typedef enum _DIALOGTYPE {
  DIALOG__TYPE__DIALOG_MSG = 0,
  DIALOG__TYPE__DIALOG_MENU = 1,
  DIALOG__TYPE__DIALOG_TEXT = 2,
  DIALOG__TYPE__DIALOG_ENTRY = 3,
  DIALOG__TYPE__DIALOG_ASKCONNECT = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DIALOG__TYPE)
} DIALOGTYPE;
typedef enum _SVCMessagesLowFrequency {
  SVC__MESSAGES__LOW_FREQUENCY__svc_dummy = 600
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SVC__MESSAGES__LOW_FREQUENCY)
} SVCMessagesLowFrequency;
typedef enum _BidirectionalMessages {
  BIDIRECTIONAL__MESSAGES__bi_RebroadcastGameEvent = 16,
  BIDIRECTIONAL__MESSAGES__bi_RebroadcastSource = 17,
  BIDIRECTIONAL__MESSAGES__bi_GameEvent = 18
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(BIDIRECTIONAL__MESSAGES)
} BidirectionalMessages;
typedef enum _BidirectionalMessagesLowFrequency {
  BIDIRECTIONAL__MESSAGES__LOW_FREQUENCY__bi_RelayInfo = 700,
  BIDIRECTIONAL__MESSAGES__LOW_FREQUENCY__bi_RelayPacket = 701
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(BIDIRECTIONAL__MESSAGES__LOW_FREQUENCY)
} BidirectionalMessagesLowFrequency;

/* --- messages --- */

struct  _CCLCMsgClientInfo
{
  ProtobufCMessage base;
  protobuf_c_boolean has_send_table_crc;
  uint32_t send_table_crc;
  protobuf_c_boolean has_server_count;
  uint32_t server_count;
  protobuf_c_boolean has_is_hltv;
  protobuf_c_boolean is_hltv;
  protobuf_c_boolean has_is_replay;
  protobuf_c_boolean is_replay;
  protobuf_c_boolean has_friends_id;
  uint32_t friends_id;
  char *friends_name;
};
#define CCLCMSG__CLIENT_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__client_info__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, NULL }


struct  _CCLCMsgMove
{
  ProtobufCMessage base;
  protobuf_c_boolean has_num_backup_commands;
  uint32_t num_backup_commands;
  protobuf_c_boolean has_num_new_commands;
  uint32_t num_new_commands;
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
};
#define CCLCMSG__MOVE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__move__descriptor) \
    , 0,0, 0,0, 0,{0,NULL} }


struct  _CMsgVoiceAudio
{
  ProtobufCMessage base;
  protobuf_c_boolean has_format;
  VoiceDataFormatT format;
  protobuf_c_boolean has_voice_data;
  ProtobufCBinaryData voice_data;
  protobuf_c_boolean has_sequence_bytes;
  int32_t sequence_bytes;
  protobuf_c_boolean has_section_number;
  uint32_t section_number;
  protobuf_c_boolean has_sample_rate;
  uint32_t sample_rate;
  protobuf_c_boolean has_uncompressed_sample_offset;
  uint32_t uncompressed_sample_offset;
};
#define CMSG_VOICE_AUDIO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_voice_audio__descriptor) \
    , 0,VOICE_DATA_FORMAT_T__VOICEDATA_FORMAT_STEAM, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0 }


struct  _CCLCMsgVoiceData
{
  ProtobufCMessage base;
  CMsgVoiceAudio *audio;
  protobuf_c_boolean has_xuid;
  uint64_t xuid;
  protobuf_c_boolean has_tick;
  uint32_t tick;
};
#define CCLCMSG__VOICE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__voice_data__descriptor) \
    , NULL, 0,0, 0,0 }


struct  _CCLCMsgBaselineAck
{
  ProtobufCMessage base;
  protobuf_c_boolean has_baseline_tick;
  int32_t baseline_tick;
  protobuf_c_boolean has_baseline_nr;
  int32_t baseline_nr;
};
#define CCLCMSG__BASELINE_ACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__baseline_ack__descriptor) \
    , 0,0, 0,0 }


struct  _CCLCMsgListenEvents
{
  ProtobufCMessage base;
  size_t n_event_mask;
  uint32_t *event_mask;
};
#define CCLCMSG__LISTEN_EVENTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__listen_events__descriptor) \
    , 0,NULL }


struct  _CCLCMsgRespondCvarValue
{
  ProtobufCMessage base;
  protobuf_c_boolean has_cookie;
  int32_t cookie;
  protobuf_c_boolean has_status_code;
  int32_t status_code;
  char *name;
  char *value;
};
#define CCLCMSG__RESPOND_CVAR_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__respond_cvar_value__descriptor) \
    , 0,0, 0,0, NULL, NULL }


struct  _CCLCMsgFileCRCCheck
{
  ProtobufCMessage base;
  protobuf_c_boolean has_code_path;
  int32_t code_path;
  char *path;
  protobuf_c_boolean has_code_filename;
  int32_t code_filename;
  char *filename;
  protobuf_c_boolean has_crc;
  uint32_t crc;
};
#define CCLCMSG__FILE_CRCCHECK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__file_crccheck__descriptor) \
    , 0,0, NULL, 0,0, NULL, 0,0 }


struct  _CCLCMsgLoadingProgress
{
  ProtobufCMessage base;
  protobuf_c_boolean has_progress;
  int32_t progress;
};
#define CCLCMSG__LOADING_PROGRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__loading_progress__descriptor) \
    , 0,0 }


struct  _CCLCMsgSplitPlayerConnect
{
  ProtobufCMessage base;
  char *playername;
};
#define CCLCMSG__SPLIT_PLAYER_CONNECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__split_player_connect__descriptor) \
    , NULL }


struct  _CCLCMsgClientMessage
{
  ProtobufCMessage base;
  protobuf_c_boolean has_msg_type;
  int32_t msg_type;
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
};
#define CCLCMSG__CLIENT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__client_message__descriptor) \
    , 0,0, 0,{0,NULL} }


struct  _CCLCMsgSplitPlayerDisconnect
{
  ProtobufCMessage base;
  protobuf_c_boolean has_slot;
  int32_t slot;
};
#define CCLCMSG__SPLIT_PLAYER_DISCONNECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__split_player_disconnect__descriptor) \
    , 0,0 }


struct  _CCLCMsgServerStatus
{
  ProtobufCMessage base;
  protobuf_c_boolean has_simplified;
  protobuf_c_boolean simplified;
};
#define CCLCMSG__SERVER_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__server_status__descriptor) \
    , 0,0 }


struct  _CCLCMsgServerPing
{
  ProtobufCMessage base;
};
#define CCLCMSG__SERVER_PING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__server_ping__descriptor) \
     }


struct  _CCLCMsgRequestPause
{
  ProtobufCMessage base;
  protobuf_c_boolean has_pause_type;
  RequestPauseT pause_type;
  protobuf_c_boolean has_pause_group;
  int32_t pause_group;
};
#define CCLCMSG__REQUEST_PAUSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__request_pause__descriptor) \
    , 0,REQUEST_PAUSE_T__RP_PAUSE, 0,0 }


struct  _CCLCMsgCmdKeyValues
{
  ProtobufCMessage base;
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
};
#define CCLCMSG__CMD_KEY_VALUES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__cmd_key_values__descriptor) \
    , 0,{0,NULL} }


struct  _CSVCMsgServerInfo
{
  ProtobufCMessage base;
  protobuf_c_boolean has_protocol;
  int32_t protocol;
  protobuf_c_boolean has_server_count;
  int32_t server_count;
  protobuf_c_boolean has_is_dedicated;
  protobuf_c_boolean is_dedicated;
  protobuf_c_boolean has_is_hltv;
  protobuf_c_boolean is_hltv;
  protobuf_c_boolean has_is_replay;
  protobuf_c_boolean is_replay;
  protobuf_c_boolean has_c_os;
  int32_t c_os;
  protobuf_c_boolean has_map_crc;
  uint32_t map_crc;
  protobuf_c_boolean has_client_crc;
  uint32_t client_crc;
  protobuf_c_boolean has_string_table_crc;
  uint32_t string_table_crc;
  protobuf_c_boolean has_max_clients;
  int32_t max_clients;
  protobuf_c_boolean has_max_classes;
  int32_t max_classes;
  protobuf_c_boolean has_player_slot;
  int32_t player_slot;
  protobuf_c_boolean has_tick_interval;
  float tick_interval;
  char *game_dir;
  char *map_name;
  char *sky_name;
  char *host_name;
  char *addon_name;
  CSVCMsgGameSessionConfiguration *game_session_config;
  protobuf_c_boolean has_game_session_manifest;
  ProtobufCBinaryData game_session_manifest;
};
#define CSVCMSG__SERVER_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__server_info__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, NULL, NULL, NULL, 0,{0,NULL} }


struct  _CSVCMsgClassInfo__ClassT
{
  ProtobufCMessage base;
  protobuf_c_boolean has_class_id;
  int32_t class_id;
  char *data_table_name;
  char *class_name;
};
#define CSVCMSG__CLASS_INFO__CLASS_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__class_info__class_t__descriptor) \
    , 0,0, NULL, NULL }


struct  _CSVCMsgClassInfo
{
  ProtobufCMessage base;
  protobuf_c_boolean has_create_on_client;
  protobuf_c_boolean create_on_client;
  size_t n_classes;
  CSVCMsgClassInfo__ClassT **classes;
};
#define CSVCMSG__CLASS_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__class_info__descriptor) \
    , 0,0, 0,NULL }


struct  _CSVCMsgSetPause
{
  ProtobufCMessage base;
  protobuf_c_boolean has_paused;
  protobuf_c_boolean paused;
};
#define CSVCMSG__SET_PAUSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__set_pause__descriptor) \
    , 0,0 }


struct  _CSVCMsgVoiceInit
{
  ProtobufCMessage base;
  protobuf_c_boolean has_quality;
  int32_t quality;
  char *codec;
  protobuf_c_boolean has_version;
  int32_t version;
};
#define CSVCMSG__VOICE_INIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__voice_init__descriptor) \
    , 0,0, NULL, 0,0 }


struct  _CSVCMsgPrint
{
  ProtobufCMessage base;
  char *text;
};
#define CSVCMSG__PRINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__print__descriptor) \
    , NULL }


struct  _CSVCMsgSounds__SounddataT
{
  ProtobufCMessage base;
  protobuf_c_boolean has_origin_x;
  int32_t origin_x;
  protobuf_c_boolean has_origin_y;
  int32_t origin_y;
  protobuf_c_boolean has_origin_z;
  int32_t origin_z;
  protobuf_c_boolean has_volume;
  uint32_t volume;
  protobuf_c_boolean has_delay_value;
  float delay_value;
  protobuf_c_boolean has_sequence_number;
  int32_t sequence_number;
  protobuf_c_boolean has_entity_index;
  int32_t entity_index;
  protobuf_c_boolean has_channel;
  int32_t channel;
  protobuf_c_boolean has_pitch;
  int32_t pitch;
  protobuf_c_boolean has_flags;
  int32_t flags;
  protobuf_c_boolean has_sound_num;
  uint32_t sound_num;
  protobuf_c_boolean has_sound_num_handle;
  uint32_t sound_num_handle;
  protobuf_c_boolean has_speaker_entity;
  int32_t speaker_entity;
  protobuf_c_boolean has_random_seed;
  int32_t random_seed;
  protobuf_c_boolean has_sound_level;
  int32_t sound_level;
  protobuf_c_boolean has_is_sentence;
  protobuf_c_boolean is_sentence;
  protobuf_c_boolean has_is_ambient;
  protobuf_c_boolean is_ambient;
  protobuf_c_boolean has_guid;
  uint32_t guid;
  protobuf_c_boolean has_sound_resource_id;
  uint64_t sound_resource_id;
};
#define CSVCMSG__SOUNDS__SOUNDDATA_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__sounds__sounddata_t__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CSVCMsgSounds
{
  ProtobufCMessage base;
  protobuf_c_boolean has_reliable_sound;
  protobuf_c_boolean reliable_sound;
  size_t n_sounds;
  CSVCMsgSounds__SounddataT **sounds;
};
#define CSVCMSG__SOUNDS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__sounds__descriptor) \
    , 0,0, 0,NULL }


struct  _CSVCMsgPrefetch
{
  ProtobufCMessage base;
  protobuf_c_boolean has_sound_index;
  int32_t sound_index;
  protobuf_c_boolean has_resource_type;
  PrefetchType resource_type;
};
#define CSVCMSG__PREFETCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__prefetch__descriptor) \
    , 0,0, 0,PREFETCH_TYPE__PFT_SOUND }


struct  _CSVCMsgSetView
{
  ProtobufCMessage base;
  protobuf_c_boolean has_entity_index;
  int32_t entity_index;
  protobuf_c_boolean has_slot;
  int32_t slot;
};
#define CSVCMSG__SET_VIEW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__set_view__descriptor) \
    , 0,0, 0,0 }


struct  _CSVCMsgFixAngle
{
  ProtobufCMessage base;
  protobuf_c_boolean has_relative;
  protobuf_c_boolean relative;
  CMsgQAngle *angle;
};
#define CSVCMSG__FIX_ANGLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__fix_angle__descriptor) \
    , 0,0, NULL }


struct  _CSVCMsgCrosshairAngle
{
  ProtobufCMessage base;
  CMsgQAngle *angle;
};
#define CSVCMSG__CROSSHAIR_ANGLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__crosshair_angle__descriptor) \
    , NULL }


struct  _CSVCMsgBSPDecal
{
  ProtobufCMessage base;
  CMsgVector *pos;
  protobuf_c_boolean has_decal_texture_index;
  int32_t decal_texture_index;
  protobuf_c_boolean has_entity_index;
  int32_t entity_index;
  protobuf_c_boolean has_model_index;
  int32_t model_index;
  protobuf_c_boolean has_low_priority;
  protobuf_c_boolean low_priority;
};
#define CSVCMSG__BSPDECAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__bspdecal__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0 }


struct  _CSVCMsgSplitScreen
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  ESplitScreenMessageType type;
  protobuf_c_boolean has_slot;
  int32_t slot;
  protobuf_c_boolean has_player_index;
  int32_t player_index;
};
#define CSVCMSG__SPLIT_SCREEN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__split_screen__descriptor) \
    , 0,ESPLIT_SCREEN_MESSAGE_TYPE__MSG_SPLITSCREEN_ADDUSER, 0,0, 0,0 }


struct  _CSVCMsgGetCvarValue
{
  ProtobufCMessage base;
  protobuf_c_boolean has_cookie;
  int32_t cookie;
  char *cvar_name;
};
#define CSVCMSG__GET_CVAR_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__get_cvar_value__descriptor) \
    , 0,0, NULL }


struct  _CSVCMsgMenu
{
  ProtobufCMessage base;
  protobuf_c_boolean has_dialog_type;
  int32_t dialog_type;
  protobuf_c_boolean has_menu_key_values;
  ProtobufCBinaryData menu_key_values;
};
#define CSVCMSG__MENU__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__menu__descriptor) \
    , 0,0, 0,{0,NULL} }


struct  _CSVCMsgSendTable__SendpropT
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  int32_t type;
  char *var_name;
  protobuf_c_boolean has_flags;
  int32_t flags;
  protobuf_c_boolean has_priority;
  int32_t priority;
  char *dt_name;
  protobuf_c_boolean has_num_elements;
  int32_t num_elements;
  protobuf_c_boolean has_low_value;
  float low_value;
  protobuf_c_boolean has_high_value;
  float high_value;
  protobuf_c_boolean has_num_bits;
  int32_t num_bits;
};
#define CSVCMSG__SEND_TABLE__SENDPROP_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__send_table__sendprop_t__descriptor) \
    , 0,0, NULL, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0 }


struct  _CSVCMsgSendTable
{
  ProtobufCMessage base;
  protobuf_c_boolean has_is_end;
  protobuf_c_boolean is_end;
  char *net_table_name;
  protobuf_c_boolean has_needs_decoder;
  protobuf_c_boolean needs_decoder;
  size_t n_props;
  CSVCMsgSendTable__SendpropT **props;
};
#define CSVCMSG__SEND_TABLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__send_table__descriptor) \
    , 0,0, NULL, 0,0, 0,NULL }


struct  _CSVCMsgGameEventList__KeyT
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  int32_t type;
  char *name;
};
#define CSVCMSG__GAME_EVENT_LIST__KEY_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__game_event_list__key_t__descriptor) \
    , 0,0, NULL }


struct  _CSVCMsgGameEventList__DescriptorT
{
  ProtobufCMessage base;
  protobuf_c_boolean has_eventid;
  int32_t eventid;
  char *name;
  size_t n_keys;
  CSVCMsgGameEventList__KeyT **keys;
};
#define CSVCMSG__GAME_EVENT_LIST__DESCRIPTOR_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__game_event_list__descriptor_t__descriptor) \
    , 0,0, NULL, 0,NULL }


struct  _CSVCMsgGameEventList
{
  ProtobufCMessage base;
  size_t n_descriptors;
  CSVCMsgGameEventList__DescriptorT **descriptors;
};
#define CSVCMSG__GAME_EVENT_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__game_event_list__descriptor) \
    , 0,NULL }


struct  _CSVCMsgPacketEntities
{
  ProtobufCMessage base;
  protobuf_c_boolean has_max_entries;
  int32_t max_entries;
  protobuf_c_boolean has_updated_entries;
  int32_t updated_entries;
  protobuf_c_boolean has_is_delta;
  protobuf_c_boolean is_delta;
  protobuf_c_boolean has_update_baseline;
  protobuf_c_boolean update_baseline;
  protobuf_c_boolean has_baseline;
  int32_t baseline;
  protobuf_c_boolean has_delta_from;
  int32_t delta_from;
  protobuf_c_boolean has_entity_data;
  ProtobufCBinaryData entity_data;
  protobuf_c_boolean has_pending_full_frame;
  protobuf_c_boolean pending_full_frame;
  protobuf_c_boolean has_active_spawngroup_handle;
  uint32_t active_spawngroup_handle;
  protobuf_c_boolean has_max_spawngroup_creationsequence;
  uint32_t max_spawngroup_creationsequence;
};
#define CSVCMSG__PACKET_ENTITIES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__packet_entities__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,0, 0,0, 0,0 }


struct  _CSVCMsgTempEntities
{
  ProtobufCMessage base;
  protobuf_c_boolean has_reliable;
  protobuf_c_boolean reliable;
  protobuf_c_boolean has_num_entries;
  int32_t num_entries;
  protobuf_c_boolean has_entity_data;
  ProtobufCBinaryData entity_data;
};
#define CSVCMSG__TEMP_ENTITIES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__temp_entities__descriptor) \
    , 0,0, 0,0, 0,{0,NULL} }


struct  _CSVCMsgCreateStringTable
{
  ProtobufCMessage base;
  char *name;
  protobuf_c_boolean has_num_entries;
  int32_t num_entries;
  protobuf_c_boolean has_user_data_fixed_size;
  protobuf_c_boolean user_data_fixed_size;
  protobuf_c_boolean has_user_data_size;
  int32_t user_data_size;
  protobuf_c_boolean has_user_data_size_bits;
  int32_t user_data_size_bits;
  protobuf_c_boolean has_flags;
  int32_t flags;
  protobuf_c_boolean has_string_data;
  ProtobufCBinaryData string_data;
  protobuf_c_boolean has_uncompressed_size;
  int32_t uncompressed_size;
  protobuf_c_boolean has_data_compressed;
  protobuf_c_boolean data_compressed;
};
#define CSVCMSG__CREATE_STRING_TABLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__create_string_table__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,0, 0,0 }


struct  _CSVCMsgUpdateStringTable
{
  ProtobufCMessage base;
  protobuf_c_boolean has_table_id;
  int32_t table_id;
  protobuf_c_boolean has_num_changed_entries;
  int32_t num_changed_entries;
  protobuf_c_boolean has_string_data;
  ProtobufCBinaryData string_data;
};
#define CSVCMSG__UPDATE_STRING_TABLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__update_string_table__descriptor) \
    , 0,0, 0,0, 0,{0,NULL} }


struct  _CSVCMsgVoiceData
{
  ProtobufCMessage base;
  CMsgVoiceAudio *audio;
  protobuf_c_boolean has_client;
  int32_t client;
  protobuf_c_boolean has_proximity;
  protobuf_c_boolean proximity;
  protobuf_c_boolean has_xuid;
  uint64_t xuid;
  protobuf_c_boolean has_audible_mask;
  int32_t audible_mask;
  protobuf_c_boolean has_tick;
  uint32_t tick;
};
#define CSVCMSG__VOICE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__voice_data__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CSVCMsgPacketReliable
{
  ProtobufCMessage base;
  protobuf_c_boolean has_tick;
  int32_t tick;
  protobuf_c_boolean has_messagessize;
  int32_t messagessize;
  protobuf_c_boolean has_state;
  protobuf_c_boolean state;
};
#define CSVCMSG__PACKET_RELIABLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__packet_reliable__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _CSVCMsgFullFrameSplit
{
  ProtobufCMessage base;
  protobuf_c_boolean has_tick;
  int32_t tick;
  protobuf_c_boolean has_section;
  int32_t section;
  protobuf_c_boolean has_total;
  int32_t total;
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
};
#define CSVCMSG__FULL_FRAME_SPLIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__full_frame_split__descriptor) \
    , 0,0, 0,0, 0,0, 0,{0,NULL} }


struct  _CSVCMsgHLTVStatus
{
  ProtobufCMessage base;
  char *master;
  protobuf_c_boolean has_clients;
  int32_t clients;
  protobuf_c_boolean has_slots;
  int32_t slots;
  protobuf_c_boolean has_proxies;
  int32_t proxies;
};
#define CSVCMSG__HLTVSTATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__hltvstatus__descriptor) \
    , NULL, 0,0, 0,0, 0,0 }


struct  _CSVCMsgCmdKeyValues
{
  ProtobufCMessage base;
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
};
#define CSVCMSG__CMD_KEY_VALUES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__cmd_key_values__descriptor) \
    , 0,{0,NULL} }


struct  _CMsgIPCAddress
{
  ProtobufCMessage base;
  protobuf_c_boolean has_computer_guid;
  uint64_t computer_guid;
  protobuf_c_boolean has_process_id;
  uint32_t process_id;
};
#define CMSG_IPCADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_ipcaddress__descriptor) \
    , 0,0, 0,0 }


struct  _CMsgServerPeer
{
  ProtobufCMessage base;
  protobuf_c_boolean has_player_slot;
  int32_t player_slot;
  protobuf_c_boolean has_steamid;
  uint64_t steamid;
  CMsgIPCAddress *ipc;
  protobuf_c_boolean has_they_hear_you;
  protobuf_c_boolean they_hear_you;
  protobuf_c_boolean has_you_hear_them;
  protobuf_c_boolean you_hear_them;
  protobuf_c_boolean has_is_listenserver_host;
  protobuf_c_boolean is_listenserver_host;
};
#define CMSG_SERVER_PEER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_server_peer__descriptor) \
    , 0,0, 0,0, NULL, 0,0, 0,0, 0,0 }


struct  _CSVCMsgPeerList
{
  ProtobufCMessage base;
  size_t n_peer;
  CMsgServerPeer **peer;
};
#define CSVCMSG__PEER_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__peer_list__descriptor) \
    , 0,NULL }


struct  _CSVCMsgClearAllStringTables
{
  ProtobufCMessage base;
  char *mapname;
  protobuf_c_boolean has_map_crc;
  uint32_t map_crc;
};
#define CSVCMSG__CLEAR_ALL_STRING_TABLES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__clear_all_string_tables__descriptor) \
    , NULL, 0,0 }


struct  _ProtoFlattenedSerializerFieldT
{
  ProtobufCMessage base;
  protobuf_c_boolean has_var_type_sym;
  int32_t var_type_sym;
  protobuf_c_boolean has_var_name_sym;
  int32_t var_name_sym;
  protobuf_c_boolean has_bit_count;
  int32_t bit_count;
  protobuf_c_boolean has_low_value;
  float low_value;
  protobuf_c_boolean has_high_value;
  float high_value;
  protobuf_c_boolean has_encode_flags;
  int32_t encode_flags;
  protobuf_c_boolean has_field_serializer_name_sym;
  int32_t field_serializer_name_sym;
  protobuf_c_boolean has_field_serializer_version;
  int32_t field_serializer_version;
  protobuf_c_boolean has_send_node_sym;
  int32_t send_node_sym;
  protobuf_c_boolean has_var_encoder_sym;
  int32_t var_encoder_sym;
};
#define PROTO_FLATTENED_SERIALIZER_FIELD_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_flattened_serializer_field_t__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _ProtoFlattenedSerializerT
{
  ProtobufCMessage base;
  protobuf_c_boolean has_serializer_name_sym;
  int32_t serializer_name_sym;
  protobuf_c_boolean has_serializer_version;
  int32_t serializer_version;
  size_t n_fields_index;
  int32_t *fields_index;
};
#define PROTO_FLATTENED_SERIALIZER_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_flattened_serializer_t__descriptor) \
    , 0,0, 0,0, 0,NULL }


struct  _CSVCMsgFlattenedSerializer
{
  ProtobufCMessage base;
  size_t n_serializers;
  ProtoFlattenedSerializerT **serializers;
  size_t n_symbols;
  char **symbols;
  size_t n_fields;
  ProtoFlattenedSerializerFieldT **fields;
};
#define CSVCMSG__FLATTENED_SERIALIZER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__flattened_serializer__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL }


struct  _CSVCMsgStopSound
{
  ProtobufCMessage base;
  protobuf_c_boolean has_guid;
  uint32_t guid;
};
#define CSVCMSG__STOP_SOUND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__stop_sound__descriptor) \
    , 0,0 }


struct  _CBidirMsgRebroadcastGameEvent
{
  ProtobufCMessage base;
  protobuf_c_boolean has_posttoserver;
  protobuf_c_boolean posttoserver;
  protobuf_c_boolean has_buftype;
  int32_t buftype;
  protobuf_c_boolean has_clientbitcount;
  uint32_t clientbitcount;
  protobuf_c_boolean has_receivingclients;
  uint64_t receivingclients;
};
#define CBIDIR_MSG__REBROADCAST_GAME_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cbidir_msg__rebroadcast_game_event__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


struct  _CBidirMsgRebroadcastSource
{
  ProtobufCMessage base;
  protobuf_c_boolean has_eventsource;
  int32_t eventsource;
};
#define CBIDIR_MSG__REBROADCAST_SOURCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cbidir_msg__rebroadcast_source__descriptor) \
    , 0,0 }


struct  _SerializedNetAddressT
{
  ProtobufCMessage base;
  ProtobufCBinaryData serializedaddress;
};
#define SERIALIZED_NET_ADDRESS_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&serialized_net_address_t__descriptor) \
    , {0,NULL} }


struct  _CBidirMsgRelayInfo
{
  ProtobufCMessage base;
  CBidirMsgRelayInfo__OperationT operation;
  SerializedNetAddressT *serializedtargetaddress;
  protobuf_c_boolean has_additionalhops;
  uint32_t additionalhops;
};
#define CBIDIR_MSG__RELAY_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cbidir_msg__relay_info__descriptor) \
    , CBIDIR_MSG__RELAY_INFO__OPERATION_T__RIO_REQUEST_RELAY, NULL, 0,0 }


struct  _SignedPayloadT
{
  ProtobufCMessage base;
  ProtobufCBinaryData payloaddata;
  uint32_t signature;
  protobuf_c_boolean bpayloadencrypted;
};
#define SIGNED_PAYLOAD_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&signed_payload_t__descriptor) \
    , {0,NULL}, 0, 0 }


struct  _CBidirMsgRelayPacket__SignedDestinationAddressT
{
  ProtobufCMessage base;
  SerializedNetAddressT *serializedaddr;
  uint32_t signature;
  protobuf_c_boolean has_encryptedpayloadkey;
  ProtobufCBinaryData encryptedpayloadkey;
};
#define CBIDIR_MSG__RELAY_PACKET__SIGNED_DESTINATION_ADDRESS_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cbidir_msg__relay_packet__signed_destination_address_t__descriptor) \
    , NULL, 0, 0,{0,NULL} }


struct  _CBidirMsgRelayPacket
{
  ProtobufCMessage base;
  uint32_t prevhopcount;
  SerializedNetAddressT *originalsender;
  SignedPayloadT *signedpayload;
  size_t n_recipientlist;
  CBidirMsgRelayPacket__SignedDestinationAddressT **recipientlist;
};
#define CBIDIR_MSG__RELAY_PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cbidir_msg__relay_packet__descriptor) \
    , 0, NULL, NULL, 0,NULL }


struct  _CMsgServerNetworkStats__Port
{
  ProtobufCMessage base;
  protobuf_c_boolean has_port;
  int32_t port;
  char *name;
};
#define CMSG_SERVER_NETWORK_STATS__PORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_server_network_stats__port__descriptor) \
    , 0,0, NULL }


struct  _CMsgServerNetworkStats__Player
{
  ProtobufCMessage base;
  protobuf_c_boolean has_steamid;
  uint64_t steamid;
  char *remote_addr;
  protobuf_c_boolean has_ping_stddev_ms;
  int32_t ping_stddev_ms;
  protobuf_c_boolean has_ping_avg_ms;
  int32_t ping_avg_ms;
  protobuf_c_boolean has_packet_loss_pct;
  float packet_loss_pct;
  protobuf_c_boolean has_is_bot;
  protobuf_c_boolean is_bot;
};
#define CMSG_SERVER_NETWORK_STATS__PLAYER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_server_network_stats__player__descriptor) \
    , 0,0, NULL, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgServerNetworkStats
{
  ProtobufCMessage base;
  protobuf_c_boolean has_dedicated;
  protobuf_c_boolean dedicated;
  protobuf_c_boolean has_cpu_usage;
  int32_t cpu_usage;
  protobuf_c_boolean has_memory_used_mb;
  int32_t memory_used_mb;
  protobuf_c_boolean has_memory_free_mb;
  int32_t memory_free_mb;
  protobuf_c_boolean has_uptime;
  int32_t uptime;
  protobuf_c_boolean has_spawn_count;
  int32_t spawn_count;
  protobuf_c_boolean has_num_clients;
  int32_t num_clients;
  protobuf_c_boolean has_num_bots;
  int32_t num_bots;
  protobuf_c_boolean has_num_spectators;
  int32_t num_spectators;
  protobuf_c_boolean has_num_tv_relays;
  int32_t num_tv_relays;
  protobuf_c_boolean has_fps;
  float fps;
  size_t n_ports;
  CMsgServerNetworkStats__Port **ports;
  protobuf_c_boolean has_avg_latency_out;
  float avg_latency_out;
  protobuf_c_boolean has_avg_latency_in;
  float avg_latency_in;
  protobuf_c_boolean has_avg_packets_out;
  float avg_packets_out;
  protobuf_c_boolean has_avg_packets_in;
  float avg_packets_in;
  protobuf_c_boolean has_avg_loss_out;
  float avg_loss_out;
  protobuf_c_boolean has_avg_loss_in;
  float avg_loss_in;
  protobuf_c_boolean has_avg_data_out;
  float avg_data_out;
  protobuf_c_boolean has_avg_data_in;
  float avg_data_in;
  protobuf_c_boolean has_total_data_in;
  uint64_t total_data_in;
  protobuf_c_boolean has_total_packets_in;
  uint64_t total_packets_in;
  protobuf_c_boolean has_total_data_out;
  uint64_t total_data_out;
  protobuf_c_boolean has_total_packets_out;
  uint64_t total_packets_out;
  size_t n_players;
  CMsgServerNetworkStats__Player **players;
};
#define CMSG_SERVER_NETWORK_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_server_network_stats__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL }


/* CCLCMsgClientInfo methods */
void   cclcmsg__client_info__init
                     (CCLCMsgClientInfo         *message);
size_t cclcmsg__client_info__get_packed_size
                     (const CCLCMsgClientInfo   *message);
size_t cclcmsg__client_info__pack
                     (const CCLCMsgClientInfo   *message,
                      uint8_t             *out);
size_t cclcmsg__client_info__pack_to_buffer
                     (const CCLCMsgClientInfo   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgClientInfo *
       cclcmsg__client_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__client_info__free_unpacked
                     (CCLCMsgClientInfo *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgMove methods */
void   cclcmsg__move__init
                     (CCLCMsgMove         *message);
size_t cclcmsg__move__get_packed_size
                     (const CCLCMsgMove   *message);
size_t cclcmsg__move__pack
                     (const CCLCMsgMove   *message,
                      uint8_t             *out);
size_t cclcmsg__move__pack_to_buffer
                     (const CCLCMsgMove   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgMove *
       cclcmsg__move__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__move__free_unpacked
                     (CCLCMsgMove *message,
                      ProtobufCAllocator *allocator);
/* CMsgVoiceAudio methods */
void   cmsg_voice_audio__init
                     (CMsgVoiceAudio         *message);
size_t cmsg_voice_audio__get_packed_size
                     (const CMsgVoiceAudio   *message);
size_t cmsg_voice_audio__pack
                     (const CMsgVoiceAudio   *message,
                      uint8_t             *out);
size_t cmsg_voice_audio__pack_to_buffer
                     (const CMsgVoiceAudio   *message,
                      ProtobufCBuffer     *buffer);
CMsgVoiceAudio *
       cmsg_voice_audio__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_voice_audio__free_unpacked
                     (CMsgVoiceAudio *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgVoiceData methods */
void   cclcmsg__voice_data__init
                     (CCLCMsgVoiceData         *message);
size_t cclcmsg__voice_data__get_packed_size
                     (const CCLCMsgVoiceData   *message);
size_t cclcmsg__voice_data__pack
                     (const CCLCMsgVoiceData   *message,
                      uint8_t             *out);
size_t cclcmsg__voice_data__pack_to_buffer
                     (const CCLCMsgVoiceData   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgVoiceData *
       cclcmsg__voice_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__voice_data__free_unpacked
                     (CCLCMsgVoiceData *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgBaselineAck methods */
void   cclcmsg__baseline_ack__init
                     (CCLCMsgBaselineAck         *message);
size_t cclcmsg__baseline_ack__get_packed_size
                     (const CCLCMsgBaselineAck   *message);
size_t cclcmsg__baseline_ack__pack
                     (const CCLCMsgBaselineAck   *message,
                      uint8_t             *out);
size_t cclcmsg__baseline_ack__pack_to_buffer
                     (const CCLCMsgBaselineAck   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgBaselineAck *
       cclcmsg__baseline_ack__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__baseline_ack__free_unpacked
                     (CCLCMsgBaselineAck *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgListenEvents methods */
void   cclcmsg__listen_events__init
                     (CCLCMsgListenEvents         *message);
size_t cclcmsg__listen_events__get_packed_size
                     (const CCLCMsgListenEvents   *message);
size_t cclcmsg__listen_events__pack
                     (const CCLCMsgListenEvents   *message,
                      uint8_t             *out);
size_t cclcmsg__listen_events__pack_to_buffer
                     (const CCLCMsgListenEvents   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgListenEvents *
       cclcmsg__listen_events__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__listen_events__free_unpacked
                     (CCLCMsgListenEvents *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgRespondCvarValue methods */
void   cclcmsg__respond_cvar_value__init
                     (CCLCMsgRespondCvarValue         *message);
size_t cclcmsg__respond_cvar_value__get_packed_size
                     (const CCLCMsgRespondCvarValue   *message);
size_t cclcmsg__respond_cvar_value__pack
                     (const CCLCMsgRespondCvarValue   *message,
                      uint8_t             *out);
size_t cclcmsg__respond_cvar_value__pack_to_buffer
                     (const CCLCMsgRespondCvarValue   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgRespondCvarValue *
       cclcmsg__respond_cvar_value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__respond_cvar_value__free_unpacked
                     (CCLCMsgRespondCvarValue *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgFileCRCCheck methods */
void   cclcmsg__file_crccheck__init
                     (CCLCMsgFileCRCCheck         *message);
size_t cclcmsg__file_crccheck__get_packed_size
                     (const CCLCMsgFileCRCCheck   *message);
size_t cclcmsg__file_crccheck__pack
                     (const CCLCMsgFileCRCCheck   *message,
                      uint8_t             *out);
size_t cclcmsg__file_crccheck__pack_to_buffer
                     (const CCLCMsgFileCRCCheck   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgFileCRCCheck *
       cclcmsg__file_crccheck__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__file_crccheck__free_unpacked
                     (CCLCMsgFileCRCCheck *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgLoadingProgress methods */
void   cclcmsg__loading_progress__init
                     (CCLCMsgLoadingProgress         *message);
size_t cclcmsg__loading_progress__get_packed_size
                     (const CCLCMsgLoadingProgress   *message);
size_t cclcmsg__loading_progress__pack
                     (const CCLCMsgLoadingProgress   *message,
                      uint8_t             *out);
size_t cclcmsg__loading_progress__pack_to_buffer
                     (const CCLCMsgLoadingProgress   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgLoadingProgress *
       cclcmsg__loading_progress__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__loading_progress__free_unpacked
                     (CCLCMsgLoadingProgress *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgSplitPlayerConnect methods */
void   cclcmsg__split_player_connect__init
                     (CCLCMsgSplitPlayerConnect         *message);
size_t cclcmsg__split_player_connect__get_packed_size
                     (const CCLCMsgSplitPlayerConnect   *message);
size_t cclcmsg__split_player_connect__pack
                     (const CCLCMsgSplitPlayerConnect   *message,
                      uint8_t             *out);
size_t cclcmsg__split_player_connect__pack_to_buffer
                     (const CCLCMsgSplitPlayerConnect   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgSplitPlayerConnect *
       cclcmsg__split_player_connect__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__split_player_connect__free_unpacked
                     (CCLCMsgSplitPlayerConnect *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgClientMessage methods */
void   cclcmsg__client_message__init
                     (CCLCMsgClientMessage         *message);
size_t cclcmsg__client_message__get_packed_size
                     (const CCLCMsgClientMessage   *message);
size_t cclcmsg__client_message__pack
                     (const CCLCMsgClientMessage   *message,
                      uint8_t             *out);
size_t cclcmsg__client_message__pack_to_buffer
                     (const CCLCMsgClientMessage   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgClientMessage *
       cclcmsg__client_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__client_message__free_unpacked
                     (CCLCMsgClientMessage *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgSplitPlayerDisconnect methods */
void   cclcmsg__split_player_disconnect__init
                     (CCLCMsgSplitPlayerDisconnect         *message);
size_t cclcmsg__split_player_disconnect__get_packed_size
                     (const CCLCMsgSplitPlayerDisconnect   *message);
size_t cclcmsg__split_player_disconnect__pack
                     (const CCLCMsgSplitPlayerDisconnect   *message,
                      uint8_t             *out);
size_t cclcmsg__split_player_disconnect__pack_to_buffer
                     (const CCLCMsgSplitPlayerDisconnect   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgSplitPlayerDisconnect *
       cclcmsg__split_player_disconnect__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__split_player_disconnect__free_unpacked
                     (CCLCMsgSplitPlayerDisconnect *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgServerStatus methods */
void   cclcmsg__server_status__init
                     (CCLCMsgServerStatus         *message);
size_t cclcmsg__server_status__get_packed_size
                     (const CCLCMsgServerStatus   *message);
size_t cclcmsg__server_status__pack
                     (const CCLCMsgServerStatus   *message,
                      uint8_t             *out);
size_t cclcmsg__server_status__pack_to_buffer
                     (const CCLCMsgServerStatus   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgServerStatus *
       cclcmsg__server_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__server_status__free_unpacked
                     (CCLCMsgServerStatus *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgServerPing methods */
void   cclcmsg__server_ping__init
                     (CCLCMsgServerPing         *message);
size_t cclcmsg__server_ping__get_packed_size
                     (const CCLCMsgServerPing   *message);
size_t cclcmsg__server_ping__pack
                     (const CCLCMsgServerPing   *message,
                      uint8_t             *out);
size_t cclcmsg__server_ping__pack_to_buffer
                     (const CCLCMsgServerPing   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgServerPing *
       cclcmsg__server_ping__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__server_ping__free_unpacked
                     (CCLCMsgServerPing *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgRequestPause methods */
void   cclcmsg__request_pause__init
                     (CCLCMsgRequestPause         *message);
size_t cclcmsg__request_pause__get_packed_size
                     (const CCLCMsgRequestPause   *message);
size_t cclcmsg__request_pause__pack
                     (const CCLCMsgRequestPause   *message,
                      uint8_t             *out);
size_t cclcmsg__request_pause__pack_to_buffer
                     (const CCLCMsgRequestPause   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgRequestPause *
       cclcmsg__request_pause__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__request_pause__free_unpacked
                     (CCLCMsgRequestPause *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgCmdKeyValues methods */
void   cclcmsg__cmd_key_values__init
                     (CCLCMsgCmdKeyValues         *message);
size_t cclcmsg__cmd_key_values__get_packed_size
                     (const CCLCMsgCmdKeyValues   *message);
size_t cclcmsg__cmd_key_values__pack
                     (const CCLCMsgCmdKeyValues   *message,
                      uint8_t             *out);
size_t cclcmsg__cmd_key_values__pack_to_buffer
                     (const CCLCMsgCmdKeyValues   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgCmdKeyValues *
       cclcmsg__cmd_key_values__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__cmd_key_values__free_unpacked
                     (CCLCMsgCmdKeyValues *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgServerInfo methods */
void   csvcmsg__server_info__init
                     (CSVCMsgServerInfo         *message);
size_t csvcmsg__server_info__get_packed_size
                     (const CSVCMsgServerInfo   *message);
size_t csvcmsg__server_info__pack
                     (const CSVCMsgServerInfo   *message,
                      uint8_t             *out);
size_t csvcmsg__server_info__pack_to_buffer
                     (const CSVCMsgServerInfo   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgServerInfo *
       csvcmsg__server_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__server_info__free_unpacked
                     (CSVCMsgServerInfo *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgClassInfo__ClassT methods */
void   csvcmsg__class_info__class_t__init
                     (CSVCMsgClassInfo__ClassT         *message);
/* CSVCMsgClassInfo methods */
void   csvcmsg__class_info__init
                     (CSVCMsgClassInfo         *message);
size_t csvcmsg__class_info__get_packed_size
                     (const CSVCMsgClassInfo   *message);
size_t csvcmsg__class_info__pack
                     (const CSVCMsgClassInfo   *message,
                      uint8_t             *out);
size_t csvcmsg__class_info__pack_to_buffer
                     (const CSVCMsgClassInfo   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgClassInfo *
       csvcmsg__class_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__class_info__free_unpacked
                     (CSVCMsgClassInfo *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgSetPause methods */
void   csvcmsg__set_pause__init
                     (CSVCMsgSetPause         *message);
size_t csvcmsg__set_pause__get_packed_size
                     (const CSVCMsgSetPause   *message);
size_t csvcmsg__set_pause__pack
                     (const CSVCMsgSetPause   *message,
                      uint8_t             *out);
size_t csvcmsg__set_pause__pack_to_buffer
                     (const CSVCMsgSetPause   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgSetPause *
       csvcmsg__set_pause__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__set_pause__free_unpacked
                     (CSVCMsgSetPause *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgVoiceInit methods */
void   csvcmsg__voice_init__init
                     (CSVCMsgVoiceInit         *message);
size_t csvcmsg__voice_init__get_packed_size
                     (const CSVCMsgVoiceInit   *message);
size_t csvcmsg__voice_init__pack
                     (const CSVCMsgVoiceInit   *message,
                      uint8_t             *out);
size_t csvcmsg__voice_init__pack_to_buffer
                     (const CSVCMsgVoiceInit   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgVoiceInit *
       csvcmsg__voice_init__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__voice_init__free_unpacked
                     (CSVCMsgVoiceInit *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgPrint methods */
void   csvcmsg__print__init
                     (CSVCMsgPrint         *message);
size_t csvcmsg__print__get_packed_size
                     (const CSVCMsgPrint   *message);
size_t csvcmsg__print__pack
                     (const CSVCMsgPrint   *message,
                      uint8_t             *out);
size_t csvcmsg__print__pack_to_buffer
                     (const CSVCMsgPrint   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgPrint *
       csvcmsg__print__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__print__free_unpacked
                     (CSVCMsgPrint *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgSounds__SounddataT methods */
void   csvcmsg__sounds__sounddata_t__init
                     (CSVCMsgSounds__SounddataT         *message);
/* CSVCMsgSounds methods */
void   csvcmsg__sounds__init
                     (CSVCMsgSounds         *message);
size_t csvcmsg__sounds__get_packed_size
                     (const CSVCMsgSounds   *message);
size_t csvcmsg__sounds__pack
                     (const CSVCMsgSounds   *message,
                      uint8_t             *out);
size_t csvcmsg__sounds__pack_to_buffer
                     (const CSVCMsgSounds   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgSounds *
       csvcmsg__sounds__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__sounds__free_unpacked
                     (CSVCMsgSounds *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgPrefetch methods */
void   csvcmsg__prefetch__init
                     (CSVCMsgPrefetch         *message);
size_t csvcmsg__prefetch__get_packed_size
                     (const CSVCMsgPrefetch   *message);
size_t csvcmsg__prefetch__pack
                     (const CSVCMsgPrefetch   *message,
                      uint8_t             *out);
size_t csvcmsg__prefetch__pack_to_buffer
                     (const CSVCMsgPrefetch   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgPrefetch *
       csvcmsg__prefetch__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__prefetch__free_unpacked
                     (CSVCMsgPrefetch *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgSetView methods */
void   csvcmsg__set_view__init
                     (CSVCMsgSetView         *message);
size_t csvcmsg__set_view__get_packed_size
                     (const CSVCMsgSetView   *message);
size_t csvcmsg__set_view__pack
                     (const CSVCMsgSetView   *message,
                      uint8_t             *out);
size_t csvcmsg__set_view__pack_to_buffer
                     (const CSVCMsgSetView   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgSetView *
       csvcmsg__set_view__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__set_view__free_unpacked
                     (CSVCMsgSetView *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgFixAngle methods */
void   csvcmsg__fix_angle__init
                     (CSVCMsgFixAngle         *message);
size_t csvcmsg__fix_angle__get_packed_size
                     (const CSVCMsgFixAngle   *message);
size_t csvcmsg__fix_angle__pack
                     (const CSVCMsgFixAngle   *message,
                      uint8_t             *out);
size_t csvcmsg__fix_angle__pack_to_buffer
                     (const CSVCMsgFixAngle   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgFixAngle *
       csvcmsg__fix_angle__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__fix_angle__free_unpacked
                     (CSVCMsgFixAngle *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgCrosshairAngle methods */
void   csvcmsg__crosshair_angle__init
                     (CSVCMsgCrosshairAngle         *message);
size_t csvcmsg__crosshair_angle__get_packed_size
                     (const CSVCMsgCrosshairAngle   *message);
size_t csvcmsg__crosshair_angle__pack
                     (const CSVCMsgCrosshairAngle   *message,
                      uint8_t             *out);
size_t csvcmsg__crosshair_angle__pack_to_buffer
                     (const CSVCMsgCrosshairAngle   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgCrosshairAngle *
       csvcmsg__crosshair_angle__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__crosshair_angle__free_unpacked
                     (CSVCMsgCrosshairAngle *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgBSPDecal methods */
void   csvcmsg__bspdecal__init
                     (CSVCMsgBSPDecal         *message);
size_t csvcmsg__bspdecal__get_packed_size
                     (const CSVCMsgBSPDecal   *message);
size_t csvcmsg__bspdecal__pack
                     (const CSVCMsgBSPDecal   *message,
                      uint8_t             *out);
size_t csvcmsg__bspdecal__pack_to_buffer
                     (const CSVCMsgBSPDecal   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgBSPDecal *
       csvcmsg__bspdecal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__bspdecal__free_unpacked
                     (CSVCMsgBSPDecal *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgSplitScreen methods */
void   csvcmsg__split_screen__init
                     (CSVCMsgSplitScreen         *message);
size_t csvcmsg__split_screen__get_packed_size
                     (const CSVCMsgSplitScreen   *message);
size_t csvcmsg__split_screen__pack
                     (const CSVCMsgSplitScreen   *message,
                      uint8_t             *out);
size_t csvcmsg__split_screen__pack_to_buffer
                     (const CSVCMsgSplitScreen   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgSplitScreen *
       csvcmsg__split_screen__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__split_screen__free_unpacked
                     (CSVCMsgSplitScreen *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgGetCvarValue methods */
void   csvcmsg__get_cvar_value__init
                     (CSVCMsgGetCvarValue         *message);
size_t csvcmsg__get_cvar_value__get_packed_size
                     (const CSVCMsgGetCvarValue   *message);
size_t csvcmsg__get_cvar_value__pack
                     (const CSVCMsgGetCvarValue   *message,
                      uint8_t             *out);
size_t csvcmsg__get_cvar_value__pack_to_buffer
                     (const CSVCMsgGetCvarValue   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgGetCvarValue *
       csvcmsg__get_cvar_value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__get_cvar_value__free_unpacked
                     (CSVCMsgGetCvarValue *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgMenu methods */
void   csvcmsg__menu__init
                     (CSVCMsgMenu         *message);
size_t csvcmsg__menu__get_packed_size
                     (const CSVCMsgMenu   *message);
size_t csvcmsg__menu__pack
                     (const CSVCMsgMenu   *message,
                      uint8_t             *out);
size_t csvcmsg__menu__pack_to_buffer
                     (const CSVCMsgMenu   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgMenu *
       csvcmsg__menu__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__menu__free_unpacked
                     (CSVCMsgMenu *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgSendTable__SendpropT methods */
void   csvcmsg__send_table__sendprop_t__init
                     (CSVCMsgSendTable__SendpropT         *message);
/* CSVCMsgSendTable methods */
void   csvcmsg__send_table__init
                     (CSVCMsgSendTable         *message);
size_t csvcmsg__send_table__get_packed_size
                     (const CSVCMsgSendTable   *message);
size_t csvcmsg__send_table__pack
                     (const CSVCMsgSendTable   *message,
                      uint8_t             *out);
size_t csvcmsg__send_table__pack_to_buffer
                     (const CSVCMsgSendTable   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgSendTable *
       csvcmsg__send_table__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__send_table__free_unpacked
                     (CSVCMsgSendTable *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgGameEventList__KeyT methods */
void   csvcmsg__game_event_list__key_t__init
                     (CSVCMsgGameEventList__KeyT         *message);
/* CSVCMsgGameEventList__DescriptorT methods */
void   csvcmsg__game_event_list__descriptor_t__init
                     (CSVCMsgGameEventList__DescriptorT         *message);
/* CSVCMsgGameEventList methods */
void   csvcmsg__game_event_list__init
                     (CSVCMsgGameEventList         *message);
size_t csvcmsg__game_event_list__get_packed_size
                     (const CSVCMsgGameEventList   *message);
size_t csvcmsg__game_event_list__pack
                     (const CSVCMsgGameEventList   *message,
                      uint8_t             *out);
size_t csvcmsg__game_event_list__pack_to_buffer
                     (const CSVCMsgGameEventList   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgGameEventList *
       csvcmsg__game_event_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__game_event_list__free_unpacked
                     (CSVCMsgGameEventList *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgPacketEntities methods */
void   csvcmsg__packet_entities__init
                     (CSVCMsgPacketEntities         *message);
size_t csvcmsg__packet_entities__get_packed_size
                     (const CSVCMsgPacketEntities   *message);
size_t csvcmsg__packet_entities__pack
                     (const CSVCMsgPacketEntities   *message,
                      uint8_t             *out);
size_t csvcmsg__packet_entities__pack_to_buffer
                     (const CSVCMsgPacketEntities   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgPacketEntities *
       csvcmsg__packet_entities__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__packet_entities__free_unpacked
                     (CSVCMsgPacketEntities *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgTempEntities methods */
void   csvcmsg__temp_entities__init
                     (CSVCMsgTempEntities         *message);
size_t csvcmsg__temp_entities__get_packed_size
                     (const CSVCMsgTempEntities   *message);
size_t csvcmsg__temp_entities__pack
                     (const CSVCMsgTempEntities   *message,
                      uint8_t             *out);
size_t csvcmsg__temp_entities__pack_to_buffer
                     (const CSVCMsgTempEntities   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgTempEntities *
       csvcmsg__temp_entities__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__temp_entities__free_unpacked
                     (CSVCMsgTempEntities *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgCreateStringTable methods */
void   csvcmsg__create_string_table__init
                     (CSVCMsgCreateStringTable         *message);
size_t csvcmsg__create_string_table__get_packed_size
                     (const CSVCMsgCreateStringTable   *message);
size_t csvcmsg__create_string_table__pack
                     (const CSVCMsgCreateStringTable   *message,
                      uint8_t             *out);
size_t csvcmsg__create_string_table__pack_to_buffer
                     (const CSVCMsgCreateStringTable   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgCreateStringTable *
       csvcmsg__create_string_table__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__create_string_table__free_unpacked
                     (CSVCMsgCreateStringTable *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgUpdateStringTable methods */
void   csvcmsg__update_string_table__init
                     (CSVCMsgUpdateStringTable         *message);
size_t csvcmsg__update_string_table__get_packed_size
                     (const CSVCMsgUpdateStringTable   *message);
size_t csvcmsg__update_string_table__pack
                     (const CSVCMsgUpdateStringTable   *message,
                      uint8_t             *out);
size_t csvcmsg__update_string_table__pack_to_buffer
                     (const CSVCMsgUpdateStringTable   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgUpdateStringTable *
       csvcmsg__update_string_table__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__update_string_table__free_unpacked
                     (CSVCMsgUpdateStringTable *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgVoiceData methods */
void   csvcmsg__voice_data__init
                     (CSVCMsgVoiceData         *message);
size_t csvcmsg__voice_data__get_packed_size
                     (const CSVCMsgVoiceData   *message);
size_t csvcmsg__voice_data__pack
                     (const CSVCMsgVoiceData   *message,
                      uint8_t             *out);
size_t csvcmsg__voice_data__pack_to_buffer
                     (const CSVCMsgVoiceData   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgVoiceData *
       csvcmsg__voice_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__voice_data__free_unpacked
                     (CSVCMsgVoiceData *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgPacketReliable methods */
void   csvcmsg__packet_reliable__init
                     (CSVCMsgPacketReliable         *message);
size_t csvcmsg__packet_reliable__get_packed_size
                     (const CSVCMsgPacketReliable   *message);
size_t csvcmsg__packet_reliable__pack
                     (const CSVCMsgPacketReliable   *message,
                      uint8_t             *out);
size_t csvcmsg__packet_reliable__pack_to_buffer
                     (const CSVCMsgPacketReliable   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgPacketReliable *
       csvcmsg__packet_reliable__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__packet_reliable__free_unpacked
                     (CSVCMsgPacketReliable *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgFullFrameSplit methods */
void   csvcmsg__full_frame_split__init
                     (CSVCMsgFullFrameSplit         *message);
size_t csvcmsg__full_frame_split__get_packed_size
                     (const CSVCMsgFullFrameSplit   *message);
size_t csvcmsg__full_frame_split__pack
                     (const CSVCMsgFullFrameSplit   *message,
                      uint8_t             *out);
size_t csvcmsg__full_frame_split__pack_to_buffer
                     (const CSVCMsgFullFrameSplit   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgFullFrameSplit *
       csvcmsg__full_frame_split__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__full_frame_split__free_unpacked
                     (CSVCMsgFullFrameSplit *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgHLTVStatus methods */
void   csvcmsg__hltvstatus__init
                     (CSVCMsgHLTVStatus         *message);
size_t csvcmsg__hltvstatus__get_packed_size
                     (const CSVCMsgHLTVStatus   *message);
size_t csvcmsg__hltvstatus__pack
                     (const CSVCMsgHLTVStatus   *message,
                      uint8_t             *out);
size_t csvcmsg__hltvstatus__pack_to_buffer
                     (const CSVCMsgHLTVStatus   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgHLTVStatus *
       csvcmsg__hltvstatus__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__hltvstatus__free_unpacked
                     (CSVCMsgHLTVStatus *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgCmdKeyValues methods */
void   csvcmsg__cmd_key_values__init
                     (CSVCMsgCmdKeyValues         *message);
size_t csvcmsg__cmd_key_values__get_packed_size
                     (const CSVCMsgCmdKeyValues   *message);
size_t csvcmsg__cmd_key_values__pack
                     (const CSVCMsgCmdKeyValues   *message,
                      uint8_t             *out);
size_t csvcmsg__cmd_key_values__pack_to_buffer
                     (const CSVCMsgCmdKeyValues   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgCmdKeyValues *
       csvcmsg__cmd_key_values__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__cmd_key_values__free_unpacked
                     (CSVCMsgCmdKeyValues *message,
                      ProtobufCAllocator *allocator);
/* CMsgIPCAddress methods */
void   cmsg_ipcaddress__init
                     (CMsgIPCAddress         *message);
size_t cmsg_ipcaddress__get_packed_size
                     (const CMsgIPCAddress   *message);
size_t cmsg_ipcaddress__pack
                     (const CMsgIPCAddress   *message,
                      uint8_t             *out);
size_t cmsg_ipcaddress__pack_to_buffer
                     (const CMsgIPCAddress   *message,
                      ProtobufCBuffer     *buffer);
CMsgIPCAddress *
       cmsg_ipcaddress__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_ipcaddress__free_unpacked
                     (CMsgIPCAddress *message,
                      ProtobufCAllocator *allocator);
/* CMsgServerPeer methods */
void   cmsg_server_peer__init
                     (CMsgServerPeer         *message);
size_t cmsg_server_peer__get_packed_size
                     (const CMsgServerPeer   *message);
size_t cmsg_server_peer__pack
                     (const CMsgServerPeer   *message,
                      uint8_t             *out);
size_t cmsg_server_peer__pack_to_buffer
                     (const CMsgServerPeer   *message,
                      ProtobufCBuffer     *buffer);
CMsgServerPeer *
       cmsg_server_peer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_server_peer__free_unpacked
                     (CMsgServerPeer *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgPeerList methods */
void   csvcmsg__peer_list__init
                     (CSVCMsgPeerList         *message);
size_t csvcmsg__peer_list__get_packed_size
                     (const CSVCMsgPeerList   *message);
size_t csvcmsg__peer_list__pack
                     (const CSVCMsgPeerList   *message,
                      uint8_t             *out);
size_t csvcmsg__peer_list__pack_to_buffer
                     (const CSVCMsgPeerList   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgPeerList *
       csvcmsg__peer_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__peer_list__free_unpacked
                     (CSVCMsgPeerList *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgClearAllStringTables methods */
void   csvcmsg__clear_all_string_tables__init
                     (CSVCMsgClearAllStringTables         *message);
size_t csvcmsg__clear_all_string_tables__get_packed_size
                     (const CSVCMsgClearAllStringTables   *message);
size_t csvcmsg__clear_all_string_tables__pack
                     (const CSVCMsgClearAllStringTables   *message,
                      uint8_t             *out);
size_t csvcmsg__clear_all_string_tables__pack_to_buffer
                     (const CSVCMsgClearAllStringTables   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgClearAllStringTables *
       csvcmsg__clear_all_string_tables__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__clear_all_string_tables__free_unpacked
                     (CSVCMsgClearAllStringTables *message,
                      ProtobufCAllocator *allocator);
/* ProtoFlattenedSerializerFieldT methods */
void   proto_flattened_serializer_field_t__init
                     (ProtoFlattenedSerializerFieldT         *message);
size_t proto_flattened_serializer_field_t__get_packed_size
                     (const ProtoFlattenedSerializerFieldT   *message);
size_t proto_flattened_serializer_field_t__pack
                     (const ProtoFlattenedSerializerFieldT   *message,
                      uint8_t             *out);
size_t proto_flattened_serializer_field_t__pack_to_buffer
                     (const ProtoFlattenedSerializerFieldT   *message,
                      ProtobufCBuffer     *buffer);
ProtoFlattenedSerializerFieldT *
       proto_flattened_serializer_field_t__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_flattened_serializer_field_t__free_unpacked
                     (ProtoFlattenedSerializerFieldT *message,
                      ProtobufCAllocator *allocator);
/* ProtoFlattenedSerializerT methods */
void   proto_flattened_serializer_t__init
                     (ProtoFlattenedSerializerT         *message);
size_t proto_flattened_serializer_t__get_packed_size
                     (const ProtoFlattenedSerializerT   *message);
size_t proto_flattened_serializer_t__pack
                     (const ProtoFlattenedSerializerT   *message,
                      uint8_t             *out);
size_t proto_flattened_serializer_t__pack_to_buffer
                     (const ProtoFlattenedSerializerT   *message,
                      ProtobufCBuffer     *buffer);
ProtoFlattenedSerializerT *
       proto_flattened_serializer_t__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_flattened_serializer_t__free_unpacked
                     (ProtoFlattenedSerializerT *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgFlattenedSerializer methods */
void   csvcmsg__flattened_serializer__init
                     (CSVCMsgFlattenedSerializer         *message);
size_t csvcmsg__flattened_serializer__get_packed_size
                     (const CSVCMsgFlattenedSerializer   *message);
size_t csvcmsg__flattened_serializer__pack
                     (const CSVCMsgFlattenedSerializer   *message,
                      uint8_t             *out);
size_t csvcmsg__flattened_serializer__pack_to_buffer
                     (const CSVCMsgFlattenedSerializer   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgFlattenedSerializer *
       csvcmsg__flattened_serializer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__flattened_serializer__free_unpacked
                     (CSVCMsgFlattenedSerializer *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgStopSound methods */
void   csvcmsg__stop_sound__init
                     (CSVCMsgStopSound         *message);
size_t csvcmsg__stop_sound__get_packed_size
                     (const CSVCMsgStopSound   *message);
size_t csvcmsg__stop_sound__pack
                     (const CSVCMsgStopSound   *message,
                      uint8_t             *out);
size_t csvcmsg__stop_sound__pack_to_buffer
                     (const CSVCMsgStopSound   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgStopSound *
       csvcmsg__stop_sound__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__stop_sound__free_unpacked
                     (CSVCMsgStopSound *message,
                      ProtobufCAllocator *allocator);
/* CBidirMsgRebroadcastGameEvent methods */
void   cbidir_msg__rebroadcast_game_event__init
                     (CBidirMsgRebroadcastGameEvent         *message);
size_t cbidir_msg__rebroadcast_game_event__get_packed_size
                     (const CBidirMsgRebroadcastGameEvent   *message);
size_t cbidir_msg__rebroadcast_game_event__pack
                     (const CBidirMsgRebroadcastGameEvent   *message,
                      uint8_t             *out);
size_t cbidir_msg__rebroadcast_game_event__pack_to_buffer
                     (const CBidirMsgRebroadcastGameEvent   *message,
                      ProtobufCBuffer     *buffer);
CBidirMsgRebroadcastGameEvent *
       cbidir_msg__rebroadcast_game_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cbidir_msg__rebroadcast_game_event__free_unpacked
                     (CBidirMsgRebroadcastGameEvent *message,
                      ProtobufCAllocator *allocator);
/* CBidirMsgRebroadcastSource methods */
void   cbidir_msg__rebroadcast_source__init
                     (CBidirMsgRebroadcastSource         *message);
size_t cbidir_msg__rebroadcast_source__get_packed_size
                     (const CBidirMsgRebroadcastSource   *message);
size_t cbidir_msg__rebroadcast_source__pack
                     (const CBidirMsgRebroadcastSource   *message,
                      uint8_t             *out);
size_t cbidir_msg__rebroadcast_source__pack_to_buffer
                     (const CBidirMsgRebroadcastSource   *message,
                      ProtobufCBuffer     *buffer);
CBidirMsgRebroadcastSource *
       cbidir_msg__rebroadcast_source__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cbidir_msg__rebroadcast_source__free_unpacked
                     (CBidirMsgRebroadcastSource *message,
                      ProtobufCAllocator *allocator);
/* SerializedNetAddressT methods */
void   serialized_net_address_t__init
                     (SerializedNetAddressT         *message);
size_t serialized_net_address_t__get_packed_size
                     (const SerializedNetAddressT   *message);
size_t serialized_net_address_t__pack
                     (const SerializedNetAddressT   *message,
                      uint8_t             *out);
size_t serialized_net_address_t__pack_to_buffer
                     (const SerializedNetAddressT   *message,
                      ProtobufCBuffer     *buffer);
SerializedNetAddressT *
       serialized_net_address_t__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   serialized_net_address_t__free_unpacked
                     (SerializedNetAddressT *message,
                      ProtobufCAllocator *allocator);
/* CBidirMsgRelayInfo methods */
void   cbidir_msg__relay_info__init
                     (CBidirMsgRelayInfo         *message);
size_t cbidir_msg__relay_info__get_packed_size
                     (const CBidirMsgRelayInfo   *message);
size_t cbidir_msg__relay_info__pack
                     (const CBidirMsgRelayInfo   *message,
                      uint8_t             *out);
size_t cbidir_msg__relay_info__pack_to_buffer
                     (const CBidirMsgRelayInfo   *message,
                      ProtobufCBuffer     *buffer);
CBidirMsgRelayInfo *
       cbidir_msg__relay_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cbidir_msg__relay_info__free_unpacked
                     (CBidirMsgRelayInfo *message,
                      ProtobufCAllocator *allocator);
/* SignedPayloadT methods */
void   signed_payload_t__init
                     (SignedPayloadT         *message);
size_t signed_payload_t__get_packed_size
                     (const SignedPayloadT   *message);
size_t signed_payload_t__pack
                     (const SignedPayloadT   *message,
                      uint8_t             *out);
size_t signed_payload_t__pack_to_buffer
                     (const SignedPayloadT   *message,
                      ProtobufCBuffer     *buffer);
SignedPayloadT *
       signed_payload_t__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   signed_payload_t__free_unpacked
                     (SignedPayloadT *message,
                      ProtobufCAllocator *allocator);
/* CBidirMsgRelayPacket__SignedDestinationAddressT methods */
void   cbidir_msg__relay_packet__signed_destination_address_t__init
                     (CBidirMsgRelayPacket__SignedDestinationAddressT         *message);
/* CBidirMsgRelayPacket methods */
void   cbidir_msg__relay_packet__init
                     (CBidirMsgRelayPacket         *message);
size_t cbidir_msg__relay_packet__get_packed_size
                     (const CBidirMsgRelayPacket   *message);
size_t cbidir_msg__relay_packet__pack
                     (const CBidirMsgRelayPacket   *message,
                      uint8_t             *out);
size_t cbidir_msg__relay_packet__pack_to_buffer
                     (const CBidirMsgRelayPacket   *message,
                      ProtobufCBuffer     *buffer);
CBidirMsgRelayPacket *
       cbidir_msg__relay_packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cbidir_msg__relay_packet__free_unpacked
                     (CBidirMsgRelayPacket *message,
                      ProtobufCAllocator *allocator);
/* CMsgServerNetworkStats__Port methods */
void   cmsg_server_network_stats__port__init
                     (CMsgServerNetworkStats__Port         *message);
/* CMsgServerNetworkStats__Player methods */
void   cmsg_server_network_stats__player__init
                     (CMsgServerNetworkStats__Player         *message);
/* CMsgServerNetworkStats methods */
void   cmsg_server_network_stats__init
                     (CMsgServerNetworkStats         *message);
size_t cmsg_server_network_stats__get_packed_size
                     (const CMsgServerNetworkStats   *message);
size_t cmsg_server_network_stats__pack
                     (const CMsgServerNetworkStats   *message,
                      uint8_t             *out);
size_t cmsg_server_network_stats__pack_to_buffer
                     (const CMsgServerNetworkStats   *message,
                      ProtobufCBuffer     *buffer);
CMsgServerNetworkStats *
       cmsg_server_network_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_server_network_stats__free_unpacked
                     (CMsgServerNetworkStats *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CCLCMsgClientInfo_Closure)
                 (const CCLCMsgClientInfo *message,
                  void *closure_data);
typedef void (*CCLCMsgMove_Closure)
                 (const CCLCMsgMove *message,
                  void *closure_data);
typedef void (*CMsgVoiceAudio_Closure)
                 (const CMsgVoiceAudio *message,
                  void *closure_data);
typedef void (*CCLCMsgVoiceData_Closure)
                 (const CCLCMsgVoiceData *message,
                  void *closure_data);
typedef void (*CCLCMsgBaselineAck_Closure)
                 (const CCLCMsgBaselineAck *message,
                  void *closure_data);
typedef void (*CCLCMsgListenEvents_Closure)
                 (const CCLCMsgListenEvents *message,
                  void *closure_data);
typedef void (*CCLCMsgRespondCvarValue_Closure)
                 (const CCLCMsgRespondCvarValue *message,
                  void *closure_data);
typedef void (*CCLCMsgFileCRCCheck_Closure)
                 (const CCLCMsgFileCRCCheck *message,
                  void *closure_data);
typedef void (*CCLCMsgLoadingProgress_Closure)
                 (const CCLCMsgLoadingProgress *message,
                  void *closure_data);
typedef void (*CCLCMsgSplitPlayerConnect_Closure)
                 (const CCLCMsgSplitPlayerConnect *message,
                  void *closure_data);
typedef void (*CCLCMsgClientMessage_Closure)
                 (const CCLCMsgClientMessage *message,
                  void *closure_data);
typedef void (*CCLCMsgSplitPlayerDisconnect_Closure)
                 (const CCLCMsgSplitPlayerDisconnect *message,
                  void *closure_data);
typedef void (*CCLCMsgServerStatus_Closure)
                 (const CCLCMsgServerStatus *message,
                  void *closure_data);
typedef void (*CCLCMsgServerPing_Closure)
                 (const CCLCMsgServerPing *message,
                  void *closure_data);
typedef void (*CCLCMsgRequestPause_Closure)
                 (const CCLCMsgRequestPause *message,
                  void *closure_data);
typedef void (*CCLCMsgCmdKeyValues_Closure)
                 (const CCLCMsgCmdKeyValues *message,
                  void *closure_data);
typedef void (*CSVCMsgServerInfo_Closure)
                 (const CSVCMsgServerInfo *message,
                  void *closure_data);
typedef void (*CSVCMsgClassInfo__ClassT_Closure)
                 (const CSVCMsgClassInfo__ClassT *message,
                  void *closure_data);
typedef void (*CSVCMsgClassInfo_Closure)
                 (const CSVCMsgClassInfo *message,
                  void *closure_data);
typedef void (*CSVCMsgSetPause_Closure)
                 (const CSVCMsgSetPause *message,
                  void *closure_data);
typedef void (*CSVCMsgVoiceInit_Closure)
                 (const CSVCMsgVoiceInit *message,
                  void *closure_data);
typedef void (*CSVCMsgPrint_Closure)
                 (const CSVCMsgPrint *message,
                  void *closure_data);
typedef void (*CSVCMsgSounds__SounddataT_Closure)
                 (const CSVCMsgSounds__SounddataT *message,
                  void *closure_data);
typedef void (*CSVCMsgSounds_Closure)
                 (const CSVCMsgSounds *message,
                  void *closure_data);
typedef void (*CSVCMsgPrefetch_Closure)
                 (const CSVCMsgPrefetch *message,
                  void *closure_data);
typedef void (*CSVCMsgSetView_Closure)
                 (const CSVCMsgSetView *message,
                  void *closure_data);
typedef void (*CSVCMsgFixAngle_Closure)
                 (const CSVCMsgFixAngle *message,
                  void *closure_data);
typedef void (*CSVCMsgCrosshairAngle_Closure)
                 (const CSVCMsgCrosshairAngle *message,
                  void *closure_data);
typedef void (*CSVCMsgBSPDecal_Closure)
                 (const CSVCMsgBSPDecal *message,
                  void *closure_data);
typedef void (*CSVCMsgSplitScreen_Closure)
                 (const CSVCMsgSplitScreen *message,
                  void *closure_data);
typedef void (*CSVCMsgGetCvarValue_Closure)
                 (const CSVCMsgGetCvarValue *message,
                  void *closure_data);
typedef void (*CSVCMsgMenu_Closure)
                 (const CSVCMsgMenu *message,
                  void *closure_data);
typedef void (*CSVCMsgSendTable__SendpropT_Closure)
                 (const CSVCMsgSendTable__SendpropT *message,
                  void *closure_data);
typedef void (*CSVCMsgSendTable_Closure)
                 (const CSVCMsgSendTable *message,
                  void *closure_data);
typedef void (*CSVCMsgGameEventList__KeyT_Closure)
                 (const CSVCMsgGameEventList__KeyT *message,
                  void *closure_data);
typedef void (*CSVCMsgGameEventList__DescriptorT_Closure)
                 (const CSVCMsgGameEventList__DescriptorT *message,
                  void *closure_data);
typedef void (*CSVCMsgGameEventList_Closure)
                 (const CSVCMsgGameEventList *message,
                  void *closure_data);
typedef void (*CSVCMsgPacketEntities_Closure)
                 (const CSVCMsgPacketEntities *message,
                  void *closure_data);
typedef void (*CSVCMsgTempEntities_Closure)
                 (const CSVCMsgTempEntities *message,
                  void *closure_data);
typedef void (*CSVCMsgCreateStringTable_Closure)
                 (const CSVCMsgCreateStringTable *message,
                  void *closure_data);
typedef void (*CSVCMsgUpdateStringTable_Closure)
                 (const CSVCMsgUpdateStringTable *message,
                  void *closure_data);
typedef void (*CSVCMsgVoiceData_Closure)
                 (const CSVCMsgVoiceData *message,
                  void *closure_data);
typedef void (*CSVCMsgPacketReliable_Closure)
                 (const CSVCMsgPacketReliable *message,
                  void *closure_data);
typedef void (*CSVCMsgFullFrameSplit_Closure)
                 (const CSVCMsgFullFrameSplit *message,
                  void *closure_data);
typedef void (*CSVCMsgHLTVStatus_Closure)
                 (const CSVCMsgHLTVStatus *message,
                  void *closure_data);
typedef void (*CSVCMsgCmdKeyValues_Closure)
                 (const CSVCMsgCmdKeyValues *message,
                  void *closure_data);
typedef void (*CMsgIPCAddress_Closure)
                 (const CMsgIPCAddress *message,
                  void *closure_data);
typedef void (*CMsgServerPeer_Closure)
                 (const CMsgServerPeer *message,
                  void *closure_data);
typedef void (*CSVCMsgPeerList_Closure)
                 (const CSVCMsgPeerList *message,
                  void *closure_data);
typedef void (*CSVCMsgClearAllStringTables_Closure)
                 (const CSVCMsgClearAllStringTables *message,
                  void *closure_data);
typedef void (*ProtoFlattenedSerializerFieldT_Closure)
                 (const ProtoFlattenedSerializerFieldT *message,
                  void *closure_data);
typedef void (*ProtoFlattenedSerializerT_Closure)
                 (const ProtoFlattenedSerializerT *message,
                  void *closure_data);
typedef void (*CSVCMsgFlattenedSerializer_Closure)
                 (const CSVCMsgFlattenedSerializer *message,
                  void *closure_data);
typedef void (*CSVCMsgStopSound_Closure)
                 (const CSVCMsgStopSound *message,
                  void *closure_data);
typedef void (*CBidirMsgRebroadcastGameEvent_Closure)
                 (const CBidirMsgRebroadcastGameEvent *message,
                  void *closure_data);
typedef void (*CBidirMsgRebroadcastSource_Closure)
                 (const CBidirMsgRebroadcastSource *message,
                  void *closure_data);
typedef void (*SerializedNetAddressT_Closure)
                 (const SerializedNetAddressT *message,
                  void *closure_data);
typedef void (*CBidirMsgRelayInfo_Closure)
                 (const CBidirMsgRelayInfo *message,
                  void *closure_data);
typedef void (*SignedPayloadT_Closure)
                 (const SignedPayloadT *message,
                  void *closure_data);
typedef void (*CBidirMsgRelayPacket__SignedDestinationAddressT_Closure)
                 (const CBidirMsgRelayPacket__SignedDestinationAddressT *message,
                  void *closure_data);
typedef void (*CBidirMsgRelayPacket_Closure)
                 (const CBidirMsgRelayPacket *message,
                  void *closure_data);
typedef void (*CMsgServerNetworkStats__Port_Closure)
                 (const CMsgServerNetworkStats__Port *message,
                  void *closure_data);
typedef void (*CMsgServerNetworkStats__Player_Closure)
                 (const CMsgServerNetworkStats__Player *message,
                  void *closure_data);
typedef void (*CMsgServerNetworkStats_Closure)
                 (const CMsgServerNetworkStats *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    clc__messages__descriptor;
extern const ProtobufCEnumDescriptor    svc__messages__descriptor;
extern const ProtobufCEnumDescriptor    voice_data_format_t__descriptor;
extern const ProtobufCEnumDescriptor    request_pause_t__descriptor;
extern const ProtobufCEnumDescriptor    prefetch_type__descriptor;
extern const ProtobufCEnumDescriptor    esplit_screen_message_type__descriptor;
extern const ProtobufCEnumDescriptor    equery_cvar_value_status__descriptor;
extern const ProtobufCEnumDescriptor    dialog__type__descriptor;
extern const ProtobufCEnumDescriptor    svc__messages__low_frequency__descriptor;
extern const ProtobufCEnumDescriptor    bidirectional__messages__descriptor;
extern const ProtobufCEnumDescriptor    bidirectional__messages__low_frequency__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__client_info__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__move__descriptor;
extern const ProtobufCMessageDescriptor cmsg_voice_audio__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__voice_data__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__baseline_ack__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__listen_events__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__respond_cvar_value__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__file_crccheck__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__loading_progress__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__split_player_connect__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__client_message__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__split_player_disconnect__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__server_status__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__server_ping__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__request_pause__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__cmd_key_values__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__server_info__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__class_info__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__class_info__class_t__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__set_pause__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__voice_init__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__print__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__sounds__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__sounds__sounddata_t__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__prefetch__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__set_view__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__fix_angle__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__crosshair_angle__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__bspdecal__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__split_screen__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__get_cvar_value__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__menu__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__send_table__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__send_table__sendprop_t__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__game_event_list__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__game_event_list__key_t__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__game_event_list__descriptor_t__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__packet_entities__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__temp_entities__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__create_string_table__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__update_string_table__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__voice_data__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__packet_reliable__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__full_frame_split__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__hltvstatus__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__cmd_key_values__descriptor;
extern const ProtobufCMessageDescriptor cmsg_ipcaddress__descriptor;
extern const ProtobufCMessageDescriptor cmsg_server_peer__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__peer_list__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__clear_all_string_tables__descriptor;
extern const ProtobufCMessageDescriptor proto_flattened_serializer_field_t__descriptor;
extern const ProtobufCMessageDescriptor proto_flattened_serializer_t__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__flattened_serializer__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__stop_sound__descriptor;
extern const ProtobufCMessageDescriptor cbidir_msg__rebroadcast_game_event__descriptor;
extern const ProtobufCMessageDescriptor cbidir_msg__rebroadcast_source__descriptor;
extern const ProtobufCMessageDescriptor serialized_net_address_t__descriptor;
extern const ProtobufCMessageDescriptor cbidir_msg__relay_info__descriptor;
extern const ProtobufCEnumDescriptor    cbidir_msg__relay_info__operation_t__descriptor;
extern const ProtobufCMessageDescriptor signed_payload_t__descriptor;
extern const ProtobufCMessageDescriptor cbidir_msg__relay_packet__descriptor;
extern const ProtobufCMessageDescriptor cbidir_msg__relay_packet__signed_destination_address_t__descriptor;
extern const ProtobufCMessageDescriptor cmsg_server_network_stats__descriptor;
extern const ProtobufCMessageDescriptor cmsg_server_network_stats__port__descriptor;
extern const ProtobufCMessageDescriptor cmsg_server_network_stats__player__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_netmessages_2eproto__INCLUDED */
