/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: c_peer2peer_netmessages.proto */

#ifndef PROTOBUF_C_c_5fpeer2peer_5fnetmessages_2eproto__INCLUDED
#define PROTOBUF_C_c_5fpeer2peer_5fnetmessages_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "netmessages.pb-c.h"
#include "networkbasetypes.pb-c.h"

typedef struct _CP2PTextMessage CP2PTextMessage;
typedef struct _CSteamVoiceEncoding CSteamVoiceEncoding;
typedef struct _CP2PVoice CP2PVoice;
typedef struct _CP2PPing CP2PPing;
typedef struct _CP2PVRAvatarPosition CP2PVRAvatarPosition;
typedef struct _CP2PVRAvatarPosition__COrientation CP2PVRAvatarPosition__COrientation;
typedef struct _CP2PWatchSynchronization CP2PWatchSynchronization;


/* --- enums --- */

typedef enum _CP2PVoice__HandlerFlags {
  CP2_P__VOICE__HANDLER__FLAGS__Played_Audio = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CP2_P__VOICE__HANDLER__FLAGS)
} CP2PVoice__HandlerFlags;
typedef enum _P2PMessages {
  P2_P__MESSAGES__p2p_TextMessage = 256,
  P2_P__MESSAGES__p2p_Voice = 257,
  P2_P__MESSAGES__p2p_Ping = 258,
  P2_P__MESSAGES__p2p_VRAvatarPosition = 259,
  P2_P__MESSAGES__p2p_WatchSynchronization = 260
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(P2_P__MESSAGES)
} P2PMessages;

/* --- messages --- */

struct  _CP2PTextMessage
{
  ProtobufCMessage base;
  protobuf_c_boolean has_text;
  ProtobufCBinaryData text;
};
#define CP2_P__TEXT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cp2_p__text_message__descriptor) \
    , 0,{0,NULL} }


struct  _CSteamVoiceEncoding
{
  ProtobufCMessage base;
  protobuf_c_boolean has_voice_data;
  ProtobufCBinaryData voice_data;
};
#define CSTEAM__VOICE__ENCODING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csteam__voice__encoding__descriptor) \
    , 0,{0,NULL} }


struct  _CP2PVoice
{
  ProtobufCMessage base;
  CMsgVoiceAudio *audio;
  protobuf_c_boolean has_broadcast_group;
  uint32_t broadcast_group;
};
#define CP2_P__VOICE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cp2_p__voice__descriptor) \
    , NULL, 0,0 }


struct  _CP2PPing
{
  ProtobufCMessage base;
  uint64_t send_time;
  protobuf_c_boolean is_reply;
};
#define CP2_P__PING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cp2_p__ping__descriptor) \
    , 0, 0 }


struct  _CP2PVRAvatarPosition__COrientation
{
  ProtobufCMessage base;
  CMsgVector *pos;
  CMsgQAngle *ang;
};
#define CP2_P__VRAVATAR_POSITION__CORIENTATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cp2_p__vravatar_position__corientation__descriptor) \
    , NULL, NULL }


struct  _CP2PVRAvatarPosition
{
  ProtobufCMessage base;
  size_t n_body_parts;
  CP2PVRAvatarPosition__COrientation **body_parts;
  protobuf_c_boolean has_hat_id;
  int32_t hat_id;
};
#define CP2_P__VRAVATAR_POSITION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cp2_p__vravatar_position__descriptor) \
    , 0,NULL, 0,0 }


struct  _CP2PWatchSynchronization
{
  ProtobufCMessage base;
  protobuf_c_boolean has_demo_tick;
  int32_t demo_tick;
  protobuf_c_boolean has_paused;
  protobuf_c_boolean paused;
  protobuf_c_boolean has_tv_listen_voice_indices;
  int32_t tv_listen_voice_indices;
  protobuf_c_boolean has_dota_spectator_mode;
  int32_t dota_spectator_mode;
  protobuf_c_boolean has_dota_spectator_watching_broadcaster;
  int32_t dota_spectator_watching_broadcaster;
  protobuf_c_boolean has_dota_spectator_hero_index;
  int32_t dota_spectator_hero_index;
  protobuf_c_boolean has_dota_spectator_autospeed;
  int32_t dota_spectator_autospeed;
  protobuf_c_boolean has_dota_replay_speed;
  int32_t dota_replay_speed;
};
#define CP2_P__WATCH_SYNCHRONIZATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cp2_p__watch_synchronization__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/* CP2PTextMessage methods */
void   cp2_p__text_message__init
                     (CP2PTextMessage         *message);
size_t cp2_p__text_message__get_packed_size
                     (const CP2PTextMessage   *message);
size_t cp2_p__text_message__pack
                     (const CP2PTextMessage   *message,
                      uint8_t             *out);
size_t cp2_p__text_message__pack_to_buffer
                     (const CP2PTextMessage   *message,
                      ProtobufCBuffer     *buffer);
CP2PTextMessage *
       cp2_p__text_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cp2_p__text_message__free_unpacked
                     (CP2PTextMessage *message,
                      ProtobufCAllocator *allocator);
/* CSteamVoiceEncoding methods */
void   csteam__voice__encoding__init
                     (CSteamVoiceEncoding         *message);
size_t csteam__voice__encoding__get_packed_size
                     (const CSteamVoiceEncoding   *message);
size_t csteam__voice__encoding__pack
                     (const CSteamVoiceEncoding   *message,
                      uint8_t             *out);
size_t csteam__voice__encoding__pack_to_buffer
                     (const CSteamVoiceEncoding   *message,
                      ProtobufCBuffer     *buffer);
CSteamVoiceEncoding *
       csteam__voice__encoding__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csteam__voice__encoding__free_unpacked
                     (CSteamVoiceEncoding *message,
                      ProtobufCAllocator *allocator);
/* CP2PVoice methods */
void   cp2_p__voice__init
                     (CP2PVoice         *message);
size_t cp2_p__voice__get_packed_size
                     (const CP2PVoice   *message);
size_t cp2_p__voice__pack
                     (const CP2PVoice   *message,
                      uint8_t             *out);
size_t cp2_p__voice__pack_to_buffer
                     (const CP2PVoice   *message,
                      ProtobufCBuffer     *buffer);
CP2PVoice *
       cp2_p__voice__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cp2_p__voice__free_unpacked
                     (CP2PVoice *message,
                      ProtobufCAllocator *allocator);
/* CP2PPing methods */
void   cp2_p__ping__init
                     (CP2PPing         *message);
size_t cp2_p__ping__get_packed_size
                     (const CP2PPing   *message);
size_t cp2_p__ping__pack
                     (const CP2PPing   *message,
                      uint8_t             *out);
size_t cp2_p__ping__pack_to_buffer
                     (const CP2PPing   *message,
                      ProtobufCBuffer     *buffer);
CP2PPing *
       cp2_p__ping__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cp2_p__ping__free_unpacked
                     (CP2PPing *message,
                      ProtobufCAllocator *allocator);
/* CP2PVRAvatarPosition__COrientation methods */
void   cp2_p__vravatar_position__corientation__init
                     (CP2PVRAvatarPosition__COrientation         *message);
/* CP2PVRAvatarPosition methods */
void   cp2_p__vravatar_position__init
                     (CP2PVRAvatarPosition         *message);
size_t cp2_p__vravatar_position__get_packed_size
                     (const CP2PVRAvatarPosition   *message);
size_t cp2_p__vravatar_position__pack
                     (const CP2PVRAvatarPosition   *message,
                      uint8_t             *out);
size_t cp2_p__vravatar_position__pack_to_buffer
                     (const CP2PVRAvatarPosition   *message,
                      ProtobufCBuffer     *buffer);
CP2PVRAvatarPosition *
       cp2_p__vravatar_position__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cp2_p__vravatar_position__free_unpacked
                     (CP2PVRAvatarPosition *message,
                      ProtobufCAllocator *allocator);
/* CP2PWatchSynchronization methods */
void   cp2_p__watch_synchronization__init
                     (CP2PWatchSynchronization         *message);
size_t cp2_p__watch_synchronization__get_packed_size
                     (const CP2PWatchSynchronization   *message);
size_t cp2_p__watch_synchronization__pack
                     (const CP2PWatchSynchronization   *message,
                      uint8_t             *out);
size_t cp2_p__watch_synchronization__pack_to_buffer
                     (const CP2PWatchSynchronization   *message,
                      ProtobufCBuffer     *buffer);
CP2PWatchSynchronization *
       cp2_p__watch_synchronization__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cp2_p__watch_synchronization__free_unpacked
                     (CP2PWatchSynchronization *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CP2PTextMessage_Closure)
                 (const CP2PTextMessage *message,
                  void *closure_data);
typedef void (*CSteamVoiceEncoding_Closure)
                 (const CSteamVoiceEncoding *message,
                  void *closure_data);
typedef void (*CP2PVoice_Closure)
                 (const CP2PVoice *message,
                  void *closure_data);
typedef void (*CP2PPing_Closure)
                 (const CP2PPing *message,
                  void *closure_data);
typedef void (*CP2PVRAvatarPosition__COrientation_Closure)
                 (const CP2PVRAvatarPosition__COrientation *message,
                  void *closure_data);
typedef void (*CP2PVRAvatarPosition_Closure)
                 (const CP2PVRAvatarPosition *message,
                  void *closure_data);
typedef void (*CP2PWatchSynchronization_Closure)
                 (const CP2PWatchSynchronization *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    p2_p__messages__descriptor;
extern const ProtobufCMessageDescriptor cp2_p__text_message__descriptor;
extern const ProtobufCMessageDescriptor csteam__voice__encoding__descriptor;
extern const ProtobufCMessageDescriptor cp2_p__voice__descriptor;
extern const ProtobufCEnumDescriptor    cp2_p__voice__handler__flags__descriptor;
extern const ProtobufCMessageDescriptor cp2_p__ping__descriptor;
extern const ProtobufCMessageDescriptor cp2_p__vravatar_position__descriptor;
extern const ProtobufCMessageDescriptor cp2_p__vravatar_position__corientation__descriptor;
extern const ProtobufCMessageDescriptor cp2_p__watch_synchronization__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_c_5fpeer2peer_5fnetmessages_2eproto__INCLUDED */
