/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: dota_gcmessages_client_match_management.proto */

#ifndef PROTOBUF_C_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto__INCLUDED
#define PROTOBUF_C_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "steammessages.pb-c.h"
#include "dota_shared_enums.pb-c.h"
#include "dota_client_enums.pb-c.h"
#include "base_gcmessages.pb-c.h"
#include "dota_gcmessages_common_match_management.pb-c.h"

typedef struct _CMsgStartFindingMatch CMsgStartFindingMatch;
typedef struct _CMsgStartFindingMatchResult CMsgStartFindingMatchResult;
typedef struct _CMsgStopFindingMatch CMsgStopFindingMatch;
typedef struct _CMsgReadyUp CMsgReadyUp;
typedef struct _CMsgReadyUpStatus CMsgReadyUpStatus;
typedef struct _CMsgAbandonCurrentGame CMsgAbandonCurrentGame;
typedef struct _CMsgPracticeLobbySetDetails CMsgPracticeLobbySetDetails;
typedef struct _CMsgPracticeLobbyCreate CMsgPracticeLobbyCreate;
typedef struct _CMsgPracticeLobbyCreate__SaveGame CMsgPracticeLobbyCreate__SaveGame;
typedef struct _CMsgPracticeLobbySetTeamSlot CMsgPracticeLobbySetTeamSlot;
typedef struct _CMsgPracticeLobbySetCoach CMsgPracticeLobbySetCoach;
typedef struct _CMsgPracticeLobbyJoinBroadcastChannel CMsgPracticeLobbyJoinBroadcastChannel;
typedef struct _CMsgPracticeLobbyCloseBroadcastChannel CMsgPracticeLobbyCloseBroadcastChannel;
typedef struct _CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus;
typedef struct _CMsgPracticeLobbyKick CMsgPracticeLobbyKick;
typedef struct _CMsgPracticeLobbyKickFromTeam CMsgPracticeLobbyKickFromTeam;
typedef struct _CMsgPracticeLobbyLeave CMsgPracticeLobbyLeave;
typedef struct _CMsgPracticeLobbyLaunch CMsgPracticeLobbyLaunch;
typedef struct _CMsgApplyTeamToPracticeLobby CMsgApplyTeamToPracticeLobby;
typedef struct _CMsgClearPracticeLobbyTeam CMsgClearPracticeLobbyTeam;
typedef struct _CMsgPracticeLobbyList CMsgPracticeLobbyList;
typedef struct _CMsgPracticeLobbyListResponseEntry CMsgPracticeLobbyListResponseEntry;
typedef struct _CMsgPracticeLobbyListResponseEntry__CLobbyMember CMsgPracticeLobbyListResponseEntry__CLobbyMember;
typedef struct _CMsgPracticeLobbyListResponse CMsgPracticeLobbyListResponse;
typedef struct _CMsgLobbyList CMsgLobbyList;
typedef struct _CMsgLobbyListResponse CMsgLobbyListResponse;
typedef struct _CMsgPracticeLobbyJoin CMsgPracticeLobbyJoin;
typedef struct _CMsgPracticeLobbyJoinResponse CMsgPracticeLobbyJoinResponse;
typedef struct _CMsgFriendPracticeLobbyListRequest CMsgFriendPracticeLobbyListRequest;
typedef struct _CMsgFriendPracticeLobbyListResponse CMsgFriendPracticeLobbyListResponse;
typedef struct _CMsgGuildmatePracticeLobbyListRequest CMsgGuildmatePracticeLobbyListRequest;
typedef struct _CMsgGuildmatePracticeLobbyListResponse CMsgGuildmatePracticeLobbyListResponse;
typedef struct _CMsgJoinableCustomGameModesRequest CMsgJoinableCustomGameModesRequest;
typedef struct _CMsgJoinableCustomGameModesResponseEntry CMsgJoinableCustomGameModesResponseEntry;
typedef struct _CMsgJoinableCustomGameModesResponse CMsgJoinableCustomGameModesResponse;
typedef struct _CMsgJoinableCustomLobbiesRequest CMsgJoinableCustomLobbiesRequest;
typedef struct _CMsgJoinableCustomLobbiesResponseEntry CMsgJoinableCustomLobbiesResponseEntry;
typedef struct _CMsgJoinableCustomLobbiesResponse CMsgJoinableCustomLobbiesResponse;
typedef struct _CMsgQuickJoinCustomLobby CMsgQuickJoinCustomLobby;
typedef struct _CMsgQuickJoinCustomLobby__LegacyRegionPing CMsgQuickJoinCustomLobby__LegacyRegionPing;
typedef struct _CMsgQuickJoinCustomLobbyResponse CMsgQuickJoinCustomLobbyResponse;
typedef struct _CMsgBotGameCreate CMsgBotGameCreate;
typedef struct _CMsgCustomGameCreate CMsgCustomGameCreate;
typedef struct _CMsgEventGameCreate CMsgEventGameCreate;
typedef struct _CMsgDOTAPartyMemberSetCoach CMsgDOTAPartyMemberSetCoach;
typedef struct _CMsgDOTASetGroupLeader CMsgDOTASetGroupLeader;
typedef struct _CMsgDOTACancelGroupInvites CMsgDOTACancelGroupInvites;
typedef struct _CMsgDOTASetGroupOpenStatus CMsgDOTASetGroupOpenStatus;
typedef struct _CMsgDOTAGroupMergeInvite CMsgDOTAGroupMergeInvite;
typedef struct _CMsgDOTAGroupMergeResponse CMsgDOTAGroupMergeResponse;
typedef struct _CMsgDOTAGroupMergeReply CMsgDOTAGroupMergeReply;
typedef struct _CMsgSpectatorLobbyGameDetails CMsgSpectatorLobbyGameDetails;
typedef struct _CMsgSetSpectatorLobbyDetails CMsgSetSpectatorLobbyDetails;
typedef struct _CMsgCreateSpectatorLobby CMsgCreateSpectatorLobby;
typedef struct _CMsgSpectatorLobbyList CMsgSpectatorLobbyList;
typedef struct _CMsgSpectatorLobbyListResponse CMsgSpectatorLobbyListResponse;
typedef struct _CMsgSpectatorLobbyListResponse__SpectatorLobby CMsgSpectatorLobbyListResponse__SpectatorLobby;


/* --- enums --- */

typedef enum _EStartFindingMatchResult {
  ESTART_FINDING_MATCH_RESULT__k_EStartFindingMatchResult_Invalid = 0,
  ESTART_FINDING_MATCH_RESULT__k_EStartFindingMatchResult_OK = 1,
  ESTART_FINDING_MATCH_RESULT__k_EStartFindingMatchResult_AlreadySearching = 2,
  ESTART_FINDING_MATCH_RESULT__k_EStartFindingMatchResult_FailGeneric = 100,
  ESTART_FINDING_MATCH_RESULT__k_EStartFindingMatchResult_FailedIgnore = 101,
  ESTART_FINDING_MATCH_RESULT__k_EStartFindingMatchResult_MatchmakingDisabled = 102,
  ESTART_FINDING_MATCH_RESULT__k_EStartFindingMatchResult_RegionOffline = 103,
  ESTART_FINDING_MATCH_RESULT__k_EStartFindingMatchResult_MatchmakingCooldown = 104,
  ESTART_FINDING_MATCH_RESULT__k_EStartFindingMatchResult_ClientOutOfDate = 105,
  ESTART_FINDING_MATCH_RESULT__k_EStartFindingMatchResult_CompetitiveNoLowPriority = 106,
  ESTART_FINDING_MATCH_RESULT__k_EStartFindingMatchResult_CompetitiveNotUnlocked = 107,
  ESTART_FINDING_MATCH_RESULT__k_EStartFindingMatchResult_GameModeNotUnlocked = 108,
  ESTART_FINDING_MATCH_RESULT__k_EStartFindingMatchResult_CompetitiveNotEnoughSkillData = 109,
  ESTART_FINDING_MATCH_RESULT__k_EStartFindingMatchResult_MissingInitialSkill = 110,
  ESTART_FINDING_MATCH_RESULT__k_EStartFindingMatchResult_CompetitiveRankSpreadTooLarge = 111,
  ESTART_FINDING_MATCH_RESULT__k_EStartFindingMatchResult_MemberAlreadyInLobby = 112,
  ESTART_FINDING_MATCH_RESULT__k_EStartFindingMatchResult_MemberNotVACVerified = 113,
  ESTART_FINDING_MATCH_RESULT__k_EStartFindingMatchResult_WeekendTourneyBadPartySize = 114,
  ESTART_FINDING_MATCH_RESULT__k_EStartFindingMatchResult_WeekendTourneyTeamBuyInTooSmall = 115,
  ESTART_FINDING_MATCH_RESULT__k_EStartFindingMatchResult_WeekendTourneyIndividualBuyInTooLarge = 116,
  ESTART_FINDING_MATCH_RESULT__k_EStartFindingMatchResult_WeekendTourneyTeamBuyInTooLarge = 117,
  ESTART_FINDING_MATCH_RESULT__k_EStartFindingMatchResult_MemberMissingEventOwnership = 118,
  ESTART_FINDING_MATCH_RESULT__k_EStartFindingMatchResult_WeekendTourneyNotUnlocked = 119
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESTART_FINDING_MATCH_RESULT)
} EStartFindingMatchResult;

/* --- messages --- */

struct  _CMsgStartFindingMatch
{
  ProtobufCMessage base;
  char *key;
  protobuf_c_boolean has_matchgroups;
  uint32_t matchgroups;
  protobuf_c_boolean has_client_version;
  uint32_t client_version;
  protobuf_c_boolean has_game_modes;
  uint32_t game_modes;
  protobuf_c_boolean has_bot_difficulty;
  DOTABotDifficulty bot_difficulty;
  protobuf_c_boolean has_match_type;
  MatchType match_type;
  protobuf_c_boolean has_matchlanguages;
  uint32_t matchlanguages;
  protobuf_c_boolean has_map_preference;
  uint32_t map_preference;
  protobuf_c_boolean has_team_id;
  uint32_t team_id;
  protobuf_c_boolean has_game_language_enum;
  MatchLanguages game_language_enum;
  char *game_language_name;
  CMsgClientPingData *ping_data;
  protobuf_c_boolean has_region_select_flags;
  uint32_t region_select_flags;
};
#define CMSG_START_FINDING_MATCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_start_finding_match__descriptor) \
    , NULL, 0,4294967295u, 0,0, 0,4294967295u, 0,DOTABOT_DIFFICULTY__BOT_DIFFICULTY_HARD, 0,MATCH_TYPE__MATCH_TYPE_CASUAL, 0,4294967295u, 0,0, 0,0, 0,MATCH_LANGUAGES__MATCH_LANGUAGE_INVALID, NULL, NULL, 0,0 }


struct  _CMsgStartFindingMatchResult
{
  ProtobufCMessage base;
  protobuf_c_boolean has_legacy_generic_eresult;
  uint32_t legacy_generic_eresult;
  protobuf_c_boolean has_result;
  EStartFindingMatchResult result;
  char *error_token;
  char *debug_message;
  size_t n_responsible_party_members;
  uint64_t *responsible_party_members;
};
#define CMSG_START_FINDING_MATCH_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_start_finding_match_result__descriptor) \
    , 0,2u, 0,ESTART_FINDING_MATCH_RESULT__k_EStartFindingMatchResult_Invalid, NULL, NULL, 0,NULL }


struct  _CMsgStopFindingMatch
{
  ProtobufCMessage base;
};
#define CMSG_STOP_FINDING_MATCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_stop_finding_match__descriptor) \
     }


struct  _CMsgReadyUp
{
  ProtobufCMessage base;
  protobuf_c_boolean has_state;
  DOTALobbyReadyState state;
  protobuf_c_boolean has_ready_up_key;
  uint64_t ready_up_key;
  CDOTAClientHardwareSpecs *hardware_specs;
};
#define CMSG_READY_UP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_ready_up__descriptor) \
    , 0,DOTALOBBY_READY_STATE__DOTALobbyReadyState_UNDECLARED, 0,0, NULL }


struct  _CMsgReadyUpStatus
{
  ProtobufCMessage base;
  protobuf_c_boolean has_lobby_id;
  uint64_t lobby_id;
  size_t n_accepted_ids;
  uint32_t *accepted_ids;
  size_t n_declined_ids;
  uint32_t *declined_ids;
};
#define CMSG_READY_UP_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_ready_up_status__descriptor) \
    , 0,0, 0,NULL, 0,NULL }


struct  _CMsgAbandonCurrentGame
{
  ProtobufCMessage base;
};
#define CMSG_ABANDON_CURRENT_GAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_abandon_current_game__descriptor) \
     }


struct  _CMsgPracticeLobbySetDetails
{
  ProtobufCMessage base;
  protobuf_c_boolean has_lobby_id;
  uint64_t lobby_id;
  char *game_name;
  size_t n_team_details;
  CLobbyTeamDetails **team_details;
  protobuf_c_boolean has_server_region;
  uint32_t server_region;
  protobuf_c_boolean has_game_mode;
  uint32_t game_mode;
  protobuf_c_boolean has_cm_pick;
  DOTACMPICK cm_pick;
  protobuf_c_boolean has_bot_difficulty;
  DOTABotDifficulty bot_difficulty;
  protobuf_c_boolean has_allow_cheats;
  protobuf_c_boolean allow_cheats;
  protobuf_c_boolean has_fill_with_bots;
  protobuf_c_boolean fill_with_bots;
  protobuf_c_boolean has_intro_mode;
  protobuf_c_boolean intro_mode;
  protobuf_c_boolean has_allow_spectating;
  protobuf_c_boolean allow_spectating;
  protobuf_c_boolean has_game_version;
  DOTAGameVersion game_version;
  char *pass_key;
  protobuf_c_boolean has_leagueid;
  uint32_t leagueid;
  protobuf_c_boolean has_penalty_level_radiant;
  uint32_t penalty_level_radiant;
  protobuf_c_boolean has_penalty_level_dire;
  uint32_t penalty_level_dire;
  protobuf_c_boolean has_load_game_id;
  uint32_t load_game_id;
  protobuf_c_boolean has_series_type;
  uint32_t series_type;
  protobuf_c_boolean has_radiant_series_wins;
  uint32_t radiant_series_wins;
  protobuf_c_boolean has_dire_series_wins;
  uint32_t dire_series_wins;
  protobuf_c_boolean has_allchat;
  protobuf_c_boolean allchat;
  protobuf_c_boolean has_dota_tv_delay;
  LobbyDotaTVDelay dota_tv_delay;
  protobuf_c_boolean has_lan;
  protobuf_c_boolean lan;
  char *custom_game_mode;
  char *custom_map_name;
  protobuf_c_boolean has_custom_difficulty;
  uint32_t custom_difficulty;
  protobuf_c_boolean has_custom_game_id;
  uint64_t custom_game_id;
  protobuf_c_boolean has_custom_min_players;
  uint32_t custom_min_players;
  protobuf_c_boolean has_custom_max_players;
  uint32_t custom_max_players;
  protobuf_c_boolean has_lan_host_ping_to_server_region;
  uint32_t lan_host_ping_to_server_region;
  protobuf_c_boolean has_visibility;
  DOTALobbyVisibility visibility;
  protobuf_c_boolean has_custom_game_crc;
  uint64_t custom_game_crc;
  protobuf_c_boolean has_league_series_id;
  uint32_t league_series_id;
  protobuf_c_boolean has_league_game_id;
  uint32_t league_game_id;
  protobuf_c_boolean has_custom_game_timestamp;
  uint32_t custom_game_timestamp;
  protobuf_c_boolean has_previous_match_override;
  uint64_t previous_match_override;
  protobuf_c_boolean has_league_selection_priority_team;
  uint32_t league_selection_priority_team;
  protobuf_c_boolean has_league_selection_priority_choice;
  SelectionPriorityType league_selection_priority_choice;
  protobuf_c_boolean has_league_non_selection_priority_choice;
  SelectionPriorityType league_non_selection_priority_choice;
  protobuf_c_boolean has_pause_setting;
  LobbyDotaPauseSetting pause_setting;
};
#define CMSG_PRACTICE_LOBBY_SET_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_practice_lobby_set_details__descriptor) \
    , 0,0, NULL, 0,NULL, 0,0, 0,0, 0,DOTA__CM__PICK__DOTA_CM_RANDOM, 0,DOTABOT_DIFFICULTY__BOT_DIFFICULTY_MEDIUM, 0,0, 0,0, 0,0, 0,0, 0,DOTAGAME_VERSION__GAME_VERSION_CURRENT, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,LOBBY_DOTA_TVDELAY__LobbyDotaTV_120, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,DOTALOBBY_VISIBILITY__DOTALobbyVisibility_Public, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,SELECTION_PRIORITY_TYPE__UNDEFINED, 0,SELECTION_PRIORITY_TYPE__UNDEFINED, 0,LOBBY_DOTA_PAUSE_SETTING__LobbyDotaPauseSetting_Unlimited }


struct  _CMsgPracticeLobbyCreate__SaveGame
{
  ProtobufCMessage base;
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
  protobuf_c_boolean has_version;
  int32_t version;
  protobuf_c_boolean has_steam_id;
  uint64_t steam_id;
  protobuf_c_boolean has_signature;
  uint64_t signature;
};
#define CMSG_PRACTICE_LOBBY_CREATE__SAVE_GAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_practice_lobby_create__save_game__descriptor) \
    , 0,{0,NULL}, 0,0, 0,0, 0,0 }


struct  _CMsgPracticeLobbyCreate
{
  ProtobufCMessage base;
  char *search_key;
  char *pass_key;
  protobuf_c_boolean has_client_version;
  uint32_t client_version;
  CMsgPracticeLobbySetDetails *lobby_details;
  CMsgPracticeLobbyCreate__SaveGame *save_game;
};
#define CMSG_PRACTICE_LOBBY_CREATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_practice_lobby_create__descriptor) \
    , NULL, NULL, 0,0, NULL, NULL }


struct  _CMsgPracticeLobbySetTeamSlot
{
  ProtobufCMessage base;
  protobuf_c_boolean has_team;
  DOTAGCTEAM team;
  protobuf_c_boolean has_slot;
  uint32_t slot;
  protobuf_c_boolean has_bot_difficulty;
  DOTABotDifficulty bot_difficulty;
};
#define CMSG_PRACTICE_LOBBY_SET_TEAM_SLOT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_practice_lobby_set_team_slot__descriptor) \
    , 0,DOTA__GC__TEAM__DOTA_GC_TEAM_GOOD_GUYS, 0,0, 0,DOTABOT_DIFFICULTY__BOT_DIFFICULTY_PASSIVE }


struct  _CMsgPracticeLobbySetCoach
{
  ProtobufCMessage base;
  protobuf_c_boolean has_team;
  DOTAGCTEAM team;
};
#define CMSG_PRACTICE_LOBBY_SET_COACH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_practice_lobby_set_coach__descriptor) \
    , 0,DOTA__GC__TEAM__DOTA_GC_TEAM_GOOD_GUYS }


struct  _CMsgPracticeLobbyJoinBroadcastChannel
{
  ProtobufCMessage base;
  protobuf_c_boolean has_channel;
  uint32_t channel;
  char *preferred_description;
  char *preferred_country_code;
  char *preferred_language_code;
};
#define CMSG_PRACTICE_LOBBY_JOIN_BROADCAST_CHANNEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_practice_lobby_join_broadcast_channel__descriptor) \
    , 0,0, NULL, NULL, NULL }


struct  _CMsgPracticeLobbyCloseBroadcastChannel
{
  ProtobufCMessage base;
  protobuf_c_boolean has_channel;
  uint32_t channel;
};
#define CMSG_PRACTICE_LOBBY_CLOSE_BROADCAST_CHANNEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_practice_lobby_close_broadcast_channel__descriptor) \
    , 0,0 }


struct  _CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus
{
  ProtobufCMessage base;
};
#define CMSG_PRACTICE_LOBBY_TOGGLE_BROADCAST_CHANNEL_CAMERAMAN_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_practice_lobby_toggle_broadcast_channel_cameraman_status__descriptor) \
     }


struct  _CMsgPracticeLobbyKick
{
  ProtobufCMessage base;
  protobuf_c_boolean has_account_id;
  uint32_t account_id;
};
#define CMSG_PRACTICE_LOBBY_KICK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_practice_lobby_kick__descriptor) \
    , 0,0 }


struct  _CMsgPracticeLobbyKickFromTeam
{
  ProtobufCMessage base;
  protobuf_c_boolean has_account_id;
  uint32_t account_id;
};
#define CMSG_PRACTICE_LOBBY_KICK_FROM_TEAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_practice_lobby_kick_from_team__descriptor) \
    , 0,0 }


struct  _CMsgPracticeLobbyLeave
{
  ProtobufCMessage base;
};
#define CMSG_PRACTICE_LOBBY_LEAVE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_practice_lobby_leave__descriptor) \
     }


struct  _CMsgPracticeLobbyLaunch
{
  ProtobufCMessage base;
  protobuf_c_boolean has_client_version;
  uint32_t client_version;
};
#define CMSG_PRACTICE_LOBBY_LAUNCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_practice_lobby_launch__descriptor) \
    , 0,0 }


struct  _CMsgApplyTeamToPracticeLobby
{
  ProtobufCMessage base;
  protobuf_c_boolean has_team_id;
  uint32_t team_id;
};
#define CMSG_APPLY_TEAM_TO_PRACTICE_LOBBY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_apply_team_to_practice_lobby__descriptor) \
    , 0,0 }


struct  _CMsgClearPracticeLobbyTeam
{
  ProtobufCMessage base;
};
#define CMSG_CLEAR_PRACTICE_LOBBY_TEAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_clear_practice_lobby_team__descriptor) \
     }


struct  _CMsgPracticeLobbyList
{
  ProtobufCMessage base;
  protobuf_c_boolean has_tournament_games;
  protobuf_c_boolean tournament_games;
  char *pass_key;
  protobuf_c_boolean has_region;
  uint32_t region;
  protobuf_c_boolean has_game_mode;
  DOTAGameMode game_mode;
};
#define CMSG_PRACTICE_LOBBY_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_practice_lobby_list__descriptor) \
    , 0,0, NULL, 0,0, 0,DOTA__GAME_MODE__DOTA_GAMEMODE_NONE }


struct  _CMsgPracticeLobbyListResponseEntry__CLobbyMember
{
  ProtobufCMessage base;
  protobuf_c_boolean has_account_id;
  uint32_t account_id;
  char *player_name;
};
#define CMSG_PRACTICE_LOBBY_LIST_RESPONSE_ENTRY__CLOBBY_MEMBER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_practice_lobby_list_response_entry__clobby_member__descriptor) \
    , 0,0, NULL }


struct  _CMsgPracticeLobbyListResponseEntry
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint64_t id;
  protobuf_c_boolean has_tournament_id;
  uint32_t tournament_id;
  protobuf_c_boolean has_tournament_game_id;
  uint32_t tournament_game_id;
  size_t n_members;
  CMsgPracticeLobbyListResponseEntry__CLobbyMember **members;
  protobuf_c_boolean has_requires_pass_key;
  protobuf_c_boolean requires_pass_key;
  protobuf_c_boolean has_leader_account_id;
  uint32_t leader_account_id;
  protobuf_c_boolean has_guild_id;
  uint32_t guild_id;
  protobuf_c_boolean has_guild_logo;
  uint64_t guild_logo;
  char *name;
  char *custom_game_mode;
  protobuf_c_boolean has_game_mode;
  DOTAGameMode game_mode;
  protobuf_c_boolean has_friend_present;
  protobuf_c_boolean friend_present;
  protobuf_c_boolean has_players;
  uint32_t players;
  char *custom_map_name;
  protobuf_c_boolean has_max_player_count;
  uint32_t max_player_count;
  protobuf_c_boolean has_server_region;
  uint32_t server_region;
  protobuf_c_boolean has_lan_host_ping_to_server_region;
  uint32_t lan_host_ping_to_server_region;
  protobuf_c_boolean has_league_id;
  uint32_t league_id;
};
#define CMSG_PRACTICE_LOBBY_LIST_RESPONSE_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_practice_lobby_list_response_entry__descriptor) \
    , 0,0, 0,0, 0,0, 0,NULL, 0,0, 0,0, 0,0, 0,0, NULL, NULL, 0,DOTA__GAME_MODE__DOTA_GAMEMODE_NONE, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgPracticeLobbyListResponse
{
  ProtobufCMessage base;
  protobuf_c_boolean has_tournament_games;
  protobuf_c_boolean tournament_games;
  size_t n_lobbies;
  CMsgPracticeLobbyListResponseEntry **lobbies;
};
#define CMSG_PRACTICE_LOBBY_LIST_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_practice_lobby_list_response__descriptor) \
    , 0,0, 0,NULL }


struct  _CMsgLobbyList
{
  ProtobufCMessage base;
  protobuf_c_boolean has_server_region;
  uint32_t server_region;
  protobuf_c_boolean has_game_mode;
  DOTAGameMode game_mode;
};
#define CMSG_LOBBY_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_lobby_list__descriptor) \
    , 0,0u, 0,DOTA__GAME_MODE__DOTA_GAMEMODE_NONE }


struct  _CMsgLobbyListResponse
{
  ProtobufCMessage base;
  size_t n_lobbies;
  CMsgPracticeLobbyListResponseEntry **lobbies;
};
#define CMSG_LOBBY_LIST_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_lobby_list_response__descriptor) \
    , 0,NULL }


struct  _CMsgPracticeLobbyJoin
{
  ProtobufCMessage base;
  protobuf_c_boolean has_lobby_id;
  uint64_t lobby_id;
  protobuf_c_boolean has_client_version;
  uint32_t client_version;
  char *pass_key;
  protobuf_c_boolean has_custom_game_crc;
  uint64_t custom_game_crc;
  protobuf_c_boolean has_custom_game_timestamp;
  uint32_t custom_game_timestamp;
};
#define CMSG_PRACTICE_LOBBY_JOIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_practice_lobby_join__descriptor) \
    , 0,0, 0,0, NULL, 0,0, 0,0 }


struct  _CMsgPracticeLobbyJoinResponse
{
  ProtobufCMessage base;
  protobuf_c_boolean has_result;
  DOTAJoinLobbyResult result;
};
#define CMSG_PRACTICE_LOBBY_JOIN_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_practice_lobby_join_response__descriptor) \
    , 0,DOTAJOIN_LOBBY_RESULT__DOTA_JOIN_RESULT_SUCCESS }


struct  _CMsgFriendPracticeLobbyListRequest
{
  ProtobufCMessage base;
  size_t n_friends;
  uint32_t *friends;
};
#define CMSG_FRIEND_PRACTICE_LOBBY_LIST_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_friend_practice_lobby_list_request__descriptor) \
    , 0,NULL }


struct  _CMsgFriendPracticeLobbyListResponse
{
  ProtobufCMessage base;
  size_t n_lobbies;
  CMsgPracticeLobbyListResponseEntry **lobbies;
};
#define CMSG_FRIEND_PRACTICE_LOBBY_LIST_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_friend_practice_lobby_list_response__descriptor) \
    , 0,NULL }


struct  _CMsgGuildmatePracticeLobbyListRequest
{
  ProtobufCMessage base;
  size_t n_guilds;
  uint32_t *guilds;
};
#define CMSG_GUILDMATE_PRACTICE_LOBBY_LIST_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_guildmate_practice_lobby_list_request__descriptor) \
    , 0,NULL }


struct  _CMsgGuildmatePracticeLobbyListResponse
{
  ProtobufCMessage base;
  size_t n_lobbies;
  CMsgPracticeLobbyListResponseEntry **lobbies;
};
#define CMSG_GUILDMATE_PRACTICE_LOBBY_LIST_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_guildmate_practice_lobby_list_response__descriptor) \
    , 0,NULL }


struct  _CMsgJoinableCustomGameModesRequest
{
  ProtobufCMessage base;
  protobuf_c_boolean has_server_region;
  uint32_t server_region;
};
#define CMSG_JOINABLE_CUSTOM_GAME_MODES_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_joinable_custom_game_modes_request__descriptor) \
    , 0,0 }


struct  _CMsgJoinableCustomGameModesResponseEntry
{
  ProtobufCMessage base;
  protobuf_c_boolean has_custom_game_id;
  uint64_t custom_game_id;
  protobuf_c_boolean has_lobby_count;
  uint32_t lobby_count;
  protobuf_c_boolean has_player_count;
  uint32_t player_count;
};
#define CMSG_JOINABLE_CUSTOM_GAME_MODES_RESPONSE_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_joinable_custom_game_modes_response_entry__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _CMsgJoinableCustomGameModesResponse
{
  ProtobufCMessage base;
  size_t n_game_modes;
  CMsgJoinableCustomGameModesResponseEntry **game_modes;
};
#define CMSG_JOINABLE_CUSTOM_GAME_MODES_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_joinable_custom_game_modes_response__descriptor) \
    , 0,NULL }


struct  _CMsgJoinableCustomLobbiesRequest
{
  ProtobufCMessage base;
  protobuf_c_boolean has_server_region;
  uint32_t server_region;
  protobuf_c_boolean has_custom_game_id;
  uint64_t custom_game_id;
};
#define CMSG_JOINABLE_CUSTOM_LOBBIES_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_joinable_custom_lobbies_request__descriptor) \
    , 0,0, 0,0 }


struct  _CMsgJoinableCustomLobbiesResponseEntry
{
  ProtobufCMessage base;
  protobuf_c_boolean has_lobby_id;
  uint64_t lobby_id;
  protobuf_c_boolean has_custom_game_id;
  uint64_t custom_game_id;
  char *lobby_name;
  protobuf_c_boolean has_member_count;
  uint32_t member_count;
  protobuf_c_boolean has_leader_account_id;
  uint32_t leader_account_id;
  char *leader_name;
  char *custom_map_name;
  protobuf_c_boolean has_max_player_count;
  uint32_t max_player_count;
  protobuf_c_boolean has_server_region;
  uint32_t server_region;
  protobuf_c_boolean has_lan_host_ping_to_server_region;
  uint32_t lan_host_ping_to_server_region;
  protobuf_c_boolean has_has_pass_key;
  protobuf_c_boolean has_pass_key;
};
#define CMSG_JOINABLE_CUSTOM_LOBBIES_RESPONSE_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_joinable_custom_lobbies_response_entry__descriptor) \
    , 0,0, 0,0, NULL, 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgJoinableCustomLobbiesResponse
{
  ProtobufCMessage base;
  size_t n_lobbies;
  CMsgJoinableCustomLobbiesResponseEntry **lobbies;
};
#define CMSG_JOINABLE_CUSTOM_LOBBIES_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_joinable_custom_lobbies_response__descriptor) \
    , 0,NULL }


struct  _CMsgQuickJoinCustomLobby__LegacyRegionPing
{
  ProtobufCMessage base;
  protobuf_c_boolean has_server_region;
  uint32_t server_region;
  protobuf_c_boolean has_ping;
  uint32_t ping;
  protobuf_c_boolean has_region_code;
  uint32_t region_code;
};
#define CMSG_QUICK_JOIN_CUSTOM_LOBBY__LEGACY_REGION_PING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_quick_join_custom_lobby__legacy_region_ping__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _CMsgQuickJoinCustomLobby
{
  ProtobufCMessage base;
  protobuf_c_boolean has_legacy_server_region;
  uint32_t legacy_server_region;
  protobuf_c_boolean has_custom_game_id;
  uint64_t custom_game_id;
  protobuf_c_boolean has_client_version;
  uint32_t client_version;
  CMsgPracticeLobbySetDetails *create_lobby_details;
  protobuf_c_boolean has_allow_any_map;
  protobuf_c_boolean allow_any_map;
  size_t n_legacy_region_pings;
  CMsgQuickJoinCustomLobby__LegacyRegionPing **legacy_region_pings;
  CMsgClientPingData *ping_data;
};
#define CMSG_QUICK_JOIN_CUSTOM_LOBBY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_quick_join_custom_lobby__descriptor) \
    , 0,0, 0,0, 0,0, NULL, 0,0, 0,NULL, NULL }


struct  _CMsgQuickJoinCustomLobbyResponse
{
  ProtobufCMessage base;
  protobuf_c_boolean has_result;
  DOTAJoinLobbyResult result;
};
#define CMSG_QUICK_JOIN_CUSTOM_LOBBY_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_quick_join_custom_lobby_response__descriptor) \
    , 0,DOTAJOIN_LOBBY_RESULT__DOTA_JOIN_RESULT_SUCCESS }


struct  _CMsgBotGameCreate
{
  ProtobufCMessage base;
  char *search_key;
  protobuf_c_boolean has_client_version;
  uint32_t client_version;
  protobuf_c_boolean has_difficulty;
  DOTABotDifficulty difficulty;
  protobuf_c_boolean has_team;
  DOTAGCTEAM team;
  protobuf_c_boolean has_game_mode;
  uint32_t game_mode;
};
#define CMSG_BOT_GAME_CREATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_bot_game_create__descriptor) \
    , NULL, 0,0, 0,DOTABOT_DIFFICULTY__BOT_DIFFICULTY_PASSIVE, 0,DOTA__GC__TEAM__DOTA_GC_TEAM_GOOD_GUYS, 0,0 }


struct  _CMsgCustomGameCreate
{
  ProtobufCMessage base;
  char *search_key;
  protobuf_c_boolean has_client_version;
  uint32_t client_version;
  protobuf_c_boolean has_difficulty;
  uint32_t difficulty;
  char *game_mode;
  char *map;
  protobuf_c_boolean has_custom_game_id;
  uint64_t custom_game_id;
};
#define CMSG_CUSTOM_GAME_CREATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_custom_game_create__descriptor) \
    , NULL, 0,0, 0,0, NULL, NULL, 0,0 }


struct  _CMsgEventGameCreate
{
  ProtobufCMessage base;
  char *search_key;
  protobuf_c_boolean has_client_version;
  uint32_t client_version;
  protobuf_c_boolean has_difficulty;
  uint32_t difficulty;
  char *game_mode;
  char *map;
  protobuf_c_boolean has_custom_game_id;
  uint64_t custom_game_id;
};
#define CMSG_EVENT_GAME_CREATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_event_game_create__descriptor) \
    , NULL, 0,0, 0,0, NULL, NULL, 0,0 }


struct  _CMsgDOTAPartyMemberSetCoach
{
  ProtobufCMessage base;
  protobuf_c_boolean has_wants_coach;
  protobuf_c_boolean wants_coach;
};
#define CMSG_DOTAPARTY_MEMBER_SET_COACH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotaparty_member_set_coach__descriptor) \
    , 0,0 }


struct  _CMsgDOTASetGroupLeader
{
  ProtobufCMessage base;
  protobuf_c_boolean has_new_leader_steamid;
  uint64_t new_leader_steamid;
};
#define CMSG_DOTASET_GROUP_LEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotaset_group_leader__descriptor) \
    , 0,0 }


struct  _CMsgDOTACancelGroupInvites
{
  ProtobufCMessage base;
  size_t n_invited_steamids;
  uint64_t *invited_steamids;
  size_t n_invited_groupids;
  uint64_t *invited_groupids;
};
#define CMSG_DOTACANCEL_GROUP_INVITES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotacancel_group_invites__descriptor) \
    , 0,NULL, 0,NULL }


struct  _CMsgDOTASetGroupOpenStatus
{
  ProtobufCMessage base;
  protobuf_c_boolean has_open;
  protobuf_c_boolean open;
};
#define CMSG_DOTASET_GROUP_OPEN_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotaset_group_open_status__descriptor) \
    , 0,0 }


struct  _CMsgDOTAGroupMergeInvite
{
  ProtobufCMessage base;
  protobuf_c_boolean has_other_group_id;
  uint64_t other_group_id;
};
#define CMSG_DOTAGROUP_MERGE_INVITE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotagroup_merge_invite__descriptor) \
    , 0,0 }


struct  _CMsgDOTAGroupMergeResponse
{
  ProtobufCMessage base;
  protobuf_c_boolean has_initiator_group_id;
  uint64_t initiator_group_id;
  protobuf_c_boolean has_accept;
  protobuf_c_boolean accept;
};
#define CMSG_DOTAGROUP_MERGE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotagroup_merge_response__descriptor) \
    , 0,0, 0,0 }


struct  _CMsgDOTAGroupMergeReply
{
  ProtobufCMessage base;
  protobuf_c_boolean has_result;
  EDOTAGroupMergeResult result;
};
#define CMSG_DOTAGROUP_MERGE_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_dotagroup_merge_reply__descriptor) \
    , 0,EDOTAGROUP_MERGE_RESULT__k_EDOTAGroupMergeResult_OK }


struct  _CMsgSpectatorLobbyGameDetails
{
  ProtobufCMessage base;
  protobuf_c_boolean has_language;
  uint32_t language;
  protobuf_c_boolean has_match_id;
  uint64_t match_id;
  protobuf_c_boolean has_server_steam_id;
  uint64_t server_steam_id;
  char *stream_url;
  char *stream_name;
  protobuf_c_boolean has_league_id;
  uint32_t league_id;
  protobuf_c_boolean has_series_id;
  uint32_t series_id;
  protobuf_c_boolean has_series_type;
  uint32_t series_type;
  protobuf_c_boolean has_series_game;
  uint32_t series_game;
  protobuf_c_boolean has_team1_id;
  uint32_t team1_id;
  protobuf_c_boolean has_team2_id;
  uint32_t team2_id;
  char *stage_name;
};
#define CMSG_SPECTATOR_LOBBY_GAME_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_spectator_lobby_game_details__descriptor) \
    , 0,0, 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL }


struct  _CMsgSetSpectatorLobbyDetails
{
  ProtobufCMessage base;
  protobuf_c_boolean has_lobby_id;
  uint64_t lobby_id;
  char *lobby_name;
  char *pass_key;
  CMsgSpectatorLobbyGameDetails *game_details;
};
#define CMSG_SET_SPECTATOR_LOBBY_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_set_spectator_lobby_details__descriptor) \
    , 0,0, NULL, NULL, NULL }


struct  _CMsgCreateSpectatorLobby
{
  ProtobufCMessage base;
  protobuf_c_boolean has_client_version;
  uint32_t client_version;
  CMsgSetSpectatorLobbyDetails *details;
};
#define CMSG_CREATE_SPECTATOR_LOBBY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_create_spectator_lobby__descriptor) \
    , 0,0, NULL }


struct  _CMsgSpectatorLobbyList
{
  ProtobufCMessage base;
};
#define CMSG_SPECTATOR_LOBBY_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_spectator_lobby_list__descriptor) \
     }


struct  _CMsgSpectatorLobbyListResponse__SpectatorLobby
{
  ProtobufCMessage base;
  protobuf_c_boolean has_lobby_id;
  uint64_t lobby_id;
  char *game_name;
  protobuf_c_boolean has_requires_pass_key;
  protobuf_c_boolean requires_pass_key;
  protobuf_c_boolean has_leader_account_id;
  uint32_t leader_account_id;
  protobuf_c_boolean has_member_count;
  uint32_t member_count;
  CMsgSpectatorLobbyGameDetails *game_details;
};
#define CMSG_SPECTATOR_LOBBY_LIST_RESPONSE__SPECTATOR_LOBBY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_spectator_lobby_list_response__spectator_lobby__descriptor) \
    , 0,0, NULL, 0,0, 0,0, 0,0, NULL }


struct  _CMsgSpectatorLobbyListResponse
{
  ProtobufCMessage base;
  size_t n_lobbies;
  CMsgSpectatorLobbyListResponse__SpectatorLobby **lobbies;
};
#define CMSG_SPECTATOR_LOBBY_LIST_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_spectator_lobby_list_response__descriptor) \
    , 0,NULL }


/* CMsgStartFindingMatch methods */
void   cmsg_start_finding_match__init
                     (CMsgStartFindingMatch         *message);
size_t cmsg_start_finding_match__get_packed_size
                     (const CMsgStartFindingMatch   *message);
size_t cmsg_start_finding_match__pack
                     (const CMsgStartFindingMatch   *message,
                      uint8_t             *out);
size_t cmsg_start_finding_match__pack_to_buffer
                     (const CMsgStartFindingMatch   *message,
                      ProtobufCBuffer     *buffer);
CMsgStartFindingMatch *
       cmsg_start_finding_match__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_start_finding_match__free_unpacked
                     (CMsgStartFindingMatch *message,
                      ProtobufCAllocator *allocator);
/* CMsgStartFindingMatchResult methods */
void   cmsg_start_finding_match_result__init
                     (CMsgStartFindingMatchResult         *message);
size_t cmsg_start_finding_match_result__get_packed_size
                     (const CMsgStartFindingMatchResult   *message);
size_t cmsg_start_finding_match_result__pack
                     (const CMsgStartFindingMatchResult   *message,
                      uint8_t             *out);
size_t cmsg_start_finding_match_result__pack_to_buffer
                     (const CMsgStartFindingMatchResult   *message,
                      ProtobufCBuffer     *buffer);
CMsgStartFindingMatchResult *
       cmsg_start_finding_match_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_start_finding_match_result__free_unpacked
                     (CMsgStartFindingMatchResult *message,
                      ProtobufCAllocator *allocator);
/* CMsgStopFindingMatch methods */
void   cmsg_stop_finding_match__init
                     (CMsgStopFindingMatch         *message);
size_t cmsg_stop_finding_match__get_packed_size
                     (const CMsgStopFindingMatch   *message);
size_t cmsg_stop_finding_match__pack
                     (const CMsgStopFindingMatch   *message,
                      uint8_t             *out);
size_t cmsg_stop_finding_match__pack_to_buffer
                     (const CMsgStopFindingMatch   *message,
                      ProtobufCBuffer     *buffer);
CMsgStopFindingMatch *
       cmsg_stop_finding_match__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_stop_finding_match__free_unpacked
                     (CMsgStopFindingMatch *message,
                      ProtobufCAllocator *allocator);
/* CMsgReadyUp methods */
void   cmsg_ready_up__init
                     (CMsgReadyUp         *message);
size_t cmsg_ready_up__get_packed_size
                     (const CMsgReadyUp   *message);
size_t cmsg_ready_up__pack
                     (const CMsgReadyUp   *message,
                      uint8_t             *out);
size_t cmsg_ready_up__pack_to_buffer
                     (const CMsgReadyUp   *message,
                      ProtobufCBuffer     *buffer);
CMsgReadyUp *
       cmsg_ready_up__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_ready_up__free_unpacked
                     (CMsgReadyUp *message,
                      ProtobufCAllocator *allocator);
/* CMsgReadyUpStatus methods */
void   cmsg_ready_up_status__init
                     (CMsgReadyUpStatus         *message);
size_t cmsg_ready_up_status__get_packed_size
                     (const CMsgReadyUpStatus   *message);
size_t cmsg_ready_up_status__pack
                     (const CMsgReadyUpStatus   *message,
                      uint8_t             *out);
size_t cmsg_ready_up_status__pack_to_buffer
                     (const CMsgReadyUpStatus   *message,
                      ProtobufCBuffer     *buffer);
CMsgReadyUpStatus *
       cmsg_ready_up_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_ready_up_status__free_unpacked
                     (CMsgReadyUpStatus *message,
                      ProtobufCAllocator *allocator);
/* CMsgAbandonCurrentGame methods */
void   cmsg_abandon_current_game__init
                     (CMsgAbandonCurrentGame         *message);
size_t cmsg_abandon_current_game__get_packed_size
                     (const CMsgAbandonCurrentGame   *message);
size_t cmsg_abandon_current_game__pack
                     (const CMsgAbandonCurrentGame   *message,
                      uint8_t             *out);
size_t cmsg_abandon_current_game__pack_to_buffer
                     (const CMsgAbandonCurrentGame   *message,
                      ProtobufCBuffer     *buffer);
CMsgAbandonCurrentGame *
       cmsg_abandon_current_game__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_abandon_current_game__free_unpacked
                     (CMsgAbandonCurrentGame *message,
                      ProtobufCAllocator *allocator);
/* CMsgPracticeLobbySetDetails methods */
void   cmsg_practice_lobby_set_details__init
                     (CMsgPracticeLobbySetDetails         *message);
size_t cmsg_practice_lobby_set_details__get_packed_size
                     (const CMsgPracticeLobbySetDetails   *message);
size_t cmsg_practice_lobby_set_details__pack
                     (const CMsgPracticeLobbySetDetails   *message,
                      uint8_t             *out);
size_t cmsg_practice_lobby_set_details__pack_to_buffer
                     (const CMsgPracticeLobbySetDetails   *message,
                      ProtobufCBuffer     *buffer);
CMsgPracticeLobbySetDetails *
       cmsg_practice_lobby_set_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_practice_lobby_set_details__free_unpacked
                     (CMsgPracticeLobbySetDetails *message,
                      ProtobufCAllocator *allocator);
/* CMsgPracticeLobbyCreate__SaveGame methods */
void   cmsg_practice_lobby_create__save_game__init
                     (CMsgPracticeLobbyCreate__SaveGame         *message);
/* CMsgPracticeLobbyCreate methods */
void   cmsg_practice_lobby_create__init
                     (CMsgPracticeLobbyCreate         *message);
size_t cmsg_practice_lobby_create__get_packed_size
                     (const CMsgPracticeLobbyCreate   *message);
size_t cmsg_practice_lobby_create__pack
                     (const CMsgPracticeLobbyCreate   *message,
                      uint8_t             *out);
size_t cmsg_practice_lobby_create__pack_to_buffer
                     (const CMsgPracticeLobbyCreate   *message,
                      ProtobufCBuffer     *buffer);
CMsgPracticeLobbyCreate *
       cmsg_practice_lobby_create__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_practice_lobby_create__free_unpacked
                     (CMsgPracticeLobbyCreate *message,
                      ProtobufCAllocator *allocator);
/* CMsgPracticeLobbySetTeamSlot methods */
void   cmsg_practice_lobby_set_team_slot__init
                     (CMsgPracticeLobbySetTeamSlot         *message);
size_t cmsg_practice_lobby_set_team_slot__get_packed_size
                     (const CMsgPracticeLobbySetTeamSlot   *message);
size_t cmsg_practice_lobby_set_team_slot__pack
                     (const CMsgPracticeLobbySetTeamSlot   *message,
                      uint8_t             *out);
size_t cmsg_practice_lobby_set_team_slot__pack_to_buffer
                     (const CMsgPracticeLobbySetTeamSlot   *message,
                      ProtobufCBuffer     *buffer);
CMsgPracticeLobbySetTeamSlot *
       cmsg_practice_lobby_set_team_slot__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_practice_lobby_set_team_slot__free_unpacked
                     (CMsgPracticeLobbySetTeamSlot *message,
                      ProtobufCAllocator *allocator);
/* CMsgPracticeLobbySetCoach methods */
void   cmsg_practice_lobby_set_coach__init
                     (CMsgPracticeLobbySetCoach         *message);
size_t cmsg_practice_lobby_set_coach__get_packed_size
                     (const CMsgPracticeLobbySetCoach   *message);
size_t cmsg_practice_lobby_set_coach__pack
                     (const CMsgPracticeLobbySetCoach   *message,
                      uint8_t             *out);
size_t cmsg_practice_lobby_set_coach__pack_to_buffer
                     (const CMsgPracticeLobbySetCoach   *message,
                      ProtobufCBuffer     *buffer);
CMsgPracticeLobbySetCoach *
       cmsg_practice_lobby_set_coach__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_practice_lobby_set_coach__free_unpacked
                     (CMsgPracticeLobbySetCoach *message,
                      ProtobufCAllocator *allocator);
/* CMsgPracticeLobbyJoinBroadcastChannel methods */
void   cmsg_practice_lobby_join_broadcast_channel__init
                     (CMsgPracticeLobbyJoinBroadcastChannel         *message);
size_t cmsg_practice_lobby_join_broadcast_channel__get_packed_size
                     (const CMsgPracticeLobbyJoinBroadcastChannel   *message);
size_t cmsg_practice_lobby_join_broadcast_channel__pack
                     (const CMsgPracticeLobbyJoinBroadcastChannel   *message,
                      uint8_t             *out);
size_t cmsg_practice_lobby_join_broadcast_channel__pack_to_buffer
                     (const CMsgPracticeLobbyJoinBroadcastChannel   *message,
                      ProtobufCBuffer     *buffer);
CMsgPracticeLobbyJoinBroadcastChannel *
       cmsg_practice_lobby_join_broadcast_channel__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_practice_lobby_join_broadcast_channel__free_unpacked
                     (CMsgPracticeLobbyJoinBroadcastChannel *message,
                      ProtobufCAllocator *allocator);
/* CMsgPracticeLobbyCloseBroadcastChannel methods */
void   cmsg_practice_lobby_close_broadcast_channel__init
                     (CMsgPracticeLobbyCloseBroadcastChannel         *message);
size_t cmsg_practice_lobby_close_broadcast_channel__get_packed_size
                     (const CMsgPracticeLobbyCloseBroadcastChannel   *message);
size_t cmsg_practice_lobby_close_broadcast_channel__pack
                     (const CMsgPracticeLobbyCloseBroadcastChannel   *message,
                      uint8_t             *out);
size_t cmsg_practice_lobby_close_broadcast_channel__pack_to_buffer
                     (const CMsgPracticeLobbyCloseBroadcastChannel   *message,
                      ProtobufCBuffer     *buffer);
CMsgPracticeLobbyCloseBroadcastChannel *
       cmsg_practice_lobby_close_broadcast_channel__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_practice_lobby_close_broadcast_channel__free_unpacked
                     (CMsgPracticeLobbyCloseBroadcastChannel *message,
                      ProtobufCAllocator *allocator);
/* CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus methods */
void   cmsg_practice_lobby_toggle_broadcast_channel_cameraman_status__init
                     (CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus         *message);
size_t cmsg_practice_lobby_toggle_broadcast_channel_cameraman_status__get_packed_size
                     (const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus   *message);
size_t cmsg_practice_lobby_toggle_broadcast_channel_cameraman_status__pack
                     (const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus   *message,
                      uint8_t             *out);
size_t cmsg_practice_lobby_toggle_broadcast_channel_cameraman_status__pack_to_buffer
                     (const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus   *message,
                      ProtobufCBuffer     *buffer);
CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus *
       cmsg_practice_lobby_toggle_broadcast_channel_cameraman_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_practice_lobby_toggle_broadcast_channel_cameraman_status__free_unpacked
                     (CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus *message,
                      ProtobufCAllocator *allocator);
/* CMsgPracticeLobbyKick methods */
void   cmsg_practice_lobby_kick__init
                     (CMsgPracticeLobbyKick         *message);
size_t cmsg_practice_lobby_kick__get_packed_size
                     (const CMsgPracticeLobbyKick   *message);
size_t cmsg_practice_lobby_kick__pack
                     (const CMsgPracticeLobbyKick   *message,
                      uint8_t             *out);
size_t cmsg_practice_lobby_kick__pack_to_buffer
                     (const CMsgPracticeLobbyKick   *message,
                      ProtobufCBuffer     *buffer);
CMsgPracticeLobbyKick *
       cmsg_practice_lobby_kick__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_practice_lobby_kick__free_unpacked
                     (CMsgPracticeLobbyKick *message,
                      ProtobufCAllocator *allocator);
/* CMsgPracticeLobbyKickFromTeam methods */
void   cmsg_practice_lobby_kick_from_team__init
                     (CMsgPracticeLobbyKickFromTeam         *message);
size_t cmsg_practice_lobby_kick_from_team__get_packed_size
                     (const CMsgPracticeLobbyKickFromTeam   *message);
size_t cmsg_practice_lobby_kick_from_team__pack
                     (const CMsgPracticeLobbyKickFromTeam   *message,
                      uint8_t             *out);
size_t cmsg_practice_lobby_kick_from_team__pack_to_buffer
                     (const CMsgPracticeLobbyKickFromTeam   *message,
                      ProtobufCBuffer     *buffer);
CMsgPracticeLobbyKickFromTeam *
       cmsg_practice_lobby_kick_from_team__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_practice_lobby_kick_from_team__free_unpacked
                     (CMsgPracticeLobbyKickFromTeam *message,
                      ProtobufCAllocator *allocator);
/* CMsgPracticeLobbyLeave methods */
void   cmsg_practice_lobby_leave__init
                     (CMsgPracticeLobbyLeave         *message);
size_t cmsg_practice_lobby_leave__get_packed_size
                     (const CMsgPracticeLobbyLeave   *message);
size_t cmsg_practice_lobby_leave__pack
                     (const CMsgPracticeLobbyLeave   *message,
                      uint8_t             *out);
size_t cmsg_practice_lobby_leave__pack_to_buffer
                     (const CMsgPracticeLobbyLeave   *message,
                      ProtobufCBuffer     *buffer);
CMsgPracticeLobbyLeave *
       cmsg_practice_lobby_leave__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_practice_lobby_leave__free_unpacked
                     (CMsgPracticeLobbyLeave *message,
                      ProtobufCAllocator *allocator);
/* CMsgPracticeLobbyLaunch methods */
void   cmsg_practice_lobby_launch__init
                     (CMsgPracticeLobbyLaunch         *message);
size_t cmsg_practice_lobby_launch__get_packed_size
                     (const CMsgPracticeLobbyLaunch   *message);
size_t cmsg_practice_lobby_launch__pack
                     (const CMsgPracticeLobbyLaunch   *message,
                      uint8_t             *out);
size_t cmsg_practice_lobby_launch__pack_to_buffer
                     (const CMsgPracticeLobbyLaunch   *message,
                      ProtobufCBuffer     *buffer);
CMsgPracticeLobbyLaunch *
       cmsg_practice_lobby_launch__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_practice_lobby_launch__free_unpacked
                     (CMsgPracticeLobbyLaunch *message,
                      ProtobufCAllocator *allocator);
/* CMsgApplyTeamToPracticeLobby methods */
void   cmsg_apply_team_to_practice_lobby__init
                     (CMsgApplyTeamToPracticeLobby         *message);
size_t cmsg_apply_team_to_practice_lobby__get_packed_size
                     (const CMsgApplyTeamToPracticeLobby   *message);
size_t cmsg_apply_team_to_practice_lobby__pack
                     (const CMsgApplyTeamToPracticeLobby   *message,
                      uint8_t             *out);
size_t cmsg_apply_team_to_practice_lobby__pack_to_buffer
                     (const CMsgApplyTeamToPracticeLobby   *message,
                      ProtobufCBuffer     *buffer);
CMsgApplyTeamToPracticeLobby *
       cmsg_apply_team_to_practice_lobby__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_apply_team_to_practice_lobby__free_unpacked
                     (CMsgApplyTeamToPracticeLobby *message,
                      ProtobufCAllocator *allocator);
/* CMsgClearPracticeLobbyTeam methods */
void   cmsg_clear_practice_lobby_team__init
                     (CMsgClearPracticeLobbyTeam         *message);
size_t cmsg_clear_practice_lobby_team__get_packed_size
                     (const CMsgClearPracticeLobbyTeam   *message);
size_t cmsg_clear_practice_lobby_team__pack
                     (const CMsgClearPracticeLobbyTeam   *message,
                      uint8_t             *out);
size_t cmsg_clear_practice_lobby_team__pack_to_buffer
                     (const CMsgClearPracticeLobbyTeam   *message,
                      ProtobufCBuffer     *buffer);
CMsgClearPracticeLobbyTeam *
       cmsg_clear_practice_lobby_team__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_clear_practice_lobby_team__free_unpacked
                     (CMsgClearPracticeLobbyTeam *message,
                      ProtobufCAllocator *allocator);
/* CMsgPracticeLobbyList methods */
void   cmsg_practice_lobby_list__init
                     (CMsgPracticeLobbyList         *message);
size_t cmsg_practice_lobby_list__get_packed_size
                     (const CMsgPracticeLobbyList   *message);
size_t cmsg_practice_lobby_list__pack
                     (const CMsgPracticeLobbyList   *message,
                      uint8_t             *out);
size_t cmsg_practice_lobby_list__pack_to_buffer
                     (const CMsgPracticeLobbyList   *message,
                      ProtobufCBuffer     *buffer);
CMsgPracticeLobbyList *
       cmsg_practice_lobby_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_practice_lobby_list__free_unpacked
                     (CMsgPracticeLobbyList *message,
                      ProtobufCAllocator *allocator);
/* CMsgPracticeLobbyListResponseEntry__CLobbyMember methods */
void   cmsg_practice_lobby_list_response_entry__clobby_member__init
                     (CMsgPracticeLobbyListResponseEntry__CLobbyMember         *message);
/* CMsgPracticeLobbyListResponseEntry methods */
void   cmsg_practice_lobby_list_response_entry__init
                     (CMsgPracticeLobbyListResponseEntry         *message);
size_t cmsg_practice_lobby_list_response_entry__get_packed_size
                     (const CMsgPracticeLobbyListResponseEntry   *message);
size_t cmsg_practice_lobby_list_response_entry__pack
                     (const CMsgPracticeLobbyListResponseEntry   *message,
                      uint8_t             *out);
size_t cmsg_practice_lobby_list_response_entry__pack_to_buffer
                     (const CMsgPracticeLobbyListResponseEntry   *message,
                      ProtobufCBuffer     *buffer);
CMsgPracticeLobbyListResponseEntry *
       cmsg_practice_lobby_list_response_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_practice_lobby_list_response_entry__free_unpacked
                     (CMsgPracticeLobbyListResponseEntry *message,
                      ProtobufCAllocator *allocator);
/* CMsgPracticeLobbyListResponse methods */
void   cmsg_practice_lobby_list_response__init
                     (CMsgPracticeLobbyListResponse         *message);
size_t cmsg_practice_lobby_list_response__get_packed_size
                     (const CMsgPracticeLobbyListResponse   *message);
size_t cmsg_practice_lobby_list_response__pack
                     (const CMsgPracticeLobbyListResponse   *message,
                      uint8_t             *out);
size_t cmsg_practice_lobby_list_response__pack_to_buffer
                     (const CMsgPracticeLobbyListResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgPracticeLobbyListResponse *
       cmsg_practice_lobby_list_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_practice_lobby_list_response__free_unpacked
                     (CMsgPracticeLobbyListResponse *message,
                      ProtobufCAllocator *allocator);
/* CMsgLobbyList methods */
void   cmsg_lobby_list__init
                     (CMsgLobbyList         *message);
size_t cmsg_lobby_list__get_packed_size
                     (const CMsgLobbyList   *message);
size_t cmsg_lobby_list__pack
                     (const CMsgLobbyList   *message,
                      uint8_t             *out);
size_t cmsg_lobby_list__pack_to_buffer
                     (const CMsgLobbyList   *message,
                      ProtobufCBuffer     *buffer);
CMsgLobbyList *
       cmsg_lobby_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_lobby_list__free_unpacked
                     (CMsgLobbyList *message,
                      ProtobufCAllocator *allocator);
/* CMsgLobbyListResponse methods */
void   cmsg_lobby_list_response__init
                     (CMsgLobbyListResponse         *message);
size_t cmsg_lobby_list_response__get_packed_size
                     (const CMsgLobbyListResponse   *message);
size_t cmsg_lobby_list_response__pack
                     (const CMsgLobbyListResponse   *message,
                      uint8_t             *out);
size_t cmsg_lobby_list_response__pack_to_buffer
                     (const CMsgLobbyListResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgLobbyListResponse *
       cmsg_lobby_list_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_lobby_list_response__free_unpacked
                     (CMsgLobbyListResponse *message,
                      ProtobufCAllocator *allocator);
/* CMsgPracticeLobbyJoin methods */
void   cmsg_practice_lobby_join__init
                     (CMsgPracticeLobbyJoin         *message);
size_t cmsg_practice_lobby_join__get_packed_size
                     (const CMsgPracticeLobbyJoin   *message);
size_t cmsg_practice_lobby_join__pack
                     (const CMsgPracticeLobbyJoin   *message,
                      uint8_t             *out);
size_t cmsg_practice_lobby_join__pack_to_buffer
                     (const CMsgPracticeLobbyJoin   *message,
                      ProtobufCBuffer     *buffer);
CMsgPracticeLobbyJoin *
       cmsg_practice_lobby_join__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_practice_lobby_join__free_unpacked
                     (CMsgPracticeLobbyJoin *message,
                      ProtobufCAllocator *allocator);
/* CMsgPracticeLobbyJoinResponse methods */
void   cmsg_practice_lobby_join_response__init
                     (CMsgPracticeLobbyJoinResponse         *message);
size_t cmsg_practice_lobby_join_response__get_packed_size
                     (const CMsgPracticeLobbyJoinResponse   *message);
size_t cmsg_practice_lobby_join_response__pack
                     (const CMsgPracticeLobbyJoinResponse   *message,
                      uint8_t             *out);
size_t cmsg_practice_lobby_join_response__pack_to_buffer
                     (const CMsgPracticeLobbyJoinResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgPracticeLobbyJoinResponse *
       cmsg_practice_lobby_join_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_practice_lobby_join_response__free_unpacked
                     (CMsgPracticeLobbyJoinResponse *message,
                      ProtobufCAllocator *allocator);
/* CMsgFriendPracticeLobbyListRequest methods */
void   cmsg_friend_practice_lobby_list_request__init
                     (CMsgFriendPracticeLobbyListRequest         *message);
size_t cmsg_friend_practice_lobby_list_request__get_packed_size
                     (const CMsgFriendPracticeLobbyListRequest   *message);
size_t cmsg_friend_practice_lobby_list_request__pack
                     (const CMsgFriendPracticeLobbyListRequest   *message,
                      uint8_t             *out);
size_t cmsg_friend_practice_lobby_list_request__pack_to_buffer
                     (const CMsgFriendPracticeLobbyListRequest   *message,
                      ProtobufCBuffer     *buffer);
CMsgFriendPracticeLobbyListRequest *
       cmsg_friend_practice_lobby_list_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_friend_practice_lobby_list_request__free_unpacked
                     (CMsgFriendPracticeLobbyListRequest *message,
                      ProtobufCAllocator *allocator);
/* CMsgFriendPracticeLobbyListResponse methods */
void   cmsg_friend_practice_lobby_list_response__init
                     (CMsgFriendPracticeLobbyListResponse         *message);
size_t cmsg_friend_practice_lobby_list_response__get_packed_size
                     (const CMsgFriendPracticeLobbyListResponse   *message);
size_t cmsg_friend_practice_lobby_list_response__pack
                     (const CMsgFriendPracticeLobbyListResponse   *message,
                      uint8_t             *out);
size_t cmsg_friend_practice_lobby_list_response__pack_to_buffer
                     (const CMsgFriendPracticeLobbyListResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgFriendPracticeLobbyListResponse *
       cmsg_friend_practice_lobby_list_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_friend_practice_lobby_list_response__free_unpacked
                     (CMsgFriendPracticeLobbyListResponse *message,
                      ProtobufCAllocator *allocator);
/* CMsgGuildmatePracticeLobbyListRequest methods */
void   cmsg_guildmate_practice_lobby_list_request__init
                     (CMsgGuildmatePracticeLobbyListRequest         *message);
size_t cmsg_guildmate_practice_lobby_list_request__get_packed_size
                     (const CMsgGuildmatePracticeLobbyListRequest   *message);
size_t cmsg_guildmate_practice_lobby_list_request__pack
                     (const CMsgGuildmatePracticeLobbyListRequest   *message,
                      uint8_t             *out);
size_t cmsg_guildmate_practice_lobby_list_request__pack_to_buffer
                     (const CMsgGuildmatePracticeLobbyListRequest   *message,
                      ProtobufCBuffer     *buffer);
CMsgGuildmatePracticeLobbyListRequest *
       cmsg_guildmate_practice_lobby_list_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_guildmate_practice_lobby_list_request__free_unpacked
                     (CMsgGuildmatePracticeLobbyListRequest *message,
                      ProtobufCAllocator *allocator);
/* CMsgGuildmatePracticeLobbyListResponse methods */
void   cmsg_guildmate_practice_lobby_list_response__init
                     (CMsgGuildmatePracticeLobbyListResponse         *message);
size_t cmsg_guildmate_practice_lobby_list_response__get_packed_size
                     (const CMsgGuildmatePracticeLobbyListResponse   *message);
size_t cmsg_guildmate_practice_lobby_list_response__pack
                     (const CMsgGuildmatePracticeLobbyListResponse   *message,
                      uint8_t             *out);
size_t cmsg_guildmate_practice_lobby_list_response__pack_to_buffer
                     (const CMsgGuildmatePracticeLobbyListResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgGuildmatePracticeLobbyListResponse *
       cmsg_guildmate_practice_lobby_list_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_guildmate_practice_lobby_list_response__free_unpacked
                     (CMsgGuildmatePracticeLobbyListResponse *message,
                      ProtobufCAllocator *allocator);
/* CMsgJoinableCustomGameModesRequest methods */
void   cmsg_joinable_custom_game_modes_request__init
                     (CMsgJoinableCustomGameModesRequest         *message);
size_t cmsg_joinable_custom_game_modes_request__get_packed_size
                     (const CMsgJoinableCustomGameModesRequest   *message);
size_t cmsg_joinable_custom_game_modes_request__pack
                     (const CMsgJoinableCustomGameModesRequest   *message,
                      uint8_t             *out);
size_t cmsg_joinable_custom_game_modes_request__pack_to_buffer
                     (const CMsgJoinableCustomGameModesRequest   *message,
                      ProtobufCBuffer     *buffer);
CMsgJoinableCustomGameModesRequest *
       cmsg_joinable_custom_game_modes_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_joinable_custom_game_modes_request__free_unpacked
                     (CMsgJoinableCustomGameModesRequest *message,
                      ProtobufCAllocator *allocator);
/* CMsgJoinableCustomGameModesResponseEntry methods */
void   cmsg_joinable_custom_game_modes_response_entry__init
                     (CMsgJoinableCustomGameModesResponseEntry         *message);
size_t cmsg_joinable_custom_game_modes_response_entry__get_packed_size
                     (const CMsgJoinableCustomGameModesResponseEntry   *message);
size_t cmsg_joinable_custom_game_modes_response_entry__pack
                     (const CMsgJoinableCustomGameModesResponseEntry   *message,
                      uint8_t             *out);
size_t cmsg_joinable_custom_game_modes_response_entry__pack_to_buffer
                     (const CMsgJoinableCustomGameModesResponseEntry   *message,
                      ProtobufCBuffer     *buffer);
CMsgJoinableCustomGameModesResponseEntry *
       cmsg_joinable_custom_game_modes_response_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_joinable_custom_game_modes_response_entry__free_unpacked
                     (CMsgJoinableCustomGameModesResponseEntry *message,
                      ProtobufCAllocator *allocator);
/* CMsgJoinableCustomGameModesResponse methods */
void   cmsg_joinable_custom_game_modes_response__init
                     (CMsgJoinableCustomGameModesResponse         *message);
size_t cmsg_joinable_custom_game_modes_response__get_packed_size
                     (const CMsgJoinableCustomGameModesResponse   *message);
size_t cmsg_joinable_custom_game_modes_response__pack
                     (const CMsgJoinableCustomGameModesResponse   *message,
                      uint8_t             *out);
size_t cmsg_joinable_custom_game_modes_response__pack_to_buffer
                     (const CMsgJoinableCustomGameModesResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgJoinableCustomGameModesResponse *
       cmsg_joinable_custom_game_modes_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_joinable_custom_game_modes_response__free_unpacked
                     (CMsgJoinableCustomGameModesResponse *message,
                      ProtobufCAllocator *allocator);
/* CMsgJoinableCustomLobbiesRequest methods */
void   cmsg_joinable_custom_lobbies_request__init
                     (CMsgJoinableCustomLobbiesRequest         *message);
size_t cmsg_joinable_custom_lobbies_request__get_packed_size
                     (const CMsgJoinableCustomLobbiesRequest   *message);
size_t cmsg_joinable_custom_lobbies_request__pack
                     (const CMsgJoinableCustomLobbiesRequest   *message,
                      uint8_t             *out);
size_t cmsg_joinable_custom_lobbies_request__pack_to_buffer
                     (const CMsgJoinableCustomLobbiesRequest   *message,
                      ProtobufCBuffer     *buffer);
CMsgJoinableCustomLobbiesRequest *
       cmsg_joinable_custom_lobbies_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_joinable_custom_lobbies_request__free_unpacked
                     (CMsgJoinableCustomLobbiesRequest *message,
                      ProtobufCAllocator *allocator);
/* CMsgJoinableCustomLobbiesResponseEntry methods */
void   cmsg_joinable_custom_lobbies_response_entry__init
                     (CMsgJoinableCustomLobbiesResponseEntry         *message);
size_t cmsg_joinable_custom_lobbies_response_entry__get_packed_size
                     (const CMsgJoinableCustomLobbiesResponseEntry   *message);
size_t cmsg_joinable_custom_lobbies_response_entry__pack
                     (const CMsgJoinableCustomLobbiesResponseEntry   *message,
                      uint8_t             *out);
size_t cmsg_joinable_custom_lobbies_response_entry__pack_to_buffer
                     (const CMsgJoinableCustomLobbiesResponseEntry   *message,
                      ProtobufCBuffer     *buffer);
CMsgJoinableCustomLobbiesResponseEntry *
       cmsg_joinable_custom_lobbies_response_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_joinable_custom_lobbies_response_entry__free_unpacked
                     (CMsgJoinableCustomLobbiesResponseEntry *message,
                      ProtobufCAllocator *allocator);
/* CMsgJoinableCustomLobbiesResponse methods */
void   cmsg_joinable_custom_lobbies_response__init
                     (CMsgJoinableCustomLobbiesResponse         *message);
size_t cmsg_joinable_custom_lobbies_response__get_packed_size
                     (const CMsgJoinableCustomLobbiesResponse   *message);
size_t cmsg_joinable_custom_lobbies_response__pack
                     (const CMsgJoinableCustomLobbiesResponse   *message,
                      uint8_t             *out);
size_t cmsg_joinable_custom_lobbies_response__pack_to_buffer
                     (const CMsgJoinableCustomLobbiesResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgJoinableCustomLobbiesResponse *
       cmsg_joinable_custom_lobbies_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_joinable_custom_lobbies_response__free_unpacked
                     (CMsgJoinableCustomLobbiesResponse *message,
                      ProtobufCAllocator *allocator);
/* CMsgQuickJoinCustomLobby__LegacyRegionPing methods */
void   cmsg_quick_join_custom_lobby__legacy_region_ping__init
                     (CMsgQuickJoinCustomLobby__LegacyRegionPing         *message);
/* CMsgQuickJoinCustomLobby methods */
void   cmsg_quick_join_custom_lobby__init
                     (CMsgQuickJoinCustomLobby         *message);
size_t cmsg_quick_join_custom_lobby__get_packed_size
                     (const CMsgQuickJoinCustomLobby   *message);
size_t cmsg_quick_join_custom_lobby__pack
                     (const CMsgQuickJoinCustomLobby   *message,
                      uint8_t             *out);
size_t cmsg_quick_join_custom_lobby__pack_to_buffer
                     (const CMsgQuickJoinCustomLobby   *message,
                      ProtobufCBuffer     *buffer);
CMsgQuickJoinCustomLobby *
       cmsg_quick_join_custom_lobby__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_quick_join_custom_lobby__free_unpacked
                     (CMsgQuickJoinCustomLobby *message,
                      ProtobufCAllocator *allocator);
/* CMsgQuickJoinCustomLobbyResponse methods */
void   cmsg_quick_join_custom_lobby_response__init
                     (CMsgQuickJoinCustomLobbyResponse         *message);
size_t cmsg_quick_join_custom_lobby_response__get_packed_size
                     (const CMsgQuickJoinCustomLobbyResponse   *message);
size_t cmsg_quick_join_custom_lobby_response__pack
                     (const CMsgQuickJoinCustomLobbyResponse   *message,
                      uint8_t             *out);
size_t cmsg_quick_join_custom_lobby_response__pack_to_buffer
                     (const CMsgQuickJoinCustomLobbyResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgQuickJoinCustomLobbyResponse *
       cmsg_quick_join_custom_lobby_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_quick_join_custom_lobby_response__free_unpacked
                     (CMsgQuickJoinCustomLobbyResponse *message,
                      ProtobufCAllocator *allocator);
/* CMsgBotGameCreate methods */
void   cmsg_bot_game_create__init
                     (CMsgBotGameCreate         *message);
size_t cmsg_bot_game_create__get_packed_size
                     (const CMsgBotGameCreate   *message);
size_t cmsg_bot_game_create__pack
                     (const CMsgBotGameCreate   *message,
                      uint8_t             *out);
size_t cmsg_bot_game_create__pack_to_buffer
                     (const CMsgBotGameCreate   *message,
                      ProtobufCBuffer     *buffer);
CMsgBotGameCreate *
       cmsg_bot_game_create__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_bot_game_create__free_unpacked
                     (CMsgBotGameCreate *message,
                      ProtobufCAllocator *allocator);
/* CMsgCustomGameCreate methods */
void   cmsg_custom_game_create__init
                     (CMsgCustomGameCreate         *message);
size_t cmsg_custom_game_create__get_packed_size
                     (const CMsgCustomGameCreate   *message);
size_t cmsg_custom_game_create__pack
                     (const CMsgCustomGameCreate   *message,
                      uint8_t             *out);
size_t cmsg_custom_game_create__pack_to_buffer
                     (const CMsgCustomGameCreate   *message,
                      ProtobufCBuffer     *buffer);
CMsgCustomGameCreate *
       cmsg_custom_game_create__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_custom_game_create__free_unpacked
                     (CMsgCustomGameCreate *message,
                      ProtobufCAllocator *allocator);
/* CMsgEventGameCreate methods */
void   cmsg_event_game_create__init
                     (CMsgEventGameCreate         *message);
size_t cmsg_event_game_create__get_packed_size
                     (const CMsgEventGameCreate   *message);
size_t cmsg_event_game_create__pack
                     (const CMsgEventGameCreate   *message,
                      uint8_t             *out);
size_t cmsg_event_game_create__pack_to_buffer
                     (const CMsgEventGameCreate   *message,
                      ProtobufCBuffer     *buffer);
CMsgEventGameCreate *
       cmsg_event_game_create__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_event_game_create__free_unpacked
                     (CMsgEventGameCreate *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTAPartyMemberSetCoach methods */
void   cmsg_dotaparty_member_set_coach__init
                     (CMsgDOTAPartyMemberSetCoach         *message);
size_t cmsg_dotaparty_member_set_coach__get_packed_size
                     (const CMsgDOTAPartyMemberSetCoach   *message);
size_t cmsg_dotaparty_member_set_coach__pack
                     (const CMsgDOTAPartyMemberSetCoach   *message,
                      uint8_t             *out);
size_t cmsg_dotaparty_member_set_coach__pack_to_buffer
                     (const CMsgDOTAPartyMemberSetCoach   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTAPartyMemberSetCoach *
       cmsg_dotaparty_member_set_coach__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotaparty_member_set_coach__free_unpacked
                     (CMsgDOTAPartyMemberSetCoach *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTASetGroupLeader methods */
void   cmsg_dotaset_group_leader__init
                     (CMsgDOTASetGroupLeader         *message);
size_t cmsg_dotaset_group_leader__get_packed_size
                     (const CMsgDOTASetGroupLeader   *message);
size_t cmsg_dotaset_group_leader__pack
                     (const CMsgDOTASetGroupLeader   *message,
                      uint8_t             *out);
size_t cmsg_dotaset_group_leader__pack_to_buffer
                     (const CMsgDOTASetGroupLeader   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTASetGroupLeader *
       cmsg_dotaset_group_leader__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotaset_group_leader__free_unpacked
                     (CMsgDOTASetGroupLeader *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTACancelGroupInvites methods */
void   cmsg_dotacancel_group_invites__init
                     (CMsgDOTACancelGroupInvites         *message);
size_t cmsg_dotacancel_group_invites__get_packed_size
                     (const CMsgDOTACancelGroupInvites   *message);
size_t cmsg_dotacancel_group_invites__pack
                     (const CMsgDOTACancelGroupInvites   *message,
                      uint8_t             *out);
size_t cmsg_dotacancel_group_invites__pack_to_buffer
                     (const CMsgDOTACancelGroupInvites   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTACancelGroupInvites *
       cmsg_dotacancel_group_invites__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotacancel_group_invites__free_unpacked
                     (CMsgDOTACancelGroupInvites *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTASetGroupOpenStatus methods */
void   cmsg_dotaset_group_open_status__init
                     (CMsgDOTASetGroupOpenStatus         *message);
size_t cmsg_dotaset_group_open_status__get_packed_size
                     (const CMsgDOTASetGroupOpenStatus   *message);
size_t cmsg_dotaset_group_open_status__pack
                     (const CMsgDOTASetGroupOpenStatus   *message,
                      uint8_t             *out);
size_t cmsg_dotaset_group_open_status__pack_to_buffer
                     (const CMsgDOTASetGroupOpenStatus   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTASetGroupOpenStatus *
       cmsg_dotaset_group_open_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotaset_group_open_status__free_unpacked
                     (CMsgDOTASetGroupOpenStatus *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTAGroupMergeInvite methods */
void   cmsg_dotagroup_merge_invite__init
                     (CMsgDOTAGroupMergeInvite         *message);
size_t cmsg_dotagroup_merge_invite__get_packed_size
                     (const CMsgDOTAGroupMergeInvite   *message);
size_t cmsg_dotagroup_merge_invite__pack
                     (const CMsgDOTAGroupMergeInvite   *message,
                      uint8_t             *out);
size_t cmsg_dotagroup_merge_invite__pack_to_buffer
                     (const CMsgDOTAGroupMergeInvite   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTAGroupMergeInvite *
       cmsg_dotagroup_merge_invite__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotagroup_merge_invite__free_unpacked
                     (CMsgDOTAGroupMergeInvite *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTAGroupMergeResponse methods */
void   cmsg_dotagroup_merge_response__init
                     (CMsgDOTAGroupMergeResponse         *message);
size_t cmsg_dotagroup_merge_response__get_packed_size
                     (const CMsgDOTAGroupMergeResponse   *message);
size_t cmsg_dotagroup_merge_response__pack
                     (const CMsgDOTAGroupMergeResponse   *message,
                      uint8_t             *out);
size_t cmsg_dotagroup_merge_response__pack_to_buffer
                     (const CMsgDOTAGroupMergeResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTAGroupMergeResponse *
       cmsg_dotagroup_merge_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotagroup_merge_response__free_unpacked
                     (CMsgDOTAGroupMergeResponse *message,
                      ProtobufCAllocator *allocator);
/* CMsgDOTAGroupMergeReply methods */
void   cmsg_dotagroup_merge_reply__init
                     (CMsgDOTAGroupMergeReply         *message);
size_t cmsg_dotagroup_merge_reply__get_packed_size
                     (const CMsgDOTAGroupMergeReply   *message);
size_t cmsg_dotagroup_merge_reply__pack
                     (const CMsgDOTAGroupMergeReply   *message,
                      uint8_t             *out);
size_t cmsg_dotagroup_merge_reply__pack_to_buffer
                     (const CMsgDOTAGroupMergeReply   *message,
                      ProtobufCBuffer     *buffer);
CMsgDOTAGroupMergeReply *
       cmsg_dotagroup_merge_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_dotagroup_merge_reply__free_unpacked
                     (CMsgDOTAGroupMergeReply *message,
                      ProtobufCAllocator *allocator);
/* CMsgSpectatorLobbyGameDetails methods */
void   cmsg_spectator_lobby_game_details__init
                     (CMsgSpectatorLobbyGameDetails         *message);
size_t cmsg_spectator_lobby_game_details__get_packed_size
                     (const CMsgSpectatorLobbyGameDetails   *message);
size_t cmsg_spectator_lobby_game_details__pack
                     (const CMsgSpectatorLobbyGameDetails   *message,
                      uint8_t             *out);
size_t cmsg_spectator_lobby_game_details__pack_to_buffer
                     (const CMsgSpectatorLobbyGameDetails   *message,
                      ProtobufCBuffer     *buffer);
CMsgSpectatorLobbyGameDetails *
       cmsg_spectator_lobby_game_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_spectator_lobby_game_details__free_unpacked
                     (CMsgSpectatorLobbyGameDetails *message,
                      ProtobufCAllocator *allocator);
/* CMsgSetSpectatorLobbyDetails methods */
void   cmsg_set_spectator_lobby_details__init
                     (CMsgSetSpectatorLobbyDetails         *message);
size_t cmsg_set_spectator_lobby_details__get_packed_size
                     (const CMsgSetSpectatorLobbyDetails   *message);
size_t cmsg_set_spectator_lobby_details__pack
                     (const CMsgSetSpectatorLobbyDetails   *message,
                      uint8_t             *out);
size_t cmsg_set_spectator_lobby_details__pack_to_buffer
                     (const CMsgSetSpectatorLobbyDetails   *message,
                      ProtobufCBuffer     *buffer);
CMsgSetSpectatorLobbyDetails *
       cmsg_set_spectator_lobby_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_set_spectator_lobby_details__free_unpacked
                     (CMsgSetSpectatorLobbyDetails *message,
                      ProtobufCAllocator *allocator);
/* CMsgCreateSpectatorLobby methods */
void   cmsg_create_spectator_lobby__init
                     (CMsgCreateSpectatorLobby         *message);
size_t cmsg_create_spectator_lobby__get_packed_size
                     (const CMsgCreateSpectatorLobby   *message);
size_t cmsg_create_spectator_lobby__pack
                     (const CMsgCreateSpectatorLobby   *message,
                      uint8_t             *out);
size_t cmsg_create_spectator_lobby__pack_to_buffer
                     (const CMsgCreateSpectatorLobby   *message,
                      ProtobufCBuffer     *buffer);
CMsgCreateSpectatorLobby *
       cmsg_create_spectator_lobby__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_create_spectator_lobby__free_unpacked
                     (CMsgCreateSpectatorLobby *message,
                      ProtobufCAllocator *allocator);
/* CMsgSpectatorLobbyList methods */
void   cmsg_spectator_lobby_list__init
                     (CMsgSpectatorLobbyList         *message);
size_t cmsg_spectator_lobby_list__get_packed_size
                     (const CMsgSpectatorLobbyList   *message);
size_t cmsg_spectator_lobby_list__pack
                     (const CMsgSpectatorLobbyList   *message,
                      uint8_t             *out);
size_t cmsg_spectator_lobby_list__pack_to_buffer
                     (const CMsgSpectatorLobbyList   *message,
                      ProtobufCBuffer     *buffer);
CMsgSpectatorLobbyList *
       cmsg_spectator_lobby_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_spectator_lobby_list__free_unpacked
                     (CMsgSpectatorLobbyList *message,
                      ProtobufCAllocator *allocator);
/* CMsgSpectatorLobbyListResponse__SpectatorLobby methods */
void   cmsg_spectator_lobby_list_response__spectator_lobby__init
                     (CMsgSpectatorLobbyListResponse__SpectatorLobby         *message);
/* CMsgSpectatorLobbyListResponse methods */
void   cmsg_spectator_lobby_list_response__init
                     (CMsgSpectatorLobbyListResponse         *message);
size_t cmsg_spectator_lobby_list_response__get_packed_size
                     (const CMsgSpectatorLobbyListResponse   *message);
size_t cmsg_spectator_lobby_list_response__pack
                     (const CMsgSpectatorLobbyListResponse   *message,
                      uint8_t             *out);
size_t cmsg_spectator_lobby_list_response__pack_to_buffer
                     (const CMsgSpectatorLobbyListResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgSpectatorLobbyListResponse *
       cmsg_spectator_lobby_list_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_spectator_lobby_list_response__free_unpacked
                     (CMsgSpectatorLobbyListResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CMsgStartFindingMatch_Closure)
                 (const CMsgStartFindingMatch *message,
                  void *closure_data);
typedef void (*CMsgStartFindingMatchResult_Closure)
                 (const CMsgStartFindingMatchResult *message,
                  void *closure_data);
typedef void (*CMsgStopFindingMatch_Closure)
                 (const CMsgStopFindingMatch *message,
                  void *closure_data);
typedef void (*CMsgReadyUp_Closure)
                 (const CMsgReadyUp *message,
                  void *closure_data);
typedef void (*CMsgReadyUpStatus_Closure)
                 (const CMsgReadyUpStatus *message,
                  void *closure_data);
typedef void (*CMsgAbandonCurrentGame_Closure)
                 (const CMsgAbandonCurrentGame *message,
                  void *closure_data);
typedef void (*CMsgPracticeLobbySetDetails_Closure)
                 (const CMsgPracticeLobbySetDetails *message,
                  void *closure_data);
typedef void (*CMsgPracticeLobbyCreate__SaveGame_Closure)
                 (const CMsgPracticeLobbyCreate__SaveGame *message,
                  void *closure_data);
typedef void (*CMsgPracticeLobbyCreate_Closure)
                 (const CMsgPracticeLobbyCreate *message,
                  void *closure_data);
typedef void (*CMsgPracticeLobbySetTeamSlot_Closure)
                 (const CMsgPracticeLobbySetTeamSlot *message,
                  void *closure_data);
typedef void (*CMsgPracticeLobbySetCoach_Closure)
                 (const CMsgPracticeLobbySetCoach *message,
                  void *closure_data);
typedef void (*CMsgPracticeLobbyJoinBroadcastChannel_Closure)
                 (const CMsgPracticeLobbyJoinBroadcastChannel *message,
                  void *closure_data);
typedef void (*CMsgPracticeLobbyCloseBroadcastChannel_Closure)
                 (const CMsgPracticeLobbyCloseBroadcastChannel *message,
                  void *closure_data);
typedef void (*CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_Closure)
                 (const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus *message,
                  void *closure_data);
typedef void (*CMsgPracticeLobbyKick_Closure)
                 (const CMsgPracticeLobbyKick *message,
                  void *closure_data);
typedef void (*CMsgPracticeLobbyKickFromTeam_Closure)
                 (const CMsgPracticeLobbyKickFromTeam *message,
                  void *closure_data);
typedef void (*CMsgPracticeLobbyLeave_Closure)
                 (const CMsgPracticeLobbyLeave *message,
                  void *closure_data);
typedef void (*CMsgPracticeLobbyLaunch_Closure)
                 (const CMsgPracticeLobbyLaunch *message,
                  void *closure_data);
typedef void (*CMsgApplyTeamToPracticeLobby_Closure)
                 (const CMsgApplyTeamToPracticeLobby *message,
                  void *closure_data);
typedef void (*CMsgClearPracticeLobbyTeam_Closure)
                 (const CMsgClearPracticeLobbyTeam *message,
                  void *closure_data);
typedef void (*CMsgPracticeLobbyList_Closure)
                 (const CMsgPracticeLobbyList *message,
                  void *closure_data);
typedef void (*CMsgPracticeLobbyListResponseEntry__CLobbyMember_Closure)
                 (const CMsgPracticeLobbyListResponseEntry__CLobbyMember *message,
                  void *closure_data);
typedef void (*CMsgPracticeLobbyListResponseEntry_Closure)
                 (const CMsgPracticeLobbyListResponseEntry *message,
                  void *closure_data);
typedef void (*CMsgPracticeLobbyListResponse_Closure)
                 (const CMsgPracticeLobbyListResponse *message,
                  void *closure_data);
typedef void (*CMsgLobbyList_Closure)
                 (const CMsgLobbyList *message,
                  void *closure_data);
typedef void (*CMsgLobbyListResponse_Closure)
                 (const CMsgLobbyListResponse *message,
                  void *closure_data);
typedef void (*CMsgPracticeLobbyJoin_Closure)
                 (const CMsgPracticeLobbyJoin *message,
                  void *closure_data);
typedef void (*CMsgPracticeLobbyJoinResponse_Closure)
                 (const CMsgPracticeLobbyJoinResponse *message,
                  void *closure_data);
typedef void (*CMsgFriendPracticeLobbyListRequest_Closure)
                 (const CMsgFriendPracticeLobbyListRequest *message,
                  void *closure_data);
typedef void (*CMsgFriendPracticeLobbyListResponse_Closure)
                 (const CMsgFriendPracticeLobbyListResponse *message,
                  void *closure_data);
typedef void (*CMsgGuildmatePracticeLobbyListRequest_Closure)
                 (const CMsgGuildmatePracticeLobbyListRequest *message,
                  void *closure_data);
typedef void (*CMsgGuildmatePracticeLobbyListResponse_Closure)
                 (const CMsgGuildmatePracticeLobbyListResponse *message,
                  void *closure_data);
typedef void (*CMsgJoinableCustomGameModesRequest_Closure)
                 (const CMsgJoinableCustomGameModesRequest *message,
                  void *closure_data);
typedef void (*CMsgJoinableCustomGameModesResponseEntry_Closure)
                 (const CMsgJoinableCustomGameModesResponseEntry *message,
                  void *closure_data);
typedef void (*CMsgJoinableCustomGameModesResponse_Closure)
                 (const CMsgJoinableCustomGameModesResponse *message,
                  void *closure_data);
typedef void (*CMsgJoinableCustomLobbiesRequest_Closure)
                 (const CMsgJoinableCustomLobbiesRequest *message,
                  void *closure_data);
typedef void (*CMsgJoinableCustomLobbiesResponseEntry_Closure)
                 (const CMsgJoinableCustomLobbiesResponseEntry *message,
                  void *closure_data);
typedef void (*CMsgJoinableCustomLobbiesResponse_Closure)
                 (const CMsgJoinableCustomLobbiesResponse *message,
                  void *closure_data);
typedef void (*CMsgQuickJoinCustomLobby__LegacyRegionPing_Closure)
                 (const CMsgQuickJoinCustomLobby__LegacyRegionPing *message,
                  void *closure_data);
typedef void (*CMsgQuickJoinCustomLobby_Closure)
                 (const CMsgQuickJoinCustomLobby *message,
                  void *closure_data);
typedef void (*CMsgQuickJoinCustomLobbyResponse_Closure)
                 (const CMsgQuickJoinCustomLobbyResponse *message,
                  void *closure_data);
typedef void (*CMsgBotGameCreate_Closure)
                 (const CMsgBotGameCreate *message,
                  void *closure_data);
typedef void (*CMsgCustomGameCreate_Closure)
                 (const CMsgCustomGameCreate *message,
                  void *closure_data);
typedef void (*CMsgEventGameCreate_Closure)
                 (const CMsgEventGameCreate *message,
                  void *closure_data);
typedef void (*CMsgDOTAPartyMemberSetCoach_Closure)
                 (const CMsgDOTAPartyMemberSetCoach *message,
                  void *closure_data);
typedef void (*CMsgDOTASetGroupLeader_Closure)
                 (const CMsgDOTASetGroupLeader *message,
                  void *closure_data);
typedef void (*CMsgDOTACancelGroupInvites_Closure)
                 (const CMsgDOTACancelGroupInvites *message,
                  void *closure_data);
typedef void (*CMsgDOTASetGroupOpenStatus_Closure)
                 (const CMsgDOTASetGroupOpenStatus *message,
                  void *closure_data);
typedef void (*CMsgDOTAGroupMergeInvite_Closure)
                 (const CMsgDOTAGroupMergeInvite *message,
                  void *closure_data);
typedef void (*CMsgDOTAGroupMergeResponse_Closure)
                 (const CMsgDOTAGroupMergeResponse *message,
                  void *closure_data);
typedef void (*CMsgDOTAGroupMergeReply_Closure)
                 (const CMsgDOTAGroupMergeReply *message,
                  void *closure_data);
typedef void (*CMsgSpectatorLobbyGameDetails_Closure)
                 (const CMsgSpectatorLobbyGameDetails *message,
                  void *closure_data);
typedef void (*CMsgSetSpectatorLobbyDetails_Closure)
                 (const CMsgSetSpectatorLobbyDetails *message,
                  void *closure_data);
typedef void (*CMsgCreateSpectatorLobby_Closure)
                 (const CMsgCreateSpectatorLobby *message,
                  void *closure_data);
typedef void (*CMsgSpectatorLobbyList_Closure)
                 (const CMsgSpectatorLobbyList *message,
                  void *closure_data);
typedef void (*CMsgSpectatorLobbyListResponse__SpectatorLobby_Closure)
                 (const CMsgSpectatorLobbyListResponse__SpectatorLobby *message,
                  void *closure_data);
typedef void (*CMsgSpectatorLobbyListResponse_Closure)
                 (const CMsgSpectatorLobbyListResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    estart_finding_match_result__descriptor;
extern const ProtobufCMessageDescriptor cmsg_start_finding_match__descriptor;
extern const ProtobufCMessageDescriptor cmsg_start_finding_match_result__descriptor;
extern const ProtobufCMessageDescriptor cmsg_stop_finding_match__descriptor;
extern const ProtobufCMessageDescriptor cmsg_ready_up__descriptor;
extern const ProtobufCMessageDescriptor cmsg_ready_up_status__descriptor;
extern const ProtobufCMessageDescriptor cmsg_abandon_current_game__descriptor;
extern const ProtobufCMessageDescriptor cmsg_practice_lobby_set_details__descriptor;
extern const ProtobufCMessageDescriptor cmsg_practice_lobby_create__descriptor;
extern const ProtobufCMessageDescriptor cmsg_practice_lobby_create__save_game__descriptor;
extern const ProtobufCMessageDescriptor cmsg_practice_lobby_set_team_slot__descriptor;
extern const ProtobufCMessageDescriptor cmsg_practice_lobby_set_coach__descriptor;
extern const ProtobufCMessageDescriptor cmsg_practice_lobby_join_broadcast_channel__descriptor;
extern const ProtobufCMessageDescriptor cmsg_practice_lobby_close_broadcast_channel__descriptor;
extern const ProtobufCMessageDescriptor cmsg_practice_lobby_toggle_broadcast_channel_cameraman_status__descriptor;
extern const ProtobufCMessageDescriptor cmsg_practice_lobby_kick__descriptor;
extern const ProtobufCMessageDescriptor cmsg_practice_lobby_kick_from_team__descriptor;
extern const ProtobufCMessageDescriptor cmsg_practice_lobby_leave__descriptor;
extern const ProtobufCMessageDescriptor cmsg_practice_lobby_launch__descriptor;
extern const ProtobufCMessageDescriptor cmsg_apply_team_to_practice_lobby__descriptor;
extern const ProtobufCMessageDescriptor cmsg_clear_practice_lobby_team__descriptor;
extern const ProtobufCMessageDescriptor cmsg_practice_lobby_list__descriptor;
extern const ProtobufCMessageDescriptor cmsg_practice_lobby_list_response_entry__descriptor;
extern const ProtobufCMessageDescriptor cmsg_practice_lobby_list_response_entry__clobby_member__descriptor;
extern const ProtobufCMessageDescriptor cmsg_practice_lobby_list_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_lobby_list__descriptor;
extern const ProtobufCMessageDescriptor cmsg_lobby_list_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_practice_lobby_join__descriptor;
extern const ProtobufCMessageDescriptor cmsg_practice_lobby_join_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_friend_practice_lobby_list_request__descriptor;
extern const ProtobufCMessageDescriptor cmsg_friend_practice_lobby_list_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_guildmate_practice_lobby_list_request__descriptor;
extern const ProtobufCMessageDescriptor cmsg_guildmate_practice_lobby_list_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_joinable_custom_game_modes_request__descriptor;
extern const ProtobufCMessageDescriptor cmsg_joinable_custom_game_modes_response_entry__descriptor;
extern const ProtobufCMessageDescriptor cmsg_joinable_custom_game_modes_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_joinable_custom_lobbies_request__descriptor;
extern const ProtobufCMessageDescriptor cmsg_joinable_custom_lobbies_response_entry__descriptor;
extern const ProtobufCMessageDescriptor cmsg_joinable_custom_lobbies_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_quick_join_custom_lobby__descriptor;
extern const ProtobufCMessageDescriptor cmsg_quick_join_custom_lobby__legacy_region_ping__descriptor;
extern const ProtobufCMessageDescriptor cmsg_quick_join_custom_lobby_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_bot_game_create__descriptor;
extern const ProtobufCMessageDescriptor cmsg_custom_game_create__descriptor;
extern const ProtobufCMessageDescriptor cmsg_event_game_create__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotaparty_member_set_coach__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotaset_group_leader__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotacancel_group_invites__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotaset_group_open_status__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotagroup_merge_invite__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotagroup_merge_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_dotagroup_merge_reply__descriptor;
extern const ProtobufCMessageDescriptor cmsg_spectator_lobby_game_details__descriptor;
extern const ProtobufCMessageDescriptor cmsg_set_spectator_lobby_details__descriptor;
extern const ProtobufCMessageDescriptor cmsg_create_spectator_lobby__descriptor;
extern const ProtobufCMessageDescriptor cmsg_spectator_lobby_list__descriptor;
extern const ProtobufCMessageDescriptor cmsg_spectator_lobby_list_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_spectator_lobby_list_response__spectator_lobby__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto__INCLUDED */
